/*Dimensions of the scenery display*/
@value displayWidth: 640px;

@value displayHeight: 500px;

@value baseButtonColor: rgb(89, 93, 94);

@value pressedButtonColor: rgb(54,56,57);

@value buttonBorderColor: transparent;

@value focusHighlightColor: #6C8EAC;

/*background color for the page*/
@value backgroundColor: #2E4152;

@value textColor: #bdcbda;

@value warningColor: #FFC080;

/* The flex parent for the three columns of the board page */
:local(.rowContainer) {
  display: flex;
  flex-direction: row;

  /*so that contents are centered within extra spacing added by flex*/
  align-content: center;
  column-gap: 5px
}

/*An (empty) item in the row so that the scenery display is centered*/
:local(.reactColumn) {
  flex: 0.5;
}

/*Column containing the scenery Display (and possibly the editor)*/
:local(.displayColumn) {

  /* So that this column takes up have of the view, but this will adjust with javascript */
  flex: 0.5;

  /*This component is a column with child contents*/
  display: flex;
  flex-direction: column;
  row-gap: 20px;
}

/* Styling for the sim display */
:local(.displayPanel) {
  /*width: displayWidth;*/
  /*height: displayHeight;*/
}

/*applied to many panels in the board page*/
:local(.panelClass) {
  border-color: #6C8EAC;
  border-style: solid;
  color: textColor;
  padding: 10px;
  height: 100vh;
  overflow: auto;
}

:local(.editor) {
  height: 400px;
}

:local(.controlElement) {
  padding-top: 10px;
  padding-bottom: 10px;
}

:local(.extraPadding) {
  padding-top: 20px;
  padding-bottom: 20px;
}

:local(.horizontalPadding) {
  padding-right: 10px;
}

:local(.feedbackElement) {
  font-size: 16px;
}

/*Override the default focus highlight styling for bootstrap to match our color scheme*/
:local(.for-control:focus) {
  border-color: #6C8EAC;
  box-shadow: 0 0 0 0.1rem #6C8EAC;
}

/*Override default for bootstrap tabs*/
/*active tab*/
.nav.nav-tabs .nav-link.active {
  background-color: rgb(89, 93, 94);
  color: rgb(189, 203, 218);
}

/*inactive tabs*/
.nav.nav-tabs .nav-link {
  /*background-color: white;*/
  color: rgb(189, 203, 218);
}

.nav.nav-tabs .nav-link:hover {
  background-color: rgb(122, 125, 126);
  color: rgb(189, 203, 218);
}

/* Override default for bootstrap pill tabs*/
.nav.nav-pill .nav-link.active {
  background-color: rgb(89, 93, 94);
  color: rgb(189, 203, 218);
}

/*inactive tabs*/
.nav.nav-pill .nav-link {
  background-color: transparent;
  color: rgb(189, 203, 218);
}

.nav.nav-pill .nav-link:hover {
  background-color: rgb(122, 125, 126);
  color: rgb(189, 203, 218);
}

:local(.inlineBlock) {
  display: inline-block;
}

/*Custom button styling for this app */
:local(.customButton) {
  background-color: rgb(89, 93, 94);
  color: rgb(189, 203, 218);
  border-color: transparent;
}

:local(.customButton:hover) {
  background-color: rgb(122, 125, 126);
  color: rgb(189, 203, 218);
  border-color: transparent;
}

:local(.customButton:focus) {
  border-color: #6C8EAC;
  box-shadow: 0 0 0 0.1rem #6C8EAC;
}

:local(.customButton:active) {
  background-color: pressedButtonColor !important;
  color: rgb(189, 203, 218) !important;
  border-color: buttonBorderColor !important;
}

:local(.customButton:disabled) {
  background-color: rgb(60, 60, 60) !important;
  color: rgb(189, 203, 218) !important;
  border-color: black !important;
}

/*Styling for toggles (radio, checkbox, toggle)*/
.form-check-input:checked {
  background-color: focusHighlightColor;
  border-color: focusHighlightColor;
}

/*Styling for focus of form controls*/
.form-control:focus {
  border-color: #6C8EAC;
  box-shadow: 0 0 0 0.1rem #6C8EAC;
}


:local(.floatingDelete ) {
  float: right;
}

:local(.deleteButtonIcon ) {
  scale: 2;
}

:local(.listGroupItem ) {
  background-color: backgroundColor;
  color: textColor;
}

:local(.dialog) {
  background-color: backgroundColor;
  color: textColor;
}

/**
  * Override the default styling for the accordion component
  */
.accordion-item {
  background-color: backgroundColor;
  color: textColor;
}

.accordion-body {
  background-color: backgroundColor;
  color: textColor;
}

.accordion-header {
  background-color: backgroundColor;
  color: textColor;
}

.accordion-button {
  background-color: backgroundColor;
  color: textColor;
}

.accordion-button:not(.collapsed) {
  background-color: backgroundColor;
  color: textColor;
}

.accordion-button:focus {
  outline-color: focusHighlightColor;
  box-shadow: 0 0 0 0.25rem focusHighlightColor;
}

/* Incredibly, this is the only way to change the color of the chevron icon */
.accordion-button:after {
  background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23ffffff'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>") !important;
}

/* So that links are easier to see on the background color */
a {
  color: #007F7E;
}

/*So that code is easier to read on the background color*/
code {
  color: #A4B7C3; /* Light gray */
}

:local(.aiResponse) {
  white-space: pre-line;
}


:local(.dropZone) {
  flex: 1;
  display: flex;
  max-width: 300px;
  flex-direction: column;
  align-items: center;
  padding: 5px;
  border-width: 2px;
  border-radius: 4px;
  border-color: #eeeeee;
  border-style: dashed;
  background-color: backgroundColor;
  color: textColor;
  transition: border .24s ease-in-out;
}

:local(.dropZoneContainer) {
  display: flex;
  justify-content: center; /* Horizontally center content */
  align-items: center; /* Vertically center content */
}

:local(.createComponentButton) {
  position: fixed;
  bottom: 5px;
  right: 50px;
  scale: 125%;
  z-index: 10; /*puts the component above other bootstrap accordions*/
}

/* Mostly useful for the fixed 'floating' button, allows the user to scroll all the way to the
   bottom of the page to see it without obscuring other UI components.
 */
:local(.htmlSpacer) {
  height: 60px;
}

:local(.validation) {
  color: warningColor;
}

:local(.wrappingPre) {
  white-space: pre-wrap;
  white-space: -moz-pre-wrap; /* Mozilla, since 1999 */
}

:local(.customSwitchContainer ) {
  display: flex; /* Use flexbox for layout */
  align-items: center; /* Align items vertically in the center */
  justify-content: center; /* Horizontally center content */
}

:local( .labelLeft ) {
  margin-right: 10px;
}

:local( .labelRight ) {
  margin-left: 10px;
}

:local(.removeButton) {
  display: inline;
  padding: 0;
}

:local(.alignItemsCenter) {
  display: flex;
  align-items: center; /* This vertically centers the content */
  white-space: nowrap; /*so that characters to the right of the component name do not wrap to another line*/
}

:local(.justifyLeft) {
  display: flex;
  justify-content: flex-start;
}

:local(.justifyRight) {
  display: flex;
  justify-content: flex-end;
  align-items: flex-end;
}
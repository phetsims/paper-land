{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Paper Playground: Web Interactivity in the Real World","text":"<p>Paper Playground is an open-source project for collaboratively creating multimodal web experiences by means of mapping code to real pieces of paper and manipulating the code in your physical space. Everything runs on your machine and you can collaborate locally or using a hosting service to collaborate over projects with others in your shared space.</p> <p>While Paper Playground can support many uses, our aim is to support a community interested in bringing physical interaction as a means to collaboratively solve problems in codesigning technology.</p> <p>Get Started</p> <p>Paper Playground is based on the Paper Programs open-source project and has been extended to incorporate SceneryStack, the web development stack used by PhET Interactive Simulations as a robust 2D scene renderer and support for multimodal features.</p> <p>Paper Playground is intended to enable quick prototyping of web projects based in JavaScript through physical, spatial movement of real pieces of paper. We are developing with a particular emphasis on simplifying adding multimodal display such as audio features (like sounds and sonifications), spoken description (via Text-To-Speech), and other non-visual features that are often difficult to design and develop alongside visual elements in complex web projects. Learn more on the Multimodal Codesign page.</p>"},{"location":"#paper-playground-now-supports-microbit-and-other-microcontrollers","title":"Paper Playground Now Supports Micro:bit and Other Microcontrollers","text":"<p>Check out the Microcontroller Integration page to learn more about how you can communicate with microcontrollers over Bluetooth, expanding the already near infinite capabilities of Paper Playground to enhance the tangible possibilities. You can create a hybrid tangible interface using paper-based events (paper movement, paper size, markers, paper overlap, etc) from Paper Playground, while triggering actuators connected to your microcontroller. Or, vice versa... take in sensor signals from your microcontroller, pipe a message to Paper Playground, and trigger animations, sounds, speech, and anything else you can do on the web using Paper Playground!</p> <p>Paper Playground is open to contribution of all forms, from code to documentation to design. We welcome you to join our community and help us build a tool that supports a wide range of users in creating interactive web experiences.</p> <p>\ud83c\udf0d Join the Community \ud83c\udf0d</p>"},{"location":"#overview-of-paper-playground-components","title":"Overview of Paper Playground Components","text":"<p>Paper Playground is built around a few key components that work together seamlessly:</p> <ul> <li>Program Creation: Design and iterate on your programs with ease using abstracted program components in Creator with no or minimal JavaScript.</li> <li>Computer Vision: Our tool detects your dot-encoded paper programs using a webcam, merging the digital and physical realms.</li> <li>Execution and Display: See your code come to life on screen while you manipulate it with your hands, with outputs displayed in real-time.</li> <li>Collaboration: Shared databases enable synchronous and asynchronous collaboration, whether you\u2019re working locally or online.</li> </ul> <p> </p> Flexible configurations! A. Second monitor and B. Projector configurations. Primary display at (a) and (f). Webcam positioned at (b) and (e). Second monitor at (c). Projector mounted at (d). A projection surface (a curtain in this case) at (g). <p>You\u2019ll interact with Paper Playground through three main interfaces:</p> <ol> <li>Camera: Detects your paper programs using an attached camera device.</li> <li>Creator: A low-code interface where you design your programs, step by step.</li> <li>Interactive Display: Shows the results of your programs, which can be interacted with virtually or projected.</li> </ol> <p></p> <p>Get Started</p> <p> </p> Papercraft submarine controlling a virtual submarine!"},{"location":"#license","title":"License","text":"<p>This software is covered under the MIT License.</p> <p>Note</p> <p>This project retains the features of Paper Programs. Refer to Paper Programs documentation regarding legacy features (including writing code for output to Projector.html).</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at phethelp@colorado.edu. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to paper-land and Paper Playground","text":"<p> This document is incomplete and will be continually updated </p> <p>First of all, thank you for checking out our project and considering contributing.</p> <p>We welcome any contributions to the project, including:</p>"},{"location":"CONTRIBUTING/#example-programs","title":"Example Programs","text":"<ul> <li>Please share any Programs you create that you would like to share! Add a new post to the Show and Tell section of the paper-land Discussion forum with your code and any additional information to make use of it. </li> <li>We may include your examples in the hard-coded example sets to share with more users.</li> </ul>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Contributions do not have to be code. We welcome any updates to documentation that will help others get more use out of Paper Playground. This includes, but is not limited to:</p> <ul> <li>Creator Tutorial updates</li> <li>Implementation and API documentation</li> <li>Example and use-case documentation or video demonstration</li> <li>Updates or fixes to the landing page (localhost:3000)</li> <li>Updates to the documentation structure/website</li> </ul> <p>Translations are also welcome, but the project is currently under heavy development and they may become stale quickly.</p> <p>To make any contributions, please open an issue if one does not exist and then open a pull request with your changes.</p>"},{"location":"CONTRIBUTING/#features-or-bug-fixes-to-the-tool","title":"Features or bug fixes to the tool","text":"<ul> <li>See WISHLIST.md </li> <li>Search open issues by the wishlist label or good first issue label</li> <li> <p>Open an issue or discuss with us what you'd like to work on!</p> </li> <li> <p>Please create an issue if one does not exist. </p> </li> <li>Fork the project and make any changes.</li> <li>Run any tests including lint before opening a pull request</li> <li>Open a pull request</li> </ul> <p>After the feature has been added, please consider opening a pull request to change WISHLIST.md to remove the completed item!</p> <p>To make any contributions not otherwise listed, please open an issue if one does not exist or open up the idea on the Discussion forum.</p>"},{"location":"WISHLIST/","title":"Features Wishlist","text":"<p>Below are a few general ideas or features that have been identified to improve Paper Playground. Also, see the GitHub repo issue list with the <code>wishlist</code> label (as well as other issues) for possible places for contribution.</p>"},{"location":"WISHLIST/#documentation","title":"Documentation","text":"<ul> <li>Thorough API documentation for PhET libraries</li> <li>More examples, both written and in video format, of paper programs and complete projects.</li> </ul>"},{"location":"WISHLIST/#code-abstraction-into-creator","title":"Code Abstraction into Creator","text":"<ul> <li>Additional abstraction for components in Creator, e.g.,</li> <li>Physics system</li> <li>More animation features</li> <li>Vibration</li> <li>Bluetooth devices</li> <li>...</li> </ul>"},{"location":"WISHLIST/#program-detection-opencv","title":"Program Detection (OpenCV)","text":"<ul> <li>Additional dot colors (increase max program number per database)</li> <li>Custom dot colors</li> <li>Marker colors and shapes independent of dot colors</li> <li>Improve base performance</li> <li>Automatic calibration</li> <li>Optional Alternatives for detection:</li> <li>Aruco Markers [beholder](  https://github.com/project-beholder/beholder-detection)</li> </ul>"},{"location":"WISHLIST/#virtual-preview-program-features","title":"Virtual \"Preview\" Program Features","text":"<ul> <li>Reference marks on virtual papers in Camera overlay that make it easier to line them up relative to each other</li> <li>Whiskers drawn on Camera overlay</li> <li>Making the virtual paper manipulation embodied by harnessing computer vision hand tracking/gesture support (e.g., MediaPipe).</li> </ul>"},{"location":"WISHLIST/#camera-control","title":"Camera Control","text":"<ul> <li>Some efforts have been made in https://github.com/phetsims/paper-land/issues/56, but have not been stabilized.</li> <li>Exposure control (Automatic Exposure Adjustment)</li> <li>White Balance control (Automatic White Balance Adjustment)</li> <li>Focus control (automatic focus adjustment)</li> </ul>"},{"location":"WISHLIST/#interface-and-database-interaction","title":"Interface and Database Interaction","text":"<ul> <li>Local storage option to replace PostGreSQL database for program storage and execution. </li> </ul>"},{"location":"ai-ethics/","title":"AI Ethics for the Paper Playground Community","text":"<p>Hello, Paper Playground enthusiasts! We're a community passionate about embedding ethical principles in the AI technologies we leverage. As an open-source collective, we're using Large Language Models (LLM) in our endeavors. We see the immense value in nurturing trust, transparency, and accountability. This page maps out our community's guiding principles and tips for harnessing AI responsibly.</p>"},{"location":"ai-ethics/#transparency-and-explainability","title":"Transparency and Explainability","text":"<p>Transparency and explainability are close to our hearts. We aim to offer clear, user-friendly documentation that helps everyone understand the LLM we're using, its limitations, and any potential biases it might have. We're journeying together to ensure the sources of information the LLM relies on are as transparent as possible. Your thoughts, concerns, and ideas about how this AI operates are always welcome!</p>"},{"location":"ai-ethics/#privacy-and-data-protection","title":"Privacy and Data Protection","text":"<p>Your data's sanctity and privacy are paramount. We're not just an open community but also steadfast guardians of best data protection practices, ensuring alignment with prevailing privacy norms. As we use the LLM, rest assured we're transparent about data handling, storage, and usage.</p>"},{"location":"ai-ethics/#fairness-and-bias-mitigation","title":"Fairness and Bias Mitigation","text":"<p>We champion fairness and aim to eliminate biases. AI can sometimes unintentionally reflect biases present in training data. Together, we're committed to learning and iterating to ensure the LLM we use respects and serves every individual, no matter their background.</p>"},{"location":"ai-ethics/#accountability-and-human-touch","title":"Accountability and Human Touch","text":"<p>LLMs are powerful, yet they thrive with a human touch. While AI can offer insights, human interpretation remains essential. We urge members to apply a mix of the LLM's outputs and their judgment. Noticed something off? Your feedback is our goldmine to refine and better the way we harness AI.</p>"},{"location":"ai-ethics/#responsible-use-and-societal-impact","title":"Responsible Use and Societal Impact","text":"<p>Let's be stewards of ethical AI use. Ensure that we employ the LLM in a manner that aligns with the highest standards. Kindly avoid uses that might propagate misinformation, infringe on rights, or detriment societal harmony.</p>"},{"location":"ai-ethics/#continuous-improvement-and-collaborative-vibes","title":"Continuous Improvement and Collaborative Vibes","text":"<p>Community is our cornerstone! We believe that our collective insights can better our AI journey. Engage in discussions, share insights, and learn alongside peers. Contributions, ideas, and constructive critiques are invaluable as we aim for shared growth.</p> <p>Thoughts, questions, or just a chat about AI ethics? Hop over to our GitHub repository. We genuinely value every voice, and we're always eager to engage and understand feedback.</p> <p>By embracing these AI ethics principles, we aspire to foster trust and fairness as we navigate the realm of AI. Ethics isn't static, especially in the dynamic landscape of AI, and we're devoted to staying informed and evolving. Together, let's unlock the AI potential ethically, keeping everyone's best interests in sight.</p>"},{"location":"community/","title":"Paper Playground Community","text":""},{"location":"community/#join-us","title":"Join us!","text":"<ul> <li>Make a post in the Discussions tab</li> <li>Join us on our Matrix Space</li> <li>Contribute to the project (code, ideas, documentation, paper program examples, anything!)</li> </ul> <ul> <li>Have a great idea for how you or your community might connect to Paper Playground? Reach out to brett dot fiedler at colorado dot edu to discuss opportunities!</li> </ul> <p>We are planning to hold public design meetings in the future. Stay tuned!</p>"},{"location":"community/#contributors","title":"Contributors","text":"<p>Paper Playground was initially developed through the design and development efforts of:</p> <ul> <li>JP Posma and the Paper Programs project.</li> <li>The Inclusive Design Team at PhET Interactive Simulations (Ashton Morris, Brett Fiedler, Emily Moore, Jesse Greenberg, John Blanco, Matthew Moore, Taliesin Smith)</li> <li>The CU Craft Lab (Ann Eisenberg)</li> </ul> <p>It has been expanded and improved thanks to the efforts of this list of wonderful people:</p> <ul> <li>There's no one here yet! Join us and add your name to this list!</li> </ul>"},{"location":"media-gallery/","title":"Videos and Images of Paper Playground in Action","text":""},{"location":"media-gallery/#videos","title":"Videos","text":""},{"location":"media-gallery/#pixel-garden","title":"Pixel Garden","text":""},{"location":"media-gallery/#paper-playground-meets-weavly","title":"Paper Playground meets Weavly","text":""},{"location":"media-gallery/#example-using-paper-markers","title":"Example using paper Markers","text":""},{"location":"media-gallery/#audio-pendulum-demo","title":"Audio Pendulum Demo","text":""},{"location":"media-gallery/#pictures","title":"Pictures","text":""},{"location":"projects/codesign/","title":"Paper Playground as a Tool for Multimodal Interactive Codesign","text":"<p>The power of Paper Playground, augmented with Creator code abstraction and Scenery-based Display, lies in its ability to combine the physicality of paper and moving real objects, with the scalable affordances of native web technologies to introduce sounds, speech, device communication, and more. Paper Playground lets us quickly prototype interactive and multimodal experiences, which is especially helpful for working with others to iterate quickly on ideas that will go on to become full web experiences (games, simulations, etc).</p>"},{"location":"projects/codesign/#but-why-use-paper-playground-to-prototype-a-web-project","title":"But why use Paper Playground to prototype a web project?","text":""},{"location":"projects/codesign/#multimodal-design-is-hard","title":"Multimodal Design is Hard","text":"<p>Multimodal design, incorporating visuals, sounds/sonifications, and speech (including spoken descriptions for accessible projects), is the ideal goal of any web experience. Visual design is hard. Multimodal design is harder. Multimodal codesign is even harder. Working with others, helping them to understand the relationships between the interactive objects in your project, while finding the right mapping between how someone interacts and the sounds, speech, or visuals that play/change is a constant challenge for any designer.</p> <p>We also emphasize that multimodal design should be done at the start and throughout the process and not after the visual design has already completed.</p>"},{"location":"projects/codesign/#where-are-the-multimodal-design-tools","title":"Where are the multimodal design tools?","text":"<p>Tools for visual web design prototypes and interaction design exist on every corner of the web (Figma, Canva, etc.). However, there is no tool to help with multimodal design. </p> <p>A goal of Paper Playground is to explore the capabilities of a tool that can help highlight the relationships between model (data/logic) components, the interactions that change them, and the ways that (visual/auditory) feedback are provided.</p>"},{"location":"projects/codesign/#get-out-of-the-screen","title":"Get out of the screen","text":"<p>We know that collaboration in the real world is best supported when users can make use of the space around them and use their bodies to gesture and enact their ideas. Codesign practices often make use of paper or craft lo-fi prototyping at the initial stages of an idea. But, as previously emphasized, sound and speech design should begin as early as possible! So, why not make it easy to augment lo-fi prototypes with those auditory (and more!) features that are afforded easily by virtual interfaces?</p> <p></p>"},{"location":"projects/codesign/#follow-our-research","title":"Follow our research","text":"<p>Follow our research by checking out our Open Science Framework repository</p> <p>Check out our 2024 paper at the Interaction Design for Children conference that explores using Paper Playground as a design probe for understanding the needs and desires for a remote multimodal co-design tool as identified by young developers!</p>"},{"location":"projects/codesign/#attributions","title":"Attributions","text":"<p>This project was developed with the Craft Tech Lab and PhET Interactive Simulations at University of Colorado, Boulder.</p> <p>Info</p> <p>This material is based upon work supported by the National Science Foundation under Award #2119303.</p>"},{"location":"projects/craft/","title":"Mixing Paper Crafting with Paper Playground","text":"<p>Paper Playground provides a novel way to integrate craft with STEM exploration. The paper programs can be incorporated into paper sculpture \u2014 or other craft-based objects \u2014 enabling students to personalize their learning experiences. In addition to building paper controllers (such as the RGB sliders pictured above), students might also create an entire scene or narrative around STEM concepts. This type of tangible interface links the playful affordances of paper with computational elements.</p> <p>CU Craft Tech Paper Playground page</p> <p></p> <p>Learn more at the CU Craft Tech Paper Playground page.</p> <p>The Paper Playground demo projects using paper crafting are included with Paper Playground by default in Creator when using local storage (see <code>root/server/data/default-data</code>). Find the templates used in the demos at the CU Craft Tech website.</p> <p></p>"},{"location":"projects/microcontroller/","title":"Microcontroller Integration with Paper Playground over Bluetooth","text":""},{"location":"projects/microcontroller/#paper-meets-circuits","title":"Paper meets circuits","text":"<p>You can now communicate with microcontrollers over bluetooth! This expands the already near infinite capabilities of Paper Playground to enhance the tangible possibilities.</p> <p>You can create a hybrid tangible interface using paper-based events (paper movement, paper size, markers, paper overlap, etc) from Paper Playground, while triggering actuators connected to your microcontroller. Or, vice versa... take in sensor signals from your microcontroller, pipe a message to Paper Plaground, and trigger animations, sounds, speech, and anything else you can do on the web using Paper Playground!</p> <p>We currently have the most support for the BBC micro:bit, but there are bluetooth service UUIDs available for more generic microcontrollers with bluetooth capabilities.</p>"},{"location":"projects/microcontroller/#getting-started","title":"Getting Started","text":"<p>To get started, create a <code>controller</code> component in Creator and select the \"Bluetooth\" tab. Select the bluetooth service you want to use, and then the characteristic of that service. For example, if you want to write a string to the micro:bit, select the UART service, and the RX characteristic (which is the \"read\" service on the micro:bit).</p> <p>You will find demo projects using the micro:bit installed by default in Paper Playground in the Creator interface (or look in the directory <code>root/server/data/default-data</code>).</p> <p>Warning</p> <p>You will need a good understanding of the code editor, specifications, and constraints of the microcontroller you are using! For example, when using micro:bit and MakeCode, you will find that you cannot sent rapid messages over UART if you are asking the micro:bit to change its LED Matrix every time new data is received.</p>"},{"location":"projects/microcontroller/#walkthroughs","title":"Walkthroughs","text":"<p>For a complete walkthrough using the micro:bit microcontroller, check out this Instructable or this Hackster.io project.</p> <p>Simple Micro:bit Instructable</p> <p>Hackster.io project</p> <p>This Instructable will show you how to create a random spinner dial using a 180-servo, micro:bit, and a Paper Playground program. [This particular example does not require a webcam and printer].</p> <p>Micro:bit Servo Instructable</p> <p>Create a musical instrument using a micro:bit and Paper Playground. This Instructable will show you how to create a note sequencer using a micro:bit and Paper Playground.</p> <p>Micro:bit Note Sequencer Instructable</p> <p></p>"},{"location":"projects/microcontroller/#implementation-notes-and-tips","title":"Implementation Notes and Tips","text":"<ul> <li>If you're using a BBC micro:bit, then make sure to look at its Bluetooth Specifications to understand the structure of the data you are trying to send from or to Paper Playground.</li> </ul>"},{"location":"projects/scenerystack/","title":"Scenerystack","text":"<p>{placeholder}</p>"},{"location":"setup/creator/","title":"Creator Tutorial","text":""},{"location":"setup/creator/#what-is-creator","title":"What is Creator?","text":"<p>In Development</p> <p>The Creator interface is in development! The current feature set is evolving and documentation may be out of date. Follow the development in GitHub or our community channels!</p> <p>Creator is where you will add code to your paper programs before printing and playing with them in the Camera! The primary vision of Creator is to bring the relationships between the components of your project to the forefront, with significantly less code than using pure JavaScript. The goal is to let you focus on the most important pieces and how they connect to your chosen interactions and outputs (sounds, speech, images, etc). Making programs in Creator is organized around the Model-View-Controller (MVC) software design pattern.</p>"},{"location":"setup/creator/#what-is-mvc","title":"What is MVC?","text":"<p>MVC stands for Model-View-Controller, a design pattern that divides your program into three interconnected components:</p> <ul> <li>Model: This is the heart of your application, managing the data and logic. Think of it as the brain that knows everything but doesn't show anything.</li> <li>View: The View is all about presentation and user interface. It takes information from the Model and displays it in a way that you can understand and interact with.</li> <li>Controller: Acting as a bridge between you and the system, the Controller interprets user inputs and interactions, then decides what to do with them.</li> </ul> <p>This separation makes it easier to manage complex interactions, especially when changes in one area need to reflect in others.</p> <p>In Creator you will create programs: Just like laying out papers on a desk, you can create, organize, and iterate on your programs within the Creator interface. Each program is like a piece of paper that you can move, collapse, or duplicate. Here you'll add components to your programs:</p> <ul> <li>Model Components: These are the building blocks of your application's logic and data. You'll define what each component does, how it interacts with others, and how it should be controlled.</li> <li>View Components: Decide how your application will present data and respond to user interactions. This could be through visuals, sounds, or even speech.</li> <li>Controller Components: These components are all about action. They determine how user inputs modify the Model or trigger changes in the View.</li> </ul>"},{"location":"setup/creator/#linking-to-the-camera-interface","title":"Linking to the Camera Interface","text":"<p>Hide/Show dependency connections</p> <p></p> <p>Once your program is set up, you can link it to the Camera interface by pressing the \"Send to Playground\" button at the top right of the LEFT PANE. Head over to Camera and interact with your programs as physical papers. Move them around, and see how they come to life, then come back to Creator to make changes!</p>"},{"location":"setup/creator/#visualizing-relationships","title":"Visualizing Relationships","text":"<p>To keep track of how everything is connected, dependencies - components that rely on each other - are connected with colorful, dashed arrows. This, optional, visual cue helps you quickly anticipate how changes in one component might affect another or note missing pieces of your programs. They are broken into several categories depending on the components connected together.</p>"},{"location":"setup/creator/#example-creator-project-audio-pendulum","title":"Example Creator Project: Audio Pendulum","text":"<p>We can illustrate the way programs are created, taking the 'Audio Pendulum' project as an example. Audio Pendulum is a simple interactive portraying a pendulum bob exhibiting periodic motion around an anchor, emitting a soft tone at its lowest point.</p> <p>The project utilizes several Model components: 'bobPosition' and 'anchorPosition' track the pendulum and anchor, 'period' defines the motion's frequency, and 'length' measures the distance from the bob to the anchor.</p> <p>These components can be integrated into various programs. The project is designed to let users place the anchor and adjust the bob's position interactively. This setup requires two separate programs: one to map the anchor's position to a paper location, and another to set the bob's length based on its distance from another paper.</p> <p>Controller components 'bobController' and 'anchorPositionController' are used to animate the bob and set the anchor's position, respectively. Additionally, View components create the visual (like circles for the bob and anchor using shape components) and auditory elements (a 'bobSound' function calculates timing of the tone trigger based on the bob's swing position).</p> <p>Watch the steps to create Audio Pendulum and the project in action in these videos:</p> Audio Pendulum - Creator Walkthrough <p> </p> Audio Pendulum - Demo Video <p> </p>"},{"location":"setup/creator/#adding-model-view-and-controller-components-to-your-programs","title":"Adding Model, View, and Controller Components to your Programs","text":"<p>To add a component to your program, first create a program using the \"New Empty Program\" button. Then, on the new paper program, select the \"New Component\" button.</p> <p></p>"},{"location":"setup/creator/#component-details","title":"Component Details","text":"Model Components <ul> <li> <p>Boolean</p> <ul> <li>Description: Represents a property that holds a boolean value (<code>true</code> or <code>false</code>).</li> <li>Usage: Used to track state that has two states, such as a toggle button being on or off.</li> </ul> JS Example <pre><code>const isVisible = new phet.axon.BooleanProperty(true);\nphet.paperLand.addModelComponent('isVisible', isVisible);\n</code></pre> </li> <li> <p>Number</p> <ul> <li>Description: Holds a numerical value within a specified range.</li> <li>Usage: Useful for representing quantities, scores, or any numerical parameter that needs to be constrained within a minimum and maximum value.</li> </ul> JS Example <pre><code>const score = new phet.axon.NumberProperty(0, {\nrange: new phet.dot.Range(0, 100)\n});\nphet.paperLand.addModelComponent('score', score);\n</code></pre> </li> <li> <p>String</p> <ul> <li>Description: Stores a string value.</li> <li>Usage: Ideal for text-based data, such as user input or dynamic text content within the application.</li> </ul> JS Example <pre><code>const userName = new phet.axon.StringProperty('Anonymous');\nphet.paperLand.addModelComponent('userName', userName);\n</code></pre> </li> <li> <p>Position (Vector2)</p> <ul> <li>Description: Represents a two-dimensional vector.</li> <li>Usage: Useful for tracking positions, velocities, or any other two-dimensional vector quantities in simulations.</li> </ul> JS Example <pre><code>const position = new phet.dot.Vector2Property(new phet.dot.Vector2(0, 0));\nphet.paperLand.addModelComponent('position', position);\n</code></pre> </li> <li> <p>Enumeration</p> <ul> <li>Description: Used for properties that can take on a set of predefined values.</li> <li>Usage: Ideal for states, modes, or any other property that should be limited to a specific set of values.</li> </ul> JS Example <pre><code>const colorMode = new phet.axon.StringProperty('dark', {\nvalidValues: ['dark', 'light']\n});\nphet.paperLand.addModelComponent('colorMode', colorMode);\n</code></pre> </li> <li> <p>Derived</p> <ul> <li>Description: A property that is derived from one or more other properties. The value of a DerivedProperty is computed based on the values of these dependencies.</li> <li>Usage: Useful for properties that should automatically update when their dependencies change.</li> </ul> JS Example <pre><code>const totalScore = new phet.axon.Property(null);\nphet.paperLand.addModelPropertyMultilink(['score', 'bonus'], (score, bonus) =&gt; {\ntotalScore.value = score + bonus;\n});\nphet.paperLand.addModelComponent('totalScore', totalScore);\n</code></pre> </li> <li> <p>Bounds</p> <ul> <li>Description: Represents a rectangular boundary, defined by minimum and maximum points in 2D space.</li> <li>Usage: Useful for defining areas within a simulation, such as the boundaries of a playing field or the viewable area of a screen.</li> </ul> JS Example <pre><code>const viewBounds = new phet.axon.Property(\nnew phet.dot.Bounds2(0, 0, 800, 600)\n);\nphet.paperLand.addModelComponent('viewBounds', viewBounds);\n</code></pre> </li> <li> <p>Array</p> <ul> <li>Description: An array that notifies observers when items are added or removed, or when the array is otherwise modified.</li> <li>Usage: Ideal for managing collections of items where changes to the collection need to be tracked.</li> </ul> JS Example <pre><code>const items = new phet.axon.Property([]);\nphet.paperLand.addModelComponent('items', items);\n</code></pre> </li> <li> <p>Array Item</p> <ul> <li>Description: Represents an item within an observable array, with logic for adding, updating, and removing items based on dependencies.</li> <li>Usage: Useful for complex arrays where items depend on other model components and where item lifecycle management is required.</li> </ul> </li> </ul> <p></p> View Components <ul> <li> <p>Sounds</p> <ul> <li>Description: Manages and plays audio clips, with options for looping, playback rate, and output level.</li> <li>Usage: This component is used to add sound effects to the application, enhancing user interaction through auditory feedback.</li> </ul> JS Example <pre><code>const clickSoundClip = new phet.tambo.SoundClip(clickSoundWrappedAudioBuffer, {\n  loop: false,\n  initialOutputLevel: 0.5\n});\nphet.tambo.soundManager.addSoundGenerator(clickSoundClip);\n</code></pre> </li> <li> <p>Description/Speech</p> <ul> <li>Description: Provides a mechanism to programmatically generate and speak textual descriptions, improving accessibility.</li> <li>Usage: Useful for applications that need to support screen readers, providing dynamic descriptions of the current state or changes within the application.</li> </ul> JS Example <pre><code>phet.paperLand.addModelPropertyMultilink(dependencies, () =&gt; {\n  const description = \"The current score is now 10.\";\n  // Logic to speak the description\n});\n</code></pre> </li> <li> <p>Text</p> <ul> <li>Description: Displays text within the application, with support for rich formatting.</li> <li>Usage: Ideal for showing dynamic text content such as scores, instructions, or any information that changes over time.</li> </ul> JS Example <pre><code>const scoreText = new phet.scenery.RichText('Score: 0', { fill: 'white' });\nsharedData.scene.addChild(scoreText);\n</code></pre> </li> <li> <p>Background</p> <ul> <li>Description: Creates a background rectangle, potentially dynamic based on application state.</li> <li>Usage: Used to set the background color or image of a scene or a specific area within the application.</li> </ul> JS Example <pre><code>const backgroundRectangle = new phet.scenery.Rectangle(0, 0, width, height, {\n  fill: 'blue'\n});\nsharedData.scene.addChild(backgroundRectangle);\n</code></pre> </li> <li> <p>Images/Sprites</p> <ul> <li>Description: Displays an image, with support for dynamic changes based on the application's state.</li> <li>Usage: Useful for showing icons, backgrounds, or any other static or dynamic imagery.</li> </ul> JS Example <pre><code>let imageElement = document.createElement('img');\nimageElement.src = 'media/images/logo.png';\nconst logoImage = new phet.scenery.Image(imageElement);\nsharedData.scene.addChild(logoImage);\n</code></pre> </li> <li> <p>Shapes</p> <ul> <li>Description: Draws and manages vector shapes, with properties for fill, stroke, scaling, and rotation.</li> <li>Usage: Ideal for drawing custom geometric shapes or illustrations that are responsive to the application's state.</li> </ul> JS Example <pre><code>const customShape = new kite.Shape()\n  .moveTo(0, 0)\n  .lineTo(100, 0)\n  .lineTo(50, 100)\n  .close();\nconst customPath = new phet.scenery.Path(customShape, {\n  fill: 'red',\n  stroke: 'black',\n  lineWidth: 3\n});\nsharedData.scene.addChild(customPath);\n</code></pre> </li> </ul> <p></p> <p>Adding Images and Sounds</p> <p>Adding your own images (.jpg, .png, .gif, etc.) and sounds (.wav, .mp3, etc.) can be done right in Creator! Add a View Component, select Image or Sound, and drag/drop your file or select the upload box to open a file dialog.</p> <p>Once uploaded, files are stored in the paper-land directory under <code>.../www/media/images/upload</code> or <code>.../www/media/sound/upload</code>. You can also directly add files to this directory for bulk upload. </p> <p>The files will now appear in the dropdown selection for those components!</p> <p>Remember, if you reinstall Paper Playground, your uploads will not be there. Back up your Uploads folder if they are crucial to your projects!</p> Controller Components <p>Tip</p> <p>For advanced users or when using Custom Code, see the paperLand API for all paper events.</p> <ul> <li> <p>Paper Position</p> <ul> <li>Description: This component tracks and responds to changes in the physical position of a piece of paper within the camera's view. It's useful for applications where the physical location of the paper triggers digital events or actions.</li> <li>Usage: Implement this component to update the digital model or view based on the paper's movement. For example, moving a paper piece could change the position of a digital object on the screen.</li> </ul> JS Example <pre><code>const onProgramChangedPosition = (paperProgramNumber, paperPoints, scratchpad, sharedData) =&gt; {\nconst newPosition = phet.paperLand.utils.calculateCenter(paperPoints);\nphet.paperLand.console.log(`Paper moved to new position: x=${newPosition.x}, y=${newPosition.y}`);\n// Update a model component to reflect this new position\nconst modelPosition = phet.paperLand.getModelComponent('modelPosition');\nif (modelPosition) {\nmodelPosition.set(newPosition);\n}\n};\n</code></pre> </li> <li> <p>Paper Rotation</p> <ul> <li>Description: Monitors the rotation of a paper piece detected by the camera and applies corresponding updates to the digital model or view. This can be used to simulate rotational dynamics or to control aspects of the application by rotating paper.</li> <li>Usage: Use this controller to create interactions based on the paper's orientation. For example, rotating the paper could adjust the rotation of a digital object or change its state.</li> </ul> JS Example <pre><code>const onProgramChangedPosition = (paperProgramNumber, paperPoints, scratchpad, sharedData) =&gt; {\nconst rotation = phet.paperLand.utils.getNormalizedProgramRotation(paperPoints);\nphet.paperLand.console.log(`Paper rotated to a normalized value of: ${rotation}`);\n// Adjust a model component based on paper rotation\nconst modelRotation = phet.paperLand.getModelComponent('modelRotation');\nif (modelRotation) {\nmodelRotation.set(rotation * 360); // Assuming modelRotation expects degrees\n}\n};\n</code></pre> </li> <li> <p>Markers (large dots)</p> <ul> <li>Description: Reacts to the addition, removal, or movement of markers on the paper. Markers can be used as input devices, allowing users to interact with the digital environment by placing or moving markers on the paper.</li> <li> <p>Usage: Implement interactions where markers control digital elements, such as moving a marker to navigate a character or change settings.</p> JS Example <pre><code>const onProgramMarkersAdded = (paperProgramNumber, scratchpad, sharedData, markersOnProgram) =&gt; {\nphet.paperLand.console.log(`Marker added. Total markers on program: ${markersOnProgram.length}`);\n// Example: Adjust game character position based on marker\nif (markersOnProgram.length &gt; 0) {\nconst characterPosition = phet.paperLand.getModelComponent('characterPosition');\nif (characterPosition) {\nconst markerPosition = markersOnProgram[0].positionOnPaper; // Assuming first marker controls character\ncharacterPosition.set(markerPosition);\n}\n}\n};\n</code></pre> </li> </ul> </li> <li> <p>Whiskers (Proximity)</p> <ul> <li>Description: Utilizes \"whiskers,\" or virtual lines extending from the paper, to detect adjacency to other pieces of paper. This can be used for interactions where papers need to recognize their neighbors to perform combined actions or updates.</li> <li> <p>Usage: Use this component for applications requiring collaboration or interaction between multiple physical papers, such as combining resources in a game or merging data from different papers.</p> JS Example <pre><code>const onProgramAdjacent = (paperProgramNumber, otherPaperNumber, direction, scratchpad, sharedData) =&gt; {\nphet.paperLand.console.log(`${otherPaperNumber} is adjacent to ${paperProgramNumber} on the ${direction}`);\n// Example: Combine data from adjacent papers\nconst dataFromThisPaper = phet.paperLand.getProgramData(paperProgramNumber, 'dataName');\nconst dataFromOtherPaper = phet.paperLand.getProgramData(otherPaperNumber, 'dataName');\n// Logic to combine data and update model accordingly\n};\n</code></pre> </li> </ul> </li> <li> <p>Animations</p> <ul> <li>Description: This component is designed to update the model or view based on time or frame-based animations. It listens for elapsed time changes and performs actions accordingly, making it essential for creating dynamic, animated behaviors in the application.</li> <li>Usage: Use this component to animate properties over time, such as moving an object across the screen, changing colors, or any time-dependent transformation.</li> </ul> JS Example <pre><code>const moveObjectAnimationListener = dt =&gt; {\nif (phet.paperLand.hasAllModelComponents(['position'])) {\nconst elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n// Assuming a position model component exists and is a Vector2Property\nconst position = phet.paperLand.getModelComponent('position');\nposition.value = position.value.plus(new phet.dot.Vector2(dt * 10, 0)); // Move 10 units per second to the right\n}\n};\nphet.axon.stepTimer.addListener(moveObjectAnimationListener);\n</code></pre> </li> <li> <p>Link (Multilink Listener)</p> <ul> <li>Description: Listens for changes in multiple model properties (dependencies) and updates other model components based on those changes. It's particularly useful for coordinating complex interactions between different parts of the model, where the change in one or more properties should trigger updates elsewhere.</li> <li>Usage: Ideal for scenarios where multiple model states need to be considered before making an update, such as enabling a button only when specific conditions are met or updating a calculation based on several inputs.</li> </ul> </li> </ul> JS Example <p>```js scratchpad.customUpdateMultilinkId = phet.paperLand.addModelPropertyMultilink(['input1', 'input2'], (input1, input2) =&gt; { if (phet.paperLand.hasAllModelComponents(['output'])) { const output = phet.paperLand.getModelComponent('output'); // Example: updating the output based on the sum of input1 and input2 output.value = input1 + input2; } });</p> <p></p>"},{"location":"setup/creator/#component-control-functions-customizing-component-output","title":"Component Control Functions - Customizing Component Output","text":"<p>Sometimes you want to add more complex behavior to a component. Perhaps you want to say \"if my position component is inside my bounds component, then I want my sound to get louder!\". Ideas like this, and many others that require more complex control structures (case structures like if/else, loops like for loops, etc), are difficult to abstract and not always very difficult to write a simple JavaScript function to accomplish.</p> <p>This is where Control Functions come in! You will add the connections to other components you will need in your function output - any component you need information from or would like to control - and write some code that will output from this component.</p> <p>If you're unfamiliar with JavaScript, this does not need to be scary! In fact, even seemingly complex output from the component can be done with just a couple of lines of code. Additionally, many functions for the component are simplified and included in the documentation right above the Control Function code box.</p> <p>Some components - such as the Link and Animation Controller components, require the use of Control Functions because of the many ways they can be used.</p>"},{"location":"setup/creator/#adding-connections-component-dependencies","title":"Adding Connections (component dependencies)","text":"<p>Start by selecting the \"Add Connection\" button, from which you'll select the Model components you need information from</p> <p>Model Driven Programming</p> <p>Remember: Paper Playground, using the MVC framework, is Model driven! That means that when the value of a Model Component changes, that drives changes in other Components.</p> <p>If one Component is dependent on any given Model Component, then it will update/trigger when the Model Component changes. If you expect changes in, e.g., your Sound View Component, then make sure it is connected to the correct Model Component or if it needs a new Model Component to trigger it when you expect.</p> Control Function Menu Screenshot <p> </p>"},{"location":"setup/creator/#dependency-or-reference","title":"Dependency or Reference?","text":"<p>By default, when any Connected Component updates, it will trigger the downstream Component to update. That means, if Model <code>biggestNumber</code> is marked as a Connection (dependency) of View <code>biggestNumberImage</code>, and <code>biggestNumber</code> is controlled by Controller <code>biggestNumberPaperController</code>, then <code>biggestNumberImage</code> will update whenever <code>biggestNumber</code> changes, which in turn is updated whenever <code>biggestNumberPaperController</code> changes. The relationship is then <code>biggestNumberPaperController</code> (Controller) -&gt; <code>biggestNumber</code> (Model) -&gt; <code>biggestNumberImage</code> (View).</p> <p>If you only want to use the value of a Model Component (e.g., <code>biggestNumber</code>), but do not want the downstream component (e.g., <code>biggestNumberImage</code>) to update each time the Model Component changes, then switch the Connected Component from \"Dependency\" to \"Reference\" using the toggle in the Control Function menu after adding the Connection.</p>"},{"location":"setup/creator/#controlled-dependencies-controller-component-only","title":"Controlled Dependencies (Controller Component only)","text":""},{"location":"setup/creator/#using-ai-chat-to-create-component-control-function-logic-and-output","title":"Using AI chat to create component Control Function logic and output","text":"<p>Requires OpenAI API Key</p> <p>Currently, the integrated AI assistant is based on the OpenAI Assistant API and uses <code>gpt-4-0125-preview</code> as the model. You will need to add an <code>OPENAI_API_KEY={your api key}</code> to use this feature.</p> <p>If you would like assistance in creating a Control Function for any of your components, you can use the AI Assistant menu in a View or Controller Component's Control Function menu.</p> <p>The AI has knowledge of any selected connections and the function documentation for the selected component and connections. Ask, in plain language, for your desired output of the function and it will generate an option for you. Continue the conversation and iterate on the function as desired. Make sure to review the response and make sure it makes sense in your context. Otherwise, continue iterating with the AI until you have found your solution.</p> <p>Warning</p> <p>At this time, the AI Assistant has no knowledge of Paper Playground as a whole and only serves as a JavaScript code generator for creating Control Function outputs. The AI Assistant is intended as a convenience feature. You can use other generative AI platforms for assistance generating code if you have access to them.</p> AI Assistant Menu Example <p></p>"},{"location":"setup/creator/#custom-code","title":"Custom Code","text":"<p>If there is code you wish to add, but is not captured by the existing Components in Creator, then you can select the \"Custom Code\" button on the bottom of your program. This will open a menu in the RIGHT PANE to add any JavaScript you wish to the Paper Events for your paper program. This will require more knowledge of JavaScript and the necessary definitions and disposal of any model, view, or controller code that you add. See the paperLand API for information and examples.</p> <p>Note</p> <p>Custom Code is added to the bottom of each Paper Event. If you add <code>console.log( \"Console comment!\");</code> to the <code>onProgramAdded</code> Paper Event, then it will be generated after all of the code in <code>onProgramAdded</code> for any added Components for your program.</p>"},{"location":"setup/creator/#organizing-programs","title":"Organizing Programs","text":"<p>You have many options for organizing your programs in the Creator interface.</p> <ul> <li>You can MOVE programs by dragging them in the white space of the program body.</li> <li>You can COLLAPSE programs by selecting the  Minus/Dash icon in the Top Left of a program.</li> <li>You can COPY programs (overlapping squares icon), duplicating the program with the same components (renamed with \"_Copy\"). They maintain dependencies/Connections!</li> <li>You can DELETE programs by selecting the Trashcan icon in the Top Right of the Program. </li> </ul> <p></p>"},{"location":"setup/creator/#managing-projects","title":"Managing Projects","text":"<p>As mentioned in the Tutorial, Projects exist to organize your paper programs in Creator only. Sending a project \"to the Playground\" will overwrite the active set of papers for that <code>space</code>.</p> <p>Think of Projects as your way of managing similar sets or variants of sets of paper programs. Perhaps you want to use it as version control? Maybe you want to aggregate sets of papers that have a theme? It's up to you. Just make sure you send the project you would like to play with to the Camera with Send to Playground, or you might be a bit confused when your papers do something you don't expect or nothing at all! Use the New Project button to get going.</p> <p>We recommend using the Copy Project feature whenever you are looking to start a variant of an existing project (whether it is read-only or you really just don't want to break your existing project). Note: When you create a project in the <code>space</code> you are currently in, you will need to leave the space and re-enter (or refresh the Creator page) to see it appear in the list of projects for that space.</p>"},{"location":"setup/creator/#downloading-and-loading-projects","title":"Downloading and Loading Projects","text":"<p>You can download (export) or load (import) your projects as JSON files. Find the \"Download Project\" and \"Load Project\" buttons on the upper-right of the LEFT PANE. This is a great way to do version control or make a back-up before making risky changes to your project.</p> Example JSON Output <pre><code>{\n    \"programs\": [\n        {\n            \"number\": 572,\n            \"title\": \"Anchor\",\n            \"keywords\": \"\",\n            \"description\": \"\",\n            \"expanded\": true,\n            \"topWhiskerLength\": 0.2,\n            \"rightWhiskerLength\": 0.2,\n            \"bottomWhiskerLength\": 0.2,\n            \"leftWhiskerLength\": 0.2,\n            \"positionProperty\": {\n                \"x\": 267.87279818757077,\n                \"y\": 92.6958985222822\n            },\n            \"modelContainer\": {\n                \"namedBooleanProperties\": [],\n                \"namedVector2Properties\": [\n                    {\n                        \"name\": \"anchorPosition\",\n                        \"propertyType\": \"Vector2Property\",\n                        \"defaultX\": 0,\n                        \"defaultY\": 0\n                    }\n                ],\n                \"namedNumberProperties\": [],\n                \"namedEnumerationProperties\": [],\n                \"namedDerivedProperties\": [],\n                \"namedBounds2Properties\": [],\n                \"namedObservableArrays\": [],\n                \"namedArrayItems\": [],\n                \"namedArrayItemReferences\": [],\n                \"namedStringProperties\": []\n            },\n            \"controllerContainer\": {\n                \"vector2PropertyControllers\": [\n                    {\n                        \"name\": \"anchorPositionController\",\n                        \"controlledComponentName\": \"anchorPosition\",\n                        \"controlType\": \"MATCH_CENTER\",\n                        \"controlTypeFamily\": \"\"\n                    }\n                ],\n                \"boundsPropertyControllers\": [],\n                \"booleanPropertyControllers\": [],\n                \"numberPropertyControllers\": [],\n                \"enumerationPropertyControllers\": []\n            },\n            \"viewContainer\": {\n                \"soundViews\": [],\n                \"descriptionViews\": [],\n                \"textViews\": [],\n                \"shapeViews\": [\n                    {\n                        \"name\": \"anchorCircle\",\n                        \"modelComponentNames\": [\n                            \"anchorPosition\"\n                        ],\n                        \"controlFunctionString\": \"setCenterX( anchorPosition.x );\\r\\nsetCenterY( anchorPosition.y );\",\n                        \"lazyLink\": false,\n                        \"defaultViewOptions\": {\n                            \"centerX\": null,\n                            \"centerY\": null,\n                            \"scale\": 1,\n                            \"rotation\": 0,\n                            \"opacity\": 1,\n                            \"visible\": true,\n                            \"viewUnits\": \"model\"\n                        },\n                        \"defaultShapeOptions\": {\n                            \"shapeType\": \"circle\",\n                            \"fill\": \"#007BFF\",\n                            \"stroke\": \"#001F3F\",\n                            \"lineWidth\": 1,\n                            \"rectWidth\": 100,\n                            \"rectHeight\": 50,\n                            \"circleRadius\": \"0.05\",\n                            \"ellipseRadiusX\": 100,\n                            \"ellipseRadiusY\": 50,\n                            \"lineStartX\": 0,\n                            \"lineStartY\": 0,\n                            \"lineEndX\": 100,\n                            \"lineEndY\": 100,\n                            \"triangleBaseWidth\": 100,\n                            \"triangleHeight\": 100,\n                            \"polygonPoints\": [\n                                [\n                                    0,\n                                    0\n                                ],\n                                [\n                                    100,\n                                    0\n                                ],\n                                [\n                                    100,\n                                    100\n                                ],\n                                [\n                                    0,\n                                    100\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"backgroundViews\": [],\n                \"imageViews\": []\n            },\n            \"listenerContainer\": {\n                \"linkListeners\": [],\n                \"animationListeners\": []\n            },\n            \"customCodeContainer\": {\n                \"onProgramAddedCode\": \"\",\n                \"onProgramRemovedCode\": \"\",\n                \"onProgramChangedPositionCode\": \"\",\n                \"onProgramMarkersAddedCode\": \"\",\n                \"onProgramMarkersRemovedCode\": \"\",\n                \"onProgramMarkersChangedPositionCode\": \"\",\n                \"onProgramAdjacentCode\": \"\",\n                \"onProgramSeparatedCode\": \"\"\n            }\n        },\n        {\n            \"number\": 1870,\n            \"title\": \"Bob\",\n            \"keywords\": \"\",\n            \"description\": \"\",\n            \"expanded\": true,\n            \"topWhiskerLength\": 0.2,\n            \"rightWhiskerLength\": 0.2,\n            \"bottomWhiskerLength\": 0.2,\n            \"leftWhiskerLength\": 0.2,\n            \"positionProperty\": {\n                \"x\": 278.10677402842083,\n                \"y\": 349.6368027762089\n            },\n            \"modelContainer\": {\n                \"namedBooleanProperties\": [],\n                \"namedVector2Properties\": [\n                    {\n                        \"name\": \"bobPosition\",\n                        \"propertyType\": \"Vector2Property\",\n                        \"defaultX\": 0,\n                        \"defaultY\": 0\n                    }\n                ],\n                \"namedNumberProperties\": [\n                    {\n                        \"name\": \"period\",\n                        \"propertyType\": \"NumberProperty\",\n                        \"min\": 0,\n                        \"max\": 10,\n                        \"defaultValue\": 5\n                    },\n                    {\n                        \"name\": \"length\",\n                        \"propertyType\": \"NumberProperty\",\n                        \"min\": 0,\n                        \"max\": \"1\",\n                        \"defaultValue\": \"0.3\"\n                    }\n                ],\n                \"namedEnumerationProperties\": [],\n                \"namedDerivedProperties\": [],\n                \"namedBounds2Properties\": [],\n                \"namedObservableArrays\": [],\n                \"namedArrayItems\": [],\n                \"namedArrayItemReferences\": [],\n                \"namedStringProperties\": []\n            },\n            \"controllerContainer\": {\n                \"vector2PropertyControllers\": [],\n                \"boundsPropertyControllers\": [],\n                \"booleanPropertyControllers\": [],\n                \"numberPropertyControllers\": [],\n                \"enumerationPropertyControllers\": []\n            },\n            \"viewContainer\": {\n                \"soundViews\": [\n                    {\n                        \"name\": \"bobSound\",\n                        \"modelComponentNames\": [\n                            \"anchorPosition\",\n                            \"bobPosition\",\n                            \"period\",\n                            \"length\"\n                        ],\n                        \"controlFunctionString\": \"  var lowestPoint = anchorPosition.y + length; // Calculate the lowest point\\r\\n  var range = 0.0001; // Define a small range around the lowest point\\r\\n\\r\\n  if (Math.abs(bobPosition.y - lowestPoint) &lt;= range) { // Check if bob is within the range of the lowest point\\r\\n    setPlaybackRate(1);\\r\\n    setOutputLevel(1);\\r\\n    play();\\r\\n  }\",\n                        \"lazyLink\": false,\n                        \"soundFileName\": \"c-tone.mp3\",\n                        \"loop\": false,\n                        \"autoplay\": false\n                    }\n                ],\n                \"descriptionViews\": [],\n                \"textViews\": [],\n                \"shapeViews\": [\n                    {\n                        \"name\": \"bobCircle\",\n                        \"modelComponentNames\": [\n                            \"bobPosition\"\n                        ],\n                        \"controlFunctionString\": \"setCenterX( bobPosition.x );\\r\\nsetCenterY( bobPosition.y );\",\n                        \"lazyLink\": false,\n                        \"defaultViewOptions\": {\n                            \"centerX\": null,\n                            \"centerY\": null,\n                            \"scale\": 1,\n                            \"rotation\": 0,\n                            \"opacity\": 1,\n                            \"visible\": true,\n                            \"viewUnits\": \"model\"\n                        },\n                        \"defaultShapeOptions\": {\n                            \"shapeType\": \"circle\",\n                            \"fill\": \"#007BFF\",\n                            \"stroke\": \"#001F3F\",\n                            \"lineWidth\": 1,\n                            \"rectWidth\": 100,\n                            \"rectHeight\": 50,\n                            \"circleRadius\": \"0.1\",\n                            \"ellipseRadiusX\": 100,\n                            \"ellipseRadiusY\": 50,\n                            \"lineStartX\": 0,\n                            \"lineStartY\": 0,\n                            \"lineEndX\": 100,\n                            \"lineEndY\": 100,\n                            \"triangleBaseWidth\": 100,\n                            \"triangleHeight\": 100,\n                            \"polygonPoints\": [\n                                [\n                                    0,\n                                    0\n                                ],\n                                [\n                                    100,\n                                    0\n                                ],\n                                [\n                                    100,\n                                    100\n                                ],\n                                [\n                                    0,\n                                    100\n                                ]\n                            ]\n                        }\n                    }\n                ],\n                \"backgroundViews\": [],\n                \"imageViews\": []\n            },\n            \"listenerContainer\": {\n                \"linkListeners\": [],\n                \"animationListeners\": [\n                    {\n                        \"name\": \"bobController\",\n                        \"controlledPropertyNames\": [\n                            \"anchorPosition\",\n                            \"bobPosition\",\n                            \"period\",\n                            \"length\"\n                        ],\n                        \"controlFunctionString\": \"  // Calculate the angle of the pendulum\\r\\n  const angle = Math.sin((2 * Math.PI / period) * elapsedTime);\\r\\n\\r\\n  // Calculate the new position of the bob\\r\\n  const newX = anchorPosition.x + length * Math.sin(angle);\\r\\n  const newY = anchorPosition.y + length * Math.cos(angle);\\r\\n\\r\\n  // Update the position of the bob\\r\\n  setBobPosition(new phet.dot.Vector2(newX, newY));\"\n                    }\n                ]\n            },\n            \"customCodeContainer\": {\n                \"onProgramAddedCode\": \"\",\n                \"onProgramRemovedCode\": \"\",\n                \"onProgramChangedPositionCode\": \"\",\n                \"onProgramMarkersAddedCode\": \"\",\n                \"onProgramMarkersRemovedCode\": \"\",\n                \"onProgramMarkersChangedPositionCode\": \"\",\n                \"onProgramAdjacentCode\": \"\",\n                \"onProgramSeparatedCode\": \"\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"setup/creator/#using-templates","title":"Using Templates","text":"<p>You can load in templates using the \"Create from Template\" button in the top left of the interface. These will create a paper or set of papers that are pre-populated with components to create the desired effect. Want a shape that will follow the position of your paper? Select the Movable Shape template and the required papers/components will appear, ready to be customized!</p> <p></p> <p>Note</p> <p>At this time, all imported templates are created as new programs. If you'd like to integrate them into existing programs, import the templates into your project and use them as a reference for creating new component in your existing paper programs.</p>"},{"location":"setup/creator/#creating-templates","title":"Creating Templates","text":"<p>Some templates are already included in Paper Playground. However, if you'd like to use templates for common sets of programs/components, you can create them globally for all <code>spaces</code> or on a per-<code>space</code> basis. Templates exist in their own database separately from the spaces that contain your paper programs.</p>"},{"location":"setup/creator/#creating-new-templates","title":"Creating New Templates","text":"<ol> <li>Create a new project in the space of your choice.</li> <li>Create your programs! Populate them with the necessary components to create a self-contained fully functioning (set of) program(s).</li> <li>Open the \"Edit Templates\" collapsible menu on the RIGHT PANE.</li> <li>Make sure you have \"New Template\" selected from the dropdown. Selecting an existing template will overwrite the programs in the LEFT PANE!</li> <li>Enter a name, description, and a few comma separated keywords.</li> <li>Save the Template for globally for all <code>spaces</code> or just locally in the <code>space</code> you are currently in.</li> <li>That's it! Check it's been created by using the \"Create from Template\" button.</li> </ol>"},{"location":"setup/creator/#editing-templates","title":"Editing Templates","text":"<ol> <li>Open your template from the \"Edit Templates\" collapsible menu (  this will override any program you current have in the LEFT PANE!)</li> <li>Make any changes to your programs and their components. You can also edit the Template name and description.</li> <li>Save changes!</li> </ol>"},{"location":"setup/creator/#more-walkthroughs","title":"More Walkthroughs","text":"<p>Show me more walkthroughs</p> <p>Find more demos and walkthroughs at https://www.youtube.com/@PaperPlaygroundCommunity</p>"},{"location":"setup/device-setup/","title":"How to set up your play area and devices","text":"<p>This page will guide you through setting up your devices so your computer can detect your printed paper programs and you can (optionally) project visuals onto them!</p> <p>If you're already setup, then head over the Interface Overview for a run-down of the interface and how to get started making programs!</p>"},{"location":"setup/device-setup/#interactive-display-projector-setup","title":"Interactive Display Projector Setup","text":"<p>If you are only using the paper program detection capabilities of Paper Playground and planning to use Preview papers (eye icon next to programs in the Camera interface), skip to Camera Setup.</p> <p>If you are using a projector to display visual elements in your playspace or on your paper programs, then, read on.</p>"},{"location":"setup/device-setup/#placing-the-projector","title":"Placing the projector","text":"<p>Find a place to place your projector that will let you move your paper programs easily in the projection space. Ideally, you are able to mount the projector above you, pointed toward the floor for the most natural interaction between the papers and anyone working with you. Webcam/projector configurations parallel to the floor (e.g., pointing at a wall) are possible, especially using tape, sticky tack, or magnets (in the case of e.g., a whiteboard).</p> <p>You may later find that you need to adjust the relative positions of your projector and webcam in order to get the best program detection and most space to move papers around. See Fine-tuning program detection and Webcam tips for more advice on improving program detection.</p> <p>After powering on your projector and connecting it to your computer, open the Display interface (display.html) in a separate window and move it into the projector window.</p> <p>Now it's time to setup your webcam.</p>"},{"location":"setup/device-setup/#camera-device-setup","title":"Camera Device Setup","text":""},{"location":"setup/device-setup/#playspace-configuration","title":"Playspace Configuration","text":"<p>An external USB webcam (at least 720p) is the best to use for flexibility in your paper-moving play space. Try pointing the webcam down so you can naturally move papers around without worrying about working against gravity. Webcam/projector configurations parallel to the floor (e.g., pointing at a wall) are possible, especially using tape, sticky tack, or magnets (in the case of e.g., a whiteboard).</p> <p>Many configurations are possible! The farther away the webcam from the surface you'll be moving the papers, the larger you will want your papers/dots to be. You may also notice a difference in detection accuracy with higher resolution cameras (1080p and above).</p> <p></p>"},{"location":"setup/device-setup/#opening-the-camera-interface","title":"Opening the Camera interface","text":"<p>After setting up the hardware, navigate to http://localhost:3000/camera.html for camera calibration. Grant the browser permission when prompted for camera access.</p> Webcam not detected <p>If your camera is not detected or not presented as an option under the Devices header on the Camera page sidebar, then try checking your USB connection. If you're still having problems, it may be a permissions issue from your browser. You will need to access the site settings for localhost. This varies per browser. In Chrome, you can select the icon to the left of the URL and select \"Site Settings\". From there, you can navigate to Camera permissions and change it from Ask (Default) to Allowed.</p>"},{"location":"setup/device-setup/#aligning-your-projector-to-the-video-feed","title":"Aligning your projector to the video feed","text":"<p>Project any vibrant, full-screen image. The Interactive Display interface can work, but you will have an easier time with a bright white screen (assuming a black background).</p> <p></p> <p>In the video feed, you'll notice 4 red circles at the corners: TL, TR, BR, BL. Drag these circles to align with the projection's corners. If done accurately, this synchronizes the camera and projector views so that any visuals projected on the paper will properly align based on the coordinates you define in your programs.</p> <p>Warning</p> <p>If either the camera device or projector is moved, you will need to recalibrate.</p> <p>If you need to zoom in or drag the video feed to find the red circles or to help with alignment use the following key/mouse combinations:</p> <p>Zoom In/Out: Shift+Wheel Up/Down</p> <p>Pan/Move window: Shift+Mouse Drag</p> <p>When you are ready to project, press the \"Projector Mode\" button on the Interactive Display to enlarge the display to the entire projector window. By default, the screen is black.</p>"},{"location":"setup/device-setup/#color-calibrating-your-webcam-for-program-detection","title":"Color calibrating your webcam for program detection","text":"<p>For color calibration, print one of your paper programs and position the printed page within the camera's view. Note: if using the projector, it might be easier to turn off the projector or project a black screen during this step.</p> <p></p> <p>On the camera view, circles will overlay the printed ones if they are detected. Calibrate each color (R, G, B, D) individually by selecting the color from the sidebar and then clicking its corresponding circle in the video feed. When selecting the color on the sidebar, the circle will be highlighted. The highlight will disappear when it successfully calibrates. You may need to click a few times on the circle in the video feed depending on page performance.</p> <p>Tip</p> <p>Sunlight can change rapidly, especially with passing clouds! If you can, find a room with steady, uniform illumination or recalibrate frequently.</p> <p>Post-calibration, the dot colors in the sidebar might slightly differ, reflecting the camera's adaptation to your space's lighting. If your lighting changes, recalibrate. It's important to maintain steady light conditions.</p>"},{"location":"setup/device-setup/#calibrating-for-markers","title":"Calibrating for markers","text":"<p>Calibration also sets the average dot size. This will determine how large dots need to be considered \"markers\". If you wish to use markers in your programs, the dots will need to be 3 times larger by default.</p> <p>Deciding on marker size</p> <p>You can test how big your markers need to be in the camera view by bringing your paper closer to the camera which will \"enlarge\" your dots relative to the camera view.</p>"},{"location":"setup/device-setup/#webcam-optimization-tips","title":"Webcam Optimization Tips","text":"<p>If you have control over the software of your webcam, you can optimize some parameters to help with dot/program detection. Your camera may not feature every parameter mentioned or may use different language for the same parameter.</p> <p>You are looking for dots to be stably detected and might need to iteratively switch between adjusting parameters and color calibration.</p> <p>We have found the following parameters to be most influential:</p> <ul> <li>TURN OFF any Auto setting for: Zoom, Exposure, White Balance</li> <li>Adjust Exposure to see papers clearly (not too dark or bright)</li> <li>Adjust: Zoom (clearest text)</li> <li>Adjust White Balance (make sure blacks look black, and not blue or green, vice versa)</li> <li>(optional) Adjust contrast</li> <li>(optional) Raise Sharpness if edges look fuzzy</li> </ul>"},{"location":"setup/device-setup/#fine-tuning-program-detection","title":"Fine-tuning program detection","text":"<p>If your setup is not detecting all of the dots on your papers, you will not be able to calibrate them and your programs will not be detected (or will be detected intermittently).</p> <p>You can fine-tune the requirements for detecting dots on the paper for your specific setup and lighting conditions.</p> Directly editing detection parameters <pre><code>If your version does not have these controls, then you can edit the following parameters (defaultParam) in the software directory: `client &gt; camera &gt; simpleBlobDetector.js`\n\n`thresholdStep` - big impact on performance, but also resolution of detection markers. It operates over min to maxThreshold.\n\n`minThreshold` - Not as big of an impact, but you can theoretically gate on dark background with this.\n\n`maxThreshold` - ^^ Likewise for very bright pixels.\n\n`minDistBetweenBlobs` - The number of pixels needed to call two detected centers two distinct blobs. Definitely impactful. Noisier images will benefit from this not being too small.\n\n`minArea` - big impact and arguably the one that made it possible for me to raise the camera much higher for detecting full sized programs. This is a parameter in detectPrograms.js as well. We should make sure they are both updated.\n\n`maxArea` - good for filtering out anything that is being mistreated as a marker.\n</code></pre> <p>Look under the Detection header in the sidebar of Camera.html and adjust the controls. Even with adjustments, you may need to improve the lighting of your room or find you need to print papers with larger dots (or more spaced out dots) to get reliable dot detection.</p> <p></p> <ul> <li>Average Dot Centers (checkbox): Improves performance by using an average center to determine dot position, rather than raw pixel coordinates. May decrease dot detection accuracy.</li> <li>Pixel Value Threshold: Changes the number of steps used to check for a difference between a dot and background. Large steps might miss dots without enough contrast, but will increase performance. Small steps will find more dots, but slow down performance significantly.</li> <li>Min Pixel Value: The minimum saturation value (out of 256) to look for a dot. Use this to gate out noise if image features are being detected as dots.</li> <li>Max Pixel Value: The maximum saturation value (out of 256) to look for  a dot. Use this to gate out noise if image features are being detected as dots.</li> <li>Min Dot Area (pixels): The minimum area in pixels that an image feature must be to be called a dot. Use this to gate out noise if image features are being detected as dots.</li> <li>Max Dot Area (pixels): The maximum area in pixels that an image feature must be to be called a dot. Use this to gate out noise if image features are being detected as dots. This is a good slider to use if image features are being erroneously detected as Markers.</li> <li>Min Dot Separation (pixels): The minimum numbers of pixels the algorithm expects to see dots. Lower values will help to detect smaller dots or farther away programs, at the cost of detecting more image features that may not be paper dots.</li> <li>Scale Factor: Recommended to keep at 1. Higher values lower the effective resolution of your camera feed. If you need higher performance and dot detection is not a problem/you are using a very high resolution camera, this will speed up the algorithm significantly to get more performance.</li> </ul>"},{"location":"setup/device-setup/#quick-start-running-example-programs","title":"Quick Start - Running Example Programs","text":"<ol> <li> <p>Calibrate the Camera: As described above. Go to http://localhost:3000/camera to monitor the camera view, ensuring it detects objects accurately. Calibrate and align the camera for color detection and marker detection.</p> </li> <li> <p>Navigate to Creator: Go to http://localhost:3000/creator to start working with example programs.</p> </li> <li> <p>Suggested Start: Select the example \u201ccat-fetch\u201d and click \u201cSend to Playground\u201d to launch it in the main interface.</p> </li> <li> <p>Open Interactive Display &amp; Canvas To execute your code setup, open the Interactive Display (http://localhost:3000/display.html) and Canvas (http://localhost:3000/projector.html).</p> </li> <li> <p>Separate the Camera and Display windows: Move the Camera interface and the Display interface to your secondary display (e.g., a projector or a second monitor). This will allow you to see the camera view and the program output side-by-side. You can hide Canvas.</p> </li> <li> <p>Print and Place your Papers OR Preview Programs: </p> </li> <li>Print the papers for the \"Cat,\" \"Ball,\" and \"Items\" programs. Clicking the Printer icon will download an image for you which you can then print or copy by hand on a sheet of paper. Place the papers in the camera view and play around!</li> <li>Alternatively, use the Preview Papers feature to simulate the papers. Use the 'eye' icon besides each program to execute the paper programs that script the \"Cat,\" \"Ball,\" and \"Items\". Move them around! Go back to Creator to make edits and repeat the process!</li> </ol>"},{"location":"setup/device-setup/#canvas-projector-setup","title":"Canvas Projector Setup","text":"<p>If you're using the legacy Canvas (projector.html) page to send visual elements to the web canvas, rather than the Interactive Display (display.html), you'll follow these instructions instead:</p> <p>Power on the projector and separate http://localhost:3000/projector.html to its own window. Move this window to the projector's display and enter fullscreen mode (Ctrl/Cmd+Shift+F). If you encounter issues (e.g., a recently created program not displaying), refreshing the page should help.</p>"},{"location":"setup/install/","title":"Paper Playground Installation Guide","text":"<p>This guide will walk you through setting up Paper Playground, including hardware recommendations, installation, and troubleshooting. Follow each section to ensure proper configuration.</p>"},{"location":"setup/install/#required-hardware-for-paper-detection-and-control","title":"Required Hardware for Paper Detection and Control","text":"<ol> <li>Desktop or Laptop Computer<ul> <li>Performance will increase with better computer specifications (CPU, GPU, RAM, etc.).</li> <li>All major operating systems and browsers should also work, though most testing has been done with Windows/MacOS and Chrome/Firefox.</li> </ul> </li> <li>Secondary display (e.g., monitor, projector, TV, etc.)</li> <li>Webcam<ul> <li>720p is adequate, but be cautious with cameras having low-quality sensors, as they might not perform well under all lighting conditions.</li> <li>1080p cameras are ideal for use when the camera cannot be close to the play area or paper dots are very small.</li> </ul> </li> <li>Paper &amp; A Way to Make Program Dots<ul> <li>You can print the programs on colored paper or use colored markers to draw them.</li> <li>Alternatively, a black and white printer with coloring markers will do. Check Resources for templates.</li> <li>A simple piece of paper and a steady hand can also be effective!</li> <li>Try colored stickers too!</li> </ul> </li> </ol>"},{"location":"setup/install/#optional-required-hardware-for-projector-use","title":"(Optional) Required Hardware for Projector Use","text":"<ul> <li>Projector &amp; Projector Suspension Mount<ul> <li>Ideally, at least 2000 lumens. A 1000 lumens projector might suffice in certain conditions, but the dim light required for projections might be too dark for your camera to detect programs.</li> <li>If your projector is large, ensure the projector is secured to a load-bearing structure like a beam or stud. Command Strips or screws in drywall may not suffice. Note: You can project onto a wall and tape your programs there for a vertical setup. It is also possible to use a mirror at 45 degrees near the projector output to redirect the image!</li> </ul> </li> <li>Note 1: Depending on your setup, you might need extension cables for your video (VGA, HDMI, DisplayPort, etc) and USB cables to connect the camera and projector to the computer.</li> <li>Note 2: A solid black rug or mat for projection. Note: a projector's brightness is limited by its bulb, and its darkness is determined by the surface it projects onto.</li> </ul> A. Second monitor and B. Projector configurations. Primary display at (a) and (f). Webcam positioned at (b) and (e). Second monitor at (c). Projector mounted at (d). A projection surface (a curtain in this case) at (g)."},{"location":"setup/install/#package-installation-intructions-preferred","title":"Package Installation Intructions (Preferred)","text":"<ol> <li>Install Node.js Dependency: Paper Playground requires Node.js to run. You can download the latest version of Node.js from the official website. Latest tested Node.js version was LTS v22.12.0 (Dec 2024).</li> <li>Download the Package: Download the latest Paper Playground package from the Releases page on GitHub. Choose the package that matches your operating system (Windows, MacOS). For Linux, follow the advanced command-line installation below.</li> <li>Extract the Package: Extract the contents of the package to a directory of your choice.</li> <li>Change Configuration (optional): Check the <code>config.json</code> file in the root directory of the project.<ul> <li>By default, the server will run on port 3000. If you need to change the port, change the key:value pair in <code>config.json</code>.</li> <li>You can also add an OpenAI API key to the <code>config.json</code> file if you want to use the AI Code Assistant in Creator.</li> <li>You may also add a remote database URL to the config.json file if you want to create a remotely collaborative program space. See instructions below for Remote or Local database. \u2192</li> </ul> </li> <li>Run the Executable: Run the executable (.exe or .dmg) to install and start the program.</li> <li>Access Paper Playground:<ul> <li>Open http://localhost:3000 in a web browser to access the main interface.</li> <li>To access the camera page, go to http://localhost:3000/camera and ensure it\u2019s working as expected.</li> <li>To close Paper Playground, close the terminal window or press <code>Ctrl+C</code> in the terminal.</li> </ul> </li> </ol>"},{"location":"setup/install/#command-line-installation-instructions-advanced","title":"Command Line Installation Instructions (Advanced)","text":"<ol> <li> <p>Check &amp; Install Dependencies: Ensure you have Git and Node.js (includes npm) installed by running the following commands in your preferred command line interface (e.g., Terminal, Command Prompt, etc.):</p> <pre><code>git -v  # Verify Git installation\nnode -v # Recommended LTS version of Node.js\nnpm -v  # Verify npm installation\n</code></pre> </li> <li> <p>Install Paper Playground: Run these commands to clone the repository and install dependencies:</p> <pre><code>cd ~ # Navigate to your preferred directory\ngit clone https://github.com/phetsims/paper-land.git # Clone the repository\ncd paper-land # Navigate to the project directory\nnpm install # Install dependencies\n</code></pre> </li> <li> <p>Change Configuration (optional): Check the <code>config.json</code> file in the root directory of the project.</p> </li> <li>By default, the server will run on port 3000. If you need to change the port, change the key:value pair in <code>config.json</code>.</li> <li>You can also add an OpenAI API key to the <code>config.json</code> file if you want to use the AI Code Assistant in Creator.</li> <li> <p>You may also add a remote database URL to the config.json file if you want to create a remotely collaborative program space. See instructions below for Remote or Local database.</p> </li> <li> <p>Start Paper Playground: Run the following command to start the program:</p> <pre><code>npm start # Start the program\n</code></pre> </li> <li> <p>Access Paper Playground:</p> <ul> <li>Open http://localhost:3000 in a web browser to access the main interface.</li> <li>To access the camera page, go to http://localhost:3000/camera and ensure it\u2019s working as expected.</li> </ul> </li> </ol> <p></p> <p>You should be good to go! Move on to setting up your devices or straight to the interface overview to get started creating and testing your paper programs!</p> <p>Paper Playground comes with a host of <code>spaces</code> and <code>projects</code> that will be installed by default in your local storage found in <code>root/server/default-data</code>. Check them out!</p> <p>The programs you create are stored in <code>root/server/data</code>.</p>"},{"location":"setup/install/#updating-paper-playground","title":"Updating Paper Playground","text":""},{"location":"setup/install/#package-update-instructions","title":"Package Update Instructions","text":"<ol> <li>Back up your programs by copying the <code>root/server/data</code> directory and <code>root/config.json</code> to a safe location.</li> <li>Delete the <code>paper-land</code> directory from your computer.</li> <li>See the GitHub Releases page for the latest version of Paper Playground. You can download the latest package and follow the installation instructions above to update your version of Paper Playground.</li> <li>Replace the <code>root/server/data</code> directory with your backed-up programs and replace or copy in the text from your saved <code>root/config.json</code> to the new <code>config.json</code> for quick setup.</li> </ol>"},{"location":"setup/install/#cli-update-instructions","title":"CLI Update Instructions","text":"<p>If you'd like the latest changes to the Paper Playground, you can update the project by running the following commands:     <pre><code>git pull # Pull the latest changes\nnpm install # Install any new dependencies\nnpm start # Start the program\n</code></pre></p>"},{"location":"setup/install/#optional-installing-database-for-collaborative-editing","title":"(OPTIONAL) Installing Database for Collaborative Editing","text":""},{"location":"setup/install/#remote-database","title":"Remote Database","text":"<p>If you are using a remote program database, which you can find online by searching \"PostgreSQL database hosting\" (paid), or by setting up your own (advanced):</p> <ol> <li>Open the <code>config.json</code> file in the root directory of the project.</li> <li> <p>Write a key:value pair on a new line to provide Paper Playground with a remote database address under <code>DATABASE_URL</code>.</p> </li> <li> <p>Example: <code>DATABASE_URL=postgres://someDatabaseAddressFromSomeHostingService</code></p> </li> </ol> <p>Note</p> <p>Are you working with us? Send an email to <code>brett dot fiedler at colorado dot edu</code> to request access to our database of programs!</p>"},{"location":"setup/install/#local-database","title":"Local Database","text":"<p>If you do not have access to a remote database, you can host a local database on your computer using PostgreSQL.</p> <ul> <li>You will need to install PostgreSQL.</li> </ul> <p>Warning</p> <p>The following instructions have not been verified in the latest version of Paper Playground, but may prove informative for troubleshooting. Also see Paper Programs tutorial documentation</p> <ol> <li>Open the <code>config.json</code> file in the root directory of the project.</li> <li>Replace the <code>STORAGE_TYPE=local</code> key:value pair with: <code>STORAGE_TYPE=postgresql</code></li> </ol>"},{"location":"setup/install/#setting-up-postgresql-database-permissions","title":"Setting up PostgreSQL database permissions","text":"<ul> <li>Edit pg_hba.conf file (found in PostgreSQL installation directory) by changing auth method \u201cscram-sha-256\u201d for local to \u201ctrust\u201d  </li> <li> you can be risky and set everything to \u201ctrust\u201d if you\u2019re having trouble, just make sure to change that if you ever do anything else with SQL.</li> <li>Example paths:<ul> <li>(WINDOWS) C:\\Program Files\\PostgreSQL\\15\\data\\pg_hba.conf</li> <li>(MacOS) Library\\PostgreSQL\\15\\data\\pg_hba.conf</li> </ul> </li> <li>In terminal (make sure PSQL is in your PATH for Windows):</li> <li>Add a new user that matches your OS username. Be careful to match the case of the OS user and include semicolon. Following commands:<ul> <li><code>psql -U postgres</code></li> <li><code>create role \"Username\";</code> // replace Username with name matching your OS username (include quotes though)</li> <li><code>alter role \"Username\" superuser createrole createdb login;</code></li> <li><code>\\du</code> to see the role</li> <li><code>exit</code> to leave the psql in the terminal</li> </ul> </li> </ul>"},{"location":"setup/install/#initial-run","title":"Initial Run","text":"<p>Run the following command to set up the database:         <pre><code>npm run dev\n</code></pre></p> <p> You only need to run this command the first time you set up your database. </p>"},{"location":"setup/install/#developer-details-for-paper-playground-contribution","title":"Developer Details for Paper Playground Contribution","text":"<p>The Paper Playground client runs locally. For program storage, Paper Playground uses your device's local storage by default. If you would like to support multiple users editing or accessing paper programs, you can configure a remote, hosted database OR a local PostgreSQL database.</p>"},{"location":"setup/install/#additional-recommended-start-up-commands-if-following-development","title":"Additional recommended start up commands if following development","text":"<p>Install Paper Playground according to the CLI Installation Instructions.</p> <p>If you're following the development of Paper Playground, it is recommended to regularly execute the following commands:     <pre><code>git pull\nnpm install\nnpm start\n</code></pre></p>"},{"location":"setup/install/#packaging-paper-playground","title":"Packaging Paper Playground","text":"<p>To package the project so that it is sharable, we have custom build scripts that include necessary files and make it easy to install dependencies. While a standalone executable may be possible in the future, it is not currently available. For additional details and history on the packaging process, see https://github.com/phetsims/paper-land/issues/259.</p> <p>We require that you have Node.js installed on your system to run these scripts. Once you have Node.js you can run paper-playground by clicking on the setup executables.</p>"},{"location":"setup/install/#building-your-own-package","title":"Building your own package","text":"<p> These steps need to be followed for Windows and MacOS separately on a device with the OS of choice. The resulting build scripts are platform-specific and will not work across platforms. Likewise, you cannot create a MacOS build on a Windows machine or vice versa. The build script will automatically detect your platform and build the correct version. </p> <p>If you are interested in packaging the project yourself, you can use the following steps:</p> <ol> <li>Install pkg globally: <code>npm install -g pkg</code>. pkg is used to package setup scripts into an executable.</li> <li>Run <code>npm run build</code> to build the project. This will create a <code>build</code> directory in the root of the project.</li> <li>Within the build directory are platform specific executables that a user can run to install node modules and run the project.</li> <li> <p>It also includes a <code>config.json</code> file where you can configure variables for the project (see installation instructions above.)</p> <ul> <li>Note that there are other build scripts to build individual parts of the project (front end, server, etc.). See <code>package.json</code> for more details.</li> <li>Note that this process requires the user to have Node.js installed on their system. A fully standalone build is not supported at this time.</li> </ul> </li> </ol>"},{"location":"setup/interface-overview/","title":"Interface Tutorial","text":"<p>Read on to learn about the different interfaces and how they work together. You can move onto the Creator tutorial if you're ready to start building programs visually.</p> <p>Before we begin, make sure you have installed Paper Playground and set up your equipment.</p>"},{"location":"setup/interface-overview/#interface-overview-and-startup","title":"Interface Overview and Startup","text":"<p>User Flow</p> <p></p>"},{"location":"setup/interface-overview/#start-by-opening-up-all-pages-of-the-interface","title":"Start by opening up all pages of the interface","text":"<p>Navigate to localhost:3000 in your browser and either click the links or open in your browser:</p> <ol> <li>Camera (localhost:3000/camera.html)</li> <li>Canvas (localhost:3000/projector.html)</li> <li>Interactive Display (localhost:3000/display.html)</li> <li>Creator (localhost:3000/creator.html)</li> </ol>"},{"location":"setup/interface-overview/#what-is-the-camera-page","title":"What is the Camera page?","text":"<p>The Camera page is where all the action happens detecting and interacting with your paper programs!</p> <p></p> <p>On this page you will find the preview of your webcam, a preview of the full JavaScript for your currently selected paper program, and a plethora of options in the sidebar. Explore the headings in the sidebar to create and navigate between spaces, calibrate your webcam to detect paper programs, print and virtually preview programs and markers, and fine-tune your detection.</p> <p>You'll use this page to match up where your papers are in space with visuals on a projector. Think of it as your play space.</p>"},{"location":"setup/interface-overview/#what-are-preview-papers","title":"What are Preview Papers?","text":"<p>If you are quickly iterating or just not in a position to print physical papers, you can still see how your code runs! Preview paper programs can be placed into the camera view at any time and the code will run as through you put a physical paper in view.</p> <p></p> <p>While a lot more can be done to help the preview papers mimic how you can move a physical piece of paper, there are a few features currently in place to help:</p> <ul> <li>Move the papers by dragging inside of the boundaries of the preview.</li> <li>Resize the papers by dragging an edge.</li> <li>Drag the green square to rotate the paper.</li> <li>Select the scissors to 'cut' the paper into four independently moveable corners.</li> <li>Once cut, you can rejoin the paper with a new button.</li> <li>Preview papers can be removed at any time by selecting the red square.</li> </ul> <p>Tip</p> <p>If you'd like to quickly clear the Preview programs, the best option currently is to refresh the Camera page.</p>"},{"location":"setup/interface-overview/#preview-markers","title":"Preview Markers","text":"<p>Just like preview papers, you can simulate physical paper markers under the Preview Markers sidebar menu. Select the eye icon to place a draggable marker into the video feed that triggers marker-related code in your paper programs.</p> <p></p>"},{"location":"setup/interface-overview/#organizing-your-code-spaces-and-projects","title":"Organizing your code: Spaces and Projects","text":""},{"location":"setup/interface-overview/#what-is-a-space","title":"What is a Space?","text":"<p>A space is way of organizing your programs and how you'll locate your programs in the Camera interface to run them. Some software might refer to this as a \"workspace\", but we prefer to think of it as a playspace!</p> <p>Warning</p> <p>At the time of writing, Spaces can only be created from the Camera interface (\"Add New Space\" button). You can select, but not create, Spaces in the Creator interface.</p> <p>All of the programs in a space can be for one project or you can create a series of simpler programs that all exist in the same Space. This is completely up to you and we use them for both purposes. There is no limit to the number of Spaces you can have, so focusing each Space on one idea works well.</p> <p>You might create your own personal space \"my-space\"  and fill it with disparate project ideas you have or create a \"frogger-game\" space and collect all of the paper programs that will work together to create your project.</p>"},{"location":"setup/interface-overview/#what-is-a-creator-project","title":"What is a Creator Project?","text":"<p>Info</p> <p>If you are not familiar with JavaScript development, we highly recommend you begin with the Creator interface!</p> <p>When working from the Creator interface, you may notice you can create Projects after selecting space. This is one level deeper than a Space and allows you to have multiple version or different sets of programs that you can send to the selected Space in the Camera interface via the Send to Playground button.</p> <p>Don't lose your programs!</p> <p>If you select Send to Playground for your current project, it will OVERWRITE the programs in the Space. This introduces some incompatibility between editing programs directly in the JavaScript Editor (editor.html) and in Creator. If you only work in Creator and regularly Save Project, then you can always select your project and your work will be there.</p> <p>If you'd like to directly write JavaScript and *Creator, use the Custom Code button on your paper program in Creator. This code will be added to the end of each listed event function in the interface (e.g., onProgramAdded).*</p>"},{"location":"setup/interface-overview/#what-is-the-interactive-display-page","title":"What is the Interactive Display page?","text":"<p>The main display! This page is where your visuals and sounds will be displayed and if you're using a projector, the page you'll want to put onto your projector to overlay visuals in your play area!</p> <p></p> <p>There are a few helpful additions to this page to help with your creation and play.</p>"},{"location":"setup/interface-overview/#display-controlsfeatures","title":"Display Controls/Features","text":""},{"location":"setup/interface-overview/#position-interval","title":"Position Interval","text":"<p>You can adjust the sensitivity of your programs to paper movement (in the event of detection jitter) by moving the Position Interval slider to the right of the Interactive Display.</p> <p>Warning</p> <p>Keep this value as low as you can. At high values, your paper will be able to move very far without the program recognizing it has moved. Values as low as 0.1-0.2 work in many cases.</p>"},{"location":"setup/interface-overview/#show-consoleconsole","title":"Show Console/Console","text":"<p>If you use the <code>phet.paperland.console.log</code>/<code>warn</code> functionality in any custom code section of your programs, that code will display here. See the Paper Playground API for more information.</p> <p>Regular JavaScript usage of <code>console.log</code> will display in your browser's developer console (F12 menu) as usual, but will not display in the Display Console.</p>"},{"location":"setup/interface-overview/#print-speech","title":"Print Speech","text":"<p>This will log the text that is being spoken by the Text-to-Speech engine to the console. This can be helpful for debugging or understanding what is being spoken.</p>"},{"location":"setup/interface-overview/#what-is-the-canvas-page","title":"What is the Canvas page?","text":"<p>At this time, given the legacy structure of the client, all of the code detected in the Camera is executed through the Canvas. However, in Paper Playground, all development has been focused on paper program output sent to the Interactive Display.</p> <p>Canvas is Required</p> <p>The Canvas page must be opened to run the code, but the tab or window does not need to be visible.</p> <p>If you would like to use vanilla Web Canvas or make use of the projection overlay feature of the legacy Paper Programs project, then this is the page where the code will output. See https://github.com/janpaul123/paperprograms/blob/master/docs/tutorial.md for more on this.</p>"},{"location":"setup/interface-overview/#creating-and-editing-programs","title":"Creating and Editing Programs","text":""},{"location":"setup/interface-overview/#creator-recommended-building-programs-visually","title":"Creator (recommended): Building programs visually","text":""},{"location":"setup/interface-overview/#creator-tutorial","title":"\u2192 Creator tutorial \u2190","text":""},{"location":"setup/interface-overview/#editor-advanced-if-youre-comfortable-with-javascript-and-reading-api-documents","title":"Editor (advanced): If you're comfortable with JavaScript and reading API documents","text":"<p>Create new paper programs from the Camera interface (Spaces and Programs on the sidebar). You can copy an existing program from any other Space or start from a fresh template.</p> <p>Once created, you can edit them in the Editor!</p> <p>On the Camera interface you'll find a link to the Editor for your space (this is a good link to share with other people who are collaborating on your Space). Each space will need its own Editor window opened. You can tell which space you are in from the query parameter at the end of the Editor page URL (e.g., <code>../editor.html?my-space</code>)</p> <p>Open that link (make sure you keep the Camera page open at all times) and select your paper program from the list.</p> <p></p> <p>Make some changes in the editor (try changing what text gets drawn on the canvas for starters) and click the \"save\" button. The changes should now be reflected in the output of the Display or Projector pages.</p> <p>When you're ready to print that program as a real piece of paper, click the Printer icon beside the program name on the Camera page. Place the newly printed paper in your webcam's view.</p> <p>Note</p> <p>Paper Playground looks for a comment on the first line of the file and uses that as the program's name. It will use the keywords on the second line for search purposes.At this point, you should have everything you need to start building a collaborative Paper Playground \"play\" Space and a working interactive paper program experience! Look at the paperLand API reference for more information about the functions available to your programs.</p>"},{"location":"use/example-program/","title":"Example JavaScript Paper Programs - Altitude Demo","text":"<p>Below you will find a set of example paper programs written in full JavaScript using the paperLand API that create the abstract idea of controlling and mapping displays to an object hovering above the ground, without implementing any physics. </p> <p>Danger</p> <p>If you are not extremely comfortable with JavaScript, you should move over to the Creator tutorial for easy paper program creation!</p> <p>We'll create a <code>Property</code> for its \"altitude\" above the ground and then create a few other programs to get the altitude value and control or display it across multiple modalities.</p> <p>Note</p> <p>These examples use the Paper Event functions (<code>onProgramAdded</code>, <code>onProgramChangedPosition</code>, <code>onProgramRemoved</code>) to run code on the Interactive Display (display.html). They include basic code for the Projector (projector.html) to provide names if viewing that window. For more advanced usage of Projector, please see the legacy Paper API.</p>"},{"location":"use/example-program/#model-program","title":"Model Program","text":"<p>In this simple example, this paper program establishes the properties (<code>altitudeProperty</code>) that we can control or display with other paper programs. Optionally, this program lets you control the value of the created altitudeProperty with the paper's position within the <code>onProgramChangedPosition</code> function.</p> <pre><code>// Altitude: Model\n// Keywords: altitude, model, property\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs: Altitude prefix\n// Program Description: Contains the model properties for Altitude, including range \n// and initial values. You can change whether this paper controls the value directly.\n\nimportScripts( 'paper.js' );\n\n( async () =&gt; {\n\n  //----------------------------------------------------------------------\n  // display code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get( 'number' );\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n    // -----------------------------------------------------\n    // Template Variables\n    // -----------------------------------------------------\n    // IMPORTANT! Change this to a unique name that identifies this Property.\n    // The name you choose here is how you will refer to this Property in other\n    // programs. \n    const propertyName = 'altitudeProperty';\n\n    // Controls how paper motion changes the value.\n    // 'linear' - value increases linearly as program moves.\n    // 'exponential' - value increases exponentially as program moves.\n    // 'inverse' - The value is set like 1/x as the program moves.\n    // 'none' - The value does NOT change with the program movement.\n    const controlType = 'none';\n\n    // Does the value change when moving the program left/right or up/down? \n    // 'horizontal' - left is min, right is max\n    // 'vertical' - bottom is min, top is max\n    const controlDirection = 'vertical';\n\n    // range for the value as the program moves.\n    const range = new phet.dot.Range( 0, 100 );\n\n    // If true, Text will be drawn to the display to display the value for debugging\n    const showText = true;\n\n    // number of decimal places when representing the value\n    const decimalPlaces = 0;\n\n    // font size for debugging text to see the value on the display\n    const fontSize = 50;\n\n    // positioning of the debugging text, relative to the top left of the display\n    const textLeft = 50;\n    const textTop = 50;\n\n    // -----------------------------------------------------\n    // Create and add components\n    // -----------------------------------------------------\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Use scene.addChild( someNode ) to draw components in the display.\n    const scene = sharedData.scene;\n\n    // Create the NumberProperty and add to the display model\n    const valueProperty = new phet.axon.NumberProperty( range.min, {\n      range: range\n    } );\n    phet.paperLand.addModelComponent( propertyName, valueProperty );\n\n    // Print the value to the display for debugging\n    scratchpad.valueText = new phet.scenery.Text( '', {\n      font: new phet.scenery.Font( { size: fontSize } ),\n      leftTop: new phet.dot.Vector2( textLeft, textTop ),\n      visible: showText\n    } );\n    scene.addChild( scratchpad.valueText );\n\n    // update the debugging text when the value changes\n    const valueTextListener = value =&gt; {\n      scratchpad.valueText.string = phet.dot.Utils.toFixed( value, decimalPlaces );\n    };\n    scratchpad.textObserverId = phet.paperLand.addModelPropertyLink( propertyName, valueTextListener );\n\n    // Assign template variables to the scratchpad so they can be used in the other program\n    // callbacks but only need to be defined in one place\n    scratchpad.propertyName = propertyName;\n    scratchpad.controlType = controlType;\n    scratchpad.controlDirection = controlDirection;\n    scratchpad.showText = showText;\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) =&gt; {\n    const propertyName = scratchpad.propertyName;\n    const controlType = scratchpad.controlType;\n    const controlDirection = scratchpad.controlDirection;\n\n    if ( controlType === 'none' ) {\n      return;\n    }\n\n    // global model for the display (all )    \n    const model = sharedData.model;\n\n    if ( model.has( propertyName ) ) {\n      const range = model.get( propertyName ).range;\n      const positionDimension = controlDirection === 'horizontal' ? 'x' : 'y';\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      let paperCenterValue = ( positionPoints[ 0 ][ positionDimension ] + positionPoints[ 2 ][ positionDimension ] ) / 2;\n\n      // account for origin being at the top\n      if ( controlDirection === 'vertical' ) {\n        paperCenterValue = 1 - paperCenterValue;\n      }\n\n      let calculatedValue = model.get( propertyName ).value;\n      if ( controlType === 'linear' ) {\n        calculatedValue = paperCenterValue * range.max;\n      }\n      else if ( controlType === 'exponential' ) {\n        calculatedValue = Math.pow( paperCenterValue * Math.sqrt( range.max ), 2 );\n      }\n      else if ( controlType === 'inverse' ) {\n\n        const scaleFactor = 10; // stretches the curve so you can see the behavior in more space\n        calculatedValue = ( 1 / ( paperCenterValue / scaleFactor ) ) - scaleFactor;\n      }\n      else {\n        alert( 'Invalid value for controlType' );\n      }\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( calculatedValue, range.max ), range.min );\n      model.get( propertyName ).value = constrainedValue\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Use scene.removeChild( someNode ) to remove components in the display.\n    const scene = sharedData.scene;\n\n    // unlink listener that updates debugging Text\n    phet.paperLand.removeModelPropertyLink( propertyName, scratchpad.textObserverId );\n    delete scratchpad.textObserverId;\n\n    // remove the component from the model\n    phet.paperLand.removeModelComponent( propertyName );\n\n    // Remove Text from the view and remove references.\n    scene.removeChild( scratchpad.valueText );\n    delete scratchpad.valueText;\n\n    // delete the other scratchpad items\n    delete scratchpad.controlType;\n    delete scratchpad.controlDirection;\n    delete scratchpad.showText;\n\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Altitude', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Model', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n</code></pre>"},{"location":"use/example-program/#control-altitude-with-a-papers-position","title":"Control Altitude with a Paper's Position","text":"<p>This program controls the value of <code>altitudeProperty</code> by mapping it to the vertical position of the paper. This is an alternative to controlling the value within the Model program above.</p> <pre><code>// Altitude: Change Altitude with Paper Position\n// Keywords: altitude, model, positionPoints\n// ------------------------------- //\n// Required Programs (dependencies): Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description: Sets the Altitude property value set in Altitude Model by\n// the center position of this paper.\n\nimportScripts('paper.js');\n\n(async () =&gt; {\n\n  //----------------------------------------------------------------------\n  // display code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed. Create new components here.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n    // Nothing to create! This program controls an existing model Property.\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) =&gt; {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    if ( model.has( 'altitudeProperty' ) ) {\n      const altitudeProperty = model.get( 'altitudeProperty' );\n      const range = altitudeProperty.range;\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      // Graphics coordinate system has 0 at top so subtract from 1 so that 0 is at the bottom.\n      let paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n      const newValue = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( newValue, range.max ), range.min );\n      altitudeProperty.value = constrainedValue;\n    }\n  };\n\n  // Called when the program is changed or no longer detected. Destroy components here.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n    // Nothing to destroy! This program is only a controller.\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 + 20);\n})();\n</code></pre>"},{"location":"use/example-program/#play-a-sound-mapped-to-altitude","title":"Play a Sound mapped to Altitude","text":"<p>This program creates a simple sound generator to map pitch of a tone to the magnitude of altitudeProperty.</p> <pre><code>// Altitude: Continuous Sound for Altitude Magnitude\n// Keywords: altitude, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description: Map pitch of a tone to the magnitude of altitudeProperty.\n\nimportScripts('paper.js');\n\n(async () =&gt; {\n\n  //----------------------------------------------------------------------\n  // display code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const altitudeSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    phet.tambo.soundManager.addSoundGenerator( altitudeSound );\n    scratchpad.altitudeSound = altitudeSound;\n\n    const soundOnWhenIdleTime = 1; // in seconds\n    let stopSoundTimeout = null;\n\n    const soundListener = ( newAltitude ) =&gt; {\n\n      if ( !altitudeSound.isPlaying ){\n        altitudeSound.play();\n      }\n\n      // 100 is the maximum of the altitude range - to be more robust, add a direct dependency on the\n      // altitudeProperty with addModelObserver instead of using addModelPropertyLink. Then in handleAttach\n      // you would have a reference to the modelProperty and its range.\n      altitudeSound.setPlaybackRate( 0.5 + newAltitude / 100 * 1.5 );\n\n      // Set a timer to turn off the sound when the altitude is no longer changing.\n      if ( stopSoundTimeout ){\n        window.clearTimeout( stopSoundTimeout );\n      }\n      stopSoundTimeout = window.setTimeout( () =&gt; {\n        altitudeSound.stop();\n      }, soundOnWhenIdleTime * 1000 );\n    };\n\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink( 'altitudeProperty', soundListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) =&gt; {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n    // stop observing the altitudeProperty\n    phet.paperLand.removeModelPropertyLink( 'altitudeProperty', scratchpad.altitudeListenerId );\n    delete scratchpad.altitudeListenerId;\n\n    // stop sounds and remove\n    scratchpad.altitudeSound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.altitudeSound );\n    delete scratchpad.altitudeSound;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();\n</code></pre>"},{"location":"use/example-program/#add-an-image-vertically-mapped-to-altitude","title":"Add an Image vertically mapped to Altitude","text":"<p>This program pulls an image from the <code>./www/media</code> directory and maps its vertical position in the display to </p> <pre><code>// Altitude: Image Y-Position mapped to Altitude\n// Keywords: altitude, image, asset, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () =&gt; {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n    //----------------------------------------------------------------------\n    // Template Variables\n    //----------------------------------------------------------------------\n    const propertyName = 'altitudeProperty';\n\n    const imageWidthInPixels = 50; // Must be positive.\n\n    const imageFile = 'girlInAir.png';\n    // const imageFile = 'lunarLander.png';\n    // const imageFile = 'birdInAir.png';\n\n    //----------------------------------------------------------------------\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', `media/images/${imageFile}` );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      minWidth: imageWidthInPixels,\n      maxWidth: imageWidthInPixels\n    } );\n\n    sharedData.scene.addChild( imageNode );\n\n    // This the function to implement to watch the changing Property.\n    const componentListener = value =&gt; {\n      const viewAltitude =  sharedData.displaySize.height * ( 1 - value / 100 ); // 100 is the max of the range\n      imageNode.centerY = viewAltitude;\n      imageNode.centerX = sharedData.displaySize.width / 2;\n    }\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink( propertyName, componentListener );\n\n    // assign components to the scratchpad so that they can be removed later\n    scratchpad.propertyName = propertyName;\n    scratchpad.imageNode = imageNode;\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n    // Global model for all programs\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    phet.paperLand.removeModelPropertyLink( propertyName, scratchpad.altitudeListenerId );\n    delete scratchpad.altitudeListenerId;\n\n    sharedData.scene.removeChild( scratchpad.imageNode );\n    delete scratchpad.imageNode;\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n</code></pre>"},{"location":"use/example-program/#add-spoken-description-for-altitude","title":"Add Spoken Description for Altitude","text":"<p>This program adds speech to describe different ranges for altitude as the value enters each range.</p> <pre><code>// Altitude: Voice Altitude Value\n// Keywords: altitude, voicing, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description: Adds speech to describe different ranges for altitude as the value enters each range.\n\nimportScripts('paper.js');\n\n(async () =&gt; {\n\n  //----------------------------------------------------------------------\n  // display code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Create new components here!\n    const utterance = new phet.utteranceQueue.Utterance( {\n      priority: 5\n    } );\n\n    let previousDescribedAltitude = 0;\n\n    const altitudeVoicingListener = ( newAltitude ) =&gt; {\n      const valueChange = Math.abs( newAltitude - previousDescribedAltitude );\n\n      // if the value changed enough to voicing something new...\n      if ( valueChange &gt; 15 ) {\n\n        let voicingContent = '';\n        if ( newAltitude &gt; 88 ) {\n          voicingContent = 'At extreme altitude! You are a cosmic climber!';\n        }\n        else if ( newAltitude &gt; 70 ) {\n          voicingContent = 'At very high altitude! You are at the edge of space!';\n        }\n        else if ( newAltitude &gt; 50 ) {\n          voicingContent = 'At high altitude! You are a stratospheric soarer!';\n        }\n        else if ( newAltitude &gt; 40 ) {\n          voicingContent = 'At medium altitude! You are a cloud cruiser!';\n        }\n        else if ( newAltitude &gt; 20 ) {\n          voicingContent = 'At low altitude! You are a tree top flyer!';\n        }\n        else {\n          voicingContent = 'At sea level! You are in the splash zone!';\n        }\n\n        utterance.alert = voicingContent;\n        phet.paperLand.console.log( voicingContent );\n        phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n\n        previousDescribedAltitude = newAltitude;\n      }\n    };\n\n    scratchpad.altitudeObserverId = phet.paperLand.addModelPropertyLink( 'altitudeProperty', altitudeVoicingListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) =&gt; {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n    phet.paperLand.removeModelPropertyLink( 'altitudeProperty', scratchpad.altitudeObserverId );\n    delete scratchpad.altitudeObserverId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Voicing', canvas.width / 2, canvas.height / 2 + 20);\n})();\n</code></pre> <p>Info</p> <p>See more examples in the hard-coded Paper Programs Database!</p>"},{"location":"use/mvc/","title":"Model-View-Controller Framework","text":"<p>The Model-View-Controller (MVC) framework organizes a program into three core segments: the Model, which manages the logic and data; the View, which handles the user interface and presentation; and the Controller, which interprets user inputs and interactions. By utilizing the MVC framework, we aimed to clarify the relationships between these components, specifically focusing on how changes in one segment drive updates in others. The approach involves building Model components that, when updated, trigger changes in other Models or Views, with these updates typically initiated through interactions with a Controller component.</p>"},{"location":"use/mvc/#model-view-separation","title":"Model-View Separation","text":"<p>Paper Playground (paper-land/paperLand) code encourages a software design pattern called \"model-view separation\". This pattern is often used to develop user interfaces, games, and is heavily used by SceneryStack libraries.</p> <p>Benefits of model-view separation include:</p> <ul> <li>It separates internal data from the way it is presented to the user.</li> <li>You can create multiple output modalities/representations from a single model.</li> <li>Changes to the view do not impact application behavior.</li> </ul>"},{"location":"use/mvc/#model","title":"Model","text":"<p>The \"model\" is the internal data that represents application state and logic.</p>"},{"location":"use/mvc/#view","title":"View","text":"<p>The view is everything that can be observed by the user. Graphics, sounds, descriptions, vibrations, tangibles - anything!</p>"},{"location":"use/mvc/#more-info","title":"More info","text":"<p>For more info about this pattern, please see https://github.com/phetsims/phet-info/blob/main/doc/phet-software-design-patterns.md#model-view-controller-mvc and https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller. MVC is pervasive in software design and is used for far more than user interface development!</p>"},{"location":"use/mvc/#example-paper-land-model","title":"Example Paper Land model","text":"<p>Let's pretend we want to display a cupcake \ud83e\uddc1 on the Paper Land Display. On the Display, we want to display a visual cupcake and write strings that describe its properties.</p> <p>First, lets consider the important things to draw and describe about the cupcake. That will determine the components we need in the model.</p> <ul> <li>Type of cake (carrot, chocolate, lemon, ...)</li> <li>Type of icing (buttercream, royal, whipped cream, ...)</li> <li>Type of sprinkles (confetti, jimmies, pearls, ...)</li> </ul> <p>Let's create a Paper Land model that represents these attributes! As of 4/28/23, Paper Land Program code looks like this:</p> <pre><code>  const onProgramAdded = ( paperProgramNumber, scratchPad, sharedData ) =&gt; {\n\n    // (1)\n    phet.paperLand.addModelComponent( 'cakeTypeProperty', new phet.axon.Property( \"Chocolate\" ) );\n    phet.paperLand.addModelComponent( 'icingTypeProperty', new phet.axon.Property( \"Buttercream\" ) );\n    phet.paperLand.addModelComponent( 'sprinklesProperty', new phet.axon.Property( \"Confetti\" ) ); \n  };\n\n  // (2)\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString()\n      }\n    }\n  } );\n</code></pre> <p>Quickly breaking down the numbered sections of the above Program code:</p> <p>1) <code>addModelComponent</code> is used to add new components to the Display model. We provide the name for the component so that    it can be looked up later, and the actual model component. The model component can be any data type. In this example,    we are using a PhET library component called <code>axon.Property</code>. <code>axon.Property</code> has support for sending events    whenever the value changes. We will use that later to update cupcake descriptions when values change! 2) Boilerplate that tells Paper Land to create these model components when this Program is detected.</p> <p>NOTE: In a real example, it would be important to remove the model components when the program is removed. See paperLand API.</p>"},{"location":"use/mvc/#example-paper-land-view","title":"Example Paper Land view","text":"<p>Let's use the model we just created in some Paper Land Program view code. This view could add dynamic graphics and descriptions that will change with the model.</p> <pre><code>  const onProgramAdded = ( paperProgramNumber, scratchPad, sharedData ) =&gt; {\n\n    // (1)\n    const cupcakeNode = new CupcakeNode(); \n    sharedData.scene.addChild( cupcakeNode );\n\n    // (2)\n    phet.paperLand.addModelPropertyLink( 'cakeTypeProperty', cakeType =&gt; {\n\n      // (3)\n      if ( cakeType === \"Chocolate\" ) {\n        cupcakeNode.drawChocolate();\n        cupcakeNode.descriptionContent = \"The richest chocolate you have ever tasted.\"\n      }\n      else if ( cakeType === \"Carrot\" ) {\n        cupcakeNode.drawCarrot();\n        cupcakeNode.descriptionContent = \"Spiced to perfection.\"\n      }\n      else if ( cakeType === \"Lemon\" ) {\n        cupcakeNode.drawLemon();\n        cupcakeNode.descriptionContent = \"As refreshing as it is sweet.\"\n      }\n    } );\n  };\n\n  // (4)\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n      }\n    }\n  } );\n</code></pre> <p>Quickly breaking down the numbered sections of the above Program code:</p> <p>1) We create a <code>CupcakeNode</code> and add it to the scene. The <code>CupcakeNode</code> could use scenery to draw the cake, icing, and    sprinkles and have other structure for a screen reader but that is beyond the scope of these notes. The <code>cupcakeNode</code>    is added as a child to the scene so that it is drawn to the Display. 2) We add a link to the <code>cakeTypeProperty</code> with <code>addModelPropertyLink</code>. The first argument is the name of the Property    to observe. The second argument is the work you want to do when the Property value changes. <code>addModelPropertyLink</code>    will handle listener registration for you so that it works no matter what order the model and view code is introduced    to the Display. 3) This is the logic called whenever the model <code>cakeTypeProperty</code> changes. I introduced    imaginary <code>drawChocolate</code>, <code>drawCarrot</code> and <code>drawLemon</code> functions. Implementing these is beyond the scope of these    notes, but you could imagine they change images or colors representing the cupcake. They are followed by code    that changes how the cupcake is described for a screen reader. 4) Boilerplate that tells Paper Land to run this view code whenever the Program is detected.</p> <p>From a single <code>cakeTypeProperty</code>, we support several output modalities. You can imagine many other view Programs that could play sounds, trigger vibrations, and many other things from this single model component.</p> <p>NOTE: In a real example, it would be important to remove the model components when the program is removed. See paperLand API.</p>"},{"location":"use/paperland-api/","title":"paperLand API","text":"<p>Under Construction</p> <p>We are working on updating our documentation - more details coming soon!</p>"},{"location":"use/paperland-api/#at-a-glance","title":"At a Glance","text":"<ul> <li>Introduction</li> <li>Paper Event Functions</li> <li>Shared Data (<code>sharedData</code>)</li> <li>paperLand Model (<code>displayModel</code>)</li> <li>Program Data</li> <li>paperLand View</li> <li>Whiskers</li> <li>Utils</li> <li>Console</li> </ul>"},{"location":"use/paperland-api/#introduction","title":"Introduction","text":"<p>This API allows you to create PhET library components from paper program code. These components and functions are used to create and modify elements on the Display page.</p> <p>This API is a layer on top of PhET's libraries and the original API from paper programs. For more detailed information about the most heavily used PhET libraries, see</p> <ul> <li>https://github.com/phetsims/scenery (Interactive content library(graphics, speech synthesis, screen reader access))</li> <li>https://github.com/phetsims/axon (Observable component library)</li> <li>https://github.com/phetsims/sun (UI component library)</li> <li>https://github.com/phetsims/tambo (Sound library)</li> </ul> <p>Info</p> <p>Please see Paper Programs API for documentation on using paper data in the Projector display.</p> <p>Paper Playground paperLand functions encourage the MVC software design pattern.</p>"},{"location":"use/paperland-api/#paper-event-functions","title":"Paper Event Functions","text":"<p>This section is for the most fundamental paper program functions. These functions are event listeners for the events (changes) that can happen to a paper. Add and write code inside these functions to do work when an event occurs. Paper events include the following:</p> <ul> <li>paper added</li> <li>paper removed</li> <li>paper moved</li> <li>paper gained markers</li> <li>paper lost markers</li> <li>paper markers moved</li> <li>paper becomes adjacent to another paper</li> <li>paper is separated from an adjacent paper</li> </ul> <p>To create a listener, a function is created and assigned to a variable. Then, it is passed as a string to the paper data. See examples below.</p>"},{"location":"use/paperland-api/#onprogramadded-paperprogramnumber-scratchpad-shareddata","title":"<code>onProgramAdded( paperProgramNumber, scratchpad, sharedData )</code>","text":"<p>The function called when your program is detected by the camera.</p>"},{"location":"use/paperland-api/#arguments","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> </ul>"},{"location":"use/paperland-api/#example","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.console.log( 'Program was added.' );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#onprogramremoved-paperprogramnumber-scratchpad-shareddata","title":"<code>onProgramRemoved( paperProgramNumber, scratchpad, sharedData )</code>","text":"<p>The function called when your program is no longer detected by the camera.</p>"},{"location":"use/paperland-api/#arguments_1","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign   variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> </ul>"},{"location":"use/paperland-api/#example_1","title":"Example","text":"<pre><code>const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.console.log( 'Program was removed.' );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramRemoved: onProgramRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#onprogramchangedposition-paperprogramnumber-paperpoints-scratchpad-shareddata","title":"<code>onProgramChangedPosition( paperProgramNumber, paperPoints, scratchpad, sharedData )</code>","text":"<p>The function called when your program changes position (move or rotate).</p>"},{"location":"use/paperland-api/#arguments_2","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{{x: number, y: number}[]}</code> <code>paperPoints</code> - Array of points, one for each corner of the paper. Order is left top,   right top, right bottom, left bottom. X,Y values are normalized relative to camera view dimensions.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign   variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> </ul>"},{"location":"use/paperland-api/#example_2","title":"Example","text":"<pre><code>const onProgramChangedPosition = ( paperProgramNumber, paperPoints, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.console.log( 'Program changed position.' );\n  phet.paperLand.console.log( 'Left top corner at:', paperPoints[ 0 ] );\n  phet.paperLand.console.log( 'Right bottom corner at:', paperPoints[ 2 ] );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramChangedPosition: onProgramChangedPosition.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#onprogrammarkersadded-paperprogramnumber-paperpoints-scratchpad-shareddata-markersonprogram","title":"<code>onProgramMarkersAdded( paperProgramNumber, paperPoints, scratchpad, sharedData, markersOnProgram )</code>","text":"<p>The function called when one or more markers are placed inside the program.</p>"},{"location":"use/paperland-api/#arguments_3","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{{x: number, y: number}[]}</code> <code>paperPoints</code> - Array of points, one for each corner of the paper. Order is left top,   right   top, right bottom, left bottom. X,Y values are normalized relative to camera view dimensions.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign   variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> <li><code>{Object[]}</code> <code>markersOnProgram</code> - A list of all the markers on the program.   See Markers API for information   on each marker.</li> </ul>"},{"location":"use/paperland-api/#example_3","title":"Example","text":"<pre><code>const onProgramMarkersAdded = ( paperProgramNumber, scratchpad, sharedData, currentMarkers ) =&gt; {\n  phet.paperLand.console.log( `Markers added to program. ${currentMarkers.length} markers currently on program.` );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramMarkersAdded: onProgramMarkersAdded.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#onprogrammarkersremoved-paperprogramnumber-paperpoints-scratchpad-shareddata-markersonprogram","title":"<code>onProgramMarkersRemoved( paperProgramNumber, paperPoints, scratchpad, sharedData, markersOnProgram )</code>","text":"<p>The function called when one or more markers are removed from a program.</p>"},{"location":"use/paperland-api/#arguments_4","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{{x: number, y: number}[]}</code> <code>paperPoints</code> - Array of points, one for each corner of the paper. Order is left top,   right   top, right bottom, left bottom. X,Y values are normalized relative to camera view dimensions.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign   variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> <li><code>{Object[]}</code> <code>markersOnProgram</code> - A list of all the markers on the program.   See Markers API for information   on each marker.</li> </ul>"},{"location":"use/paperland-api/#example_4","title":"Example","text":"<pre><code>const onProgramMarkersRemoved = ( paperProgramNumber, scratchpad, sharedData, currentMarkers ) =&gt; {\n  phet.paperLand.console.log( `Markers removed from program. ${currentMarkers.length} markers currently on program.` );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramMarkersRemoved: onProgramMarkersRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#onprogrammarkerschangedposition-paperprogramnumber-paperpoints-scratchpad-shareddata-markersonprogram","title":"<code>onProgramMarkersChangedPosition( paperProgramNumber, paperPoints, scratchpad, sharedData, markersOnProgram )</code>","text":"<p>The function called when one or more markers change their position on this program.</p>"},{"location":"use/paperland-api/#arguments_5","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{{x: number, y: number}[]}</code> <code>paperPoints</code> - Array of points, one for each corner of the paper. Order is left top,   right   top, right bottom, left bottom. X,Y values are normalized relative to camera view dimensions.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign   variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> <li><code>{Object[]}</code> <code>markersOnProgram</code> - A list of all the markers on the program.   See Markers API for information   on each marker.</li> </ul>"},{"location":"use/paperland-api/#example_5","title":"Example","text":"<pre><code>const onProgramMarkersChangedPosition = ( paperProgramNumber, scratchpad, sharedData, currentMarkers ) =&gt; {\n  // Assuming there is only one marker on the paper. positionOnPaper is the normalized position of the marker\n  // relative to the paper origin.\n  if ( currentMarkers[ 0 ] &amp;&amp; currentMarkers[ 0 ].positionOnPaper ) {\n    const positionOnPaper = currentMarkers[ 0 ].positionOnPaper;\n    phet.paperLand.console.log( `Markers moved within this program. Marker now at ${positionOnPaper.x}, ${positionOnPaper.y}` );\n  }\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#onprogramadjacent-paperprogramnumber-otherpapernumber-direction-scratchpad-shareddata","title":"<code>onProgramAdjacent( paperProgramNumber, otherPaperNumber, direction, scratchpad, sharedData )</code>","text":"<p>Called when a program becomes adjacent to another program in one of the cardinal directions.</p>"},{"location":"use/paperland-api/#arguments_6","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{number}</code> <code>otherPaperNumber</code> - The number of the other paper program.</li> <li><code>{string}</code> <code>direction</code> - The direction of the adjacency. One of <code>left</code>, <code>right</code>, <code>up</code>, <code>down</code>.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> </ul>"},{"location":"use/paperland-api/#example_6","title":"Example","text":"<pre><code>const onProgramAdjacent = ( paperProgramNumber, otherPaperNumber, direction, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdjacent: onProgramAdjacent.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#onprogramseparated-paperprogramnumber-otherpapernumber-direction-scratchpad-shareddata","title":"<code>onProgramSeparated( paperProgramNumber, otherPaperNumber, direction, scratchpad, sharedData )</code>","text":"<p>Called when a program becomes separated from another program. The program was previously adjacent to another program and presumably received an onProgramAdjacent event.</p>"},{"location":"use/paperland-api/#arguments_7","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper program.</li> <li><code>{number}</code> <code>otherPaperNumber</code> - The number of the other paper program.</li> <li><code>{string}</code> <code>direction</code> - The direction of the adjacency. One of <code>left</code>, <code>right</code>, <code>up</code>, <code>down</code>.</li> <li><code>{Object}</code> <code>scratchpad</code> - A JavaScript object that is unique to the program but shared between all event listeners.   Assign variables to this object to use the same variable in more than one function.</li> <li><code>{Object}</code> <code>sharedData</code> - A JavaScript object with global variables of paper-land.   See sharedData.</li> </ul>"},{"location":"use/paperland-api/#example_7","title":"Example","text":"<pre><code>const onProgramSeparated = ( paperProgramNumber, otherPaperNumber, direction, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramSeparated: onProgramAdjacent.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#shared-data-shareddata","title":"Shared Data (<code>sharedData</code>)","text":"<p>Most Paper event functions have an argument called <code>sharedData</code>. It is a JavaScript object with important information that is shared between all programs.</p> <pre><code>sharedData = {\n\n  // A reference to the entire model. See https://github.com/phetsims/paper-land/blob/main/docs/use/paperLand-api.md#display-model-paperLandmodel\n  model: displayModel,\n\n  // A reference to the root Node of the view. See https://github.com/phetsims/paper-land/blob/main/docs/use/paperLand-api.md#paperLand-view\n  scene: scene,\n\n  // The size of the Display display, in view coordinates.\n  displaySize: DISPLAY_SIZE,\n\n  // All markers currently detected by the camera. See https://github.com/janpaul123/paperprograms/blob/master/docs/api.md#marker-points\n  allMarkers: allMarkers\n};\n</code></pre>"},{"location":"use/paperland-api/#example_8","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // get a reference to a component in the model\n  const gravityProperty = sharedData.model.get( 'gravityProperty' );\n  phet.paperLand.console.log( `${gravityProperty.value} is the value of gravity.` );\n\n  // add a circle to the display view, in the center of the display\n  sharedData.scene.addChild( new phet.scenery.Circle( 75, {\n    fill: 'red',\n    centerX: sharedData.displaySize.width / 2,\n    centerY: sharedData.displaySize.height / 2\n  } );\n\n  // print all the markers detected by the camera\n  phet.paperLand.console.log( `${sharedData.allMarkers.length} markers detected.` );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString(),\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#marker-event-functions","title":"Marker Event Functions","text":"<p>This sections shows listener functions you can add when a marker is added, removed, or moved in the entire camera space. If you are interested in events for when a marker is added to a specific paper, see the examples in the Paper Event Functions section. To create a listener, a function is created and assigned to the scratchpad in onProgramAdded. The listener is then removed in onProgramRemoved.</p>"},{"location":"use/paperland-api/#paperlandmarkersaddedemitter","title":"<code>paperLand.markersAddedEmitter</code>","text":"<p>Emits an event when a new marker is detected by the camera.</p>"},{"location":"use/paperland-api/#callback-arguments","title":"Callback Arguments","text":"<ul> <li><code>{Object[]}</code> <code>addedMarkers</code> - A list of the added markers.   See Markers API for information   on each marker.</li> </ul>"},{"location":"use/paperland-api/#example_9","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // create the listener and add it to the scratchpad so it can be removed later\n  scratchpad.markersAddedListener = markers =&gt; {\n    phet.paperLand.console.log( `New markers detected by camera. ${markers.length} markers added.` );\n  }\n\n  // add the listener to the Emitter\n  phet.paperLand.markersAddedEmitter.addListener( scratchpad.markersAddedListener );\n};\n\nconst onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // remove the listener from the Emitter\n  phet.paperLand.markersAddedEmitter.removeListener( scratchpad.markersAddedListener );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString(),\n      onProgramRemoved: onProgramRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#paperlandmarkersremovedemitter","title":"<code>paperLand.markersRemovedEmitter</code>","text":"<p>Emits an event when new markers are removed from the camera.</p>"},{"location":"use/paperland-api/#callback-arguments_1","title":"Callback Arguments","text":"<ul> <li><code>{Object[]}</code> <code>removedMarkers</code> - A list of the removed markers.   See Markers API for information   on each marker.</li> </ul>"},{"location":"use/paperland-api/#example_10","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // create the listener, assign it to the scratchpad\n  scratchpad.markersRemovedListener = markers =&gt; {\n    phet.paperLand.console.log( `Markers removed from camera. ${markers.length} markers removed.` );\n  }\n\n  // add the listener to the Emitter\n  phet.paperLand.markersRemovedEmitter.addListener( scratchpad.markersRemovedListener );\n};\n\nconst onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // remove the listener from the Emitter\n  phet.paperLand.markersRemovedEmitter.removeListener( scratchpad.markersRemovedListener );\n}\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString(),\n      onProgramRemoved: onProgramRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#paperlandmarkerschangedpositionemitter","title":"<code>paperLand.markersChangedPositionEmitter</code>","text":"<p>Emits an event when markers change position in the camera view.</p>"},{"location":"use/paperland-api/#callback-arguments_2","title":"Callback Arguments","text":"<ul> <li><code>{Object[]}</code> <code>changedMarkers</code> - A list of the markers that have changed position.   See Markers API for information   on each marker.</li> </ul>"},{"location":"use/paperland-api/#example_11","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n  scratchpad.markersChangedPositionListener = markers =&gt; {\n    phet.paperLand.console.log( `Markers moved. ${markers.length} markers changed their position.` );\n  }\n\n  phet.paperLand.markersChangedPositionEmitter.addListener( scratchpad.markersChangedPositionListener );\n};\n\nconst onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.markersChangedPositionEmitter.removeListener( scratchpad.markersChangedPositionListener );\n}\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString(),\n      onProgramRemoved: onProgramRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#program-data","title":"Program Data","text":"<p>You can set data directly on a paper without going through the model. This is useful for data that is specific to a physical paper but that doesn't need to be generalized with a model component. For example, if you want one paper to share information with another paper when they become adjacent, that is a good use case for paper data.</p>"},{"location":"use/paperland-api/#phetpaperlandsetprogramdata-paperprogramnumber-dataname-data","title":"<code>phet.paperLand.setProgramData( paperProgramNumber, dataName, data )</code>","text":"<p>Set program data on a paper with a provided name.</p>"},{"location":"use/paperland-api/#arguments_8","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper to set data on.</li> <li><code>{string}</code> <code>dataName</code> - The name of the data to set on this program.</li> <li><code>{*}</code> <code>data</code> - Any kind of data you want to store.</li> </ul>"},{"location":"use/paperland-api/#example_12","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // Set { foo: 'bar' } on this paper called `myData`. Another program can access this with getProgramData.\n  phet.paperLand.setProgramData( paperProgramNumber, 'myData', { foo: 'bar' } );\n};\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandgetprogramdata-paperprogramnumber-dataname","title":"<code>phet.paperLand.getProgramData( paperProgramNumber, dataName )</code>","text":"<p>Get program data for a specific program number and data name.</p>"},{"location":"use/paperland-api/#arguments_9","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper to query.</li> <li><code>{string}</code> <code>dataName</code> - The name of the data you expect to receive.</li> </ul>"},{"location":"use/paperland-api/#example_13","title":"Example","text":"<pre><code>const onProgramAdjacent = ( paperProgramNumber, otherProgramNumber, direction, scratchpad, sharedData ) =&gt; {\n\n  // Get the data called `myData` from the adjacent paper.\n  const dataFromOtherProgram = phet.paperLand.getProgramData( otherProgramNumber, 'myData' );\n\n  if ( dataFromOtherProgram ) {\n    phet.paperLand.console.log( `The adjacent paper has data: ${dataFromOtherProgram}` );\n  }\n};\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandremoveprogramdata-paperprogramnumber-dataname","title":"<code>phet.paperLand.removeProgramData( paperProgramNumber, dataName )</code>","text":"<p>Remove program data when you are done with it.</p>"},{"location":"use/paperland-api/#arguments_10","title":"Arguments","text":"<ul> <li><code>{number}</code> <code>paperProgramNumber</code> - The number of the paper to remove data from.</li> <li><code>{string}</code> <code>dataName</code> - The name of the data you want to remove.</li> </ul>"},{"location":"use/paperland-api/#example_14","title":"Example","text":"<p><pre><code>const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // Remove the data called `myData` from this paper.\n  phet.paperLand.removeProgramData( paperProgramNumber, 'myData' );\n};\n</code></pre> <pre><code>## Display Model (`displayModel`)\n\nThe `displayModel` is\na [JavaScript Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). You can\ncreate and add components to the `displayModel` in your program code. Map keys are strings - the name of the component.\nThe values\nare any JavaScript object you want to add to the model.\n\n---\n\n### `phet.paperLand.addModelComponent( componentName, componentObject )`\n\nAdds a component to the `displayModel`. For programs that create model components, this should almost always\nbe used in the `onProgramAdded` function.\n\n&gt; :warning: You almost always want to remove the model component in the `onProgramRemoved` function.\n&gt;\nSee [onProgramRemoved](https://github.com/phetsims/paper-land/blob/main/docs/use/paperLand-api.md#onprogramremoved-paperprogramnumber-scratchpad-shareddata-).\n\n#### Arguments\n\n- `{string}` `componentName` - The name of the component to add.\n- `{Object}` `componentObject` - The JavaScript Object to add to the `displayModel` map.\n\n#### Example\n\n```js\nconst onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // Add a number to the model with the name 'x'\n  phet.paperLand.addModelComponent( 'x', 5 );\n\n  // add a PhET Axon Property to the model with the name 'gravityProperty'\n  phet.paperLand.addModelComponent( 'gravityProperty', new phet.axon.Property( -9.8 ) );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString()\n    }\n  }\n} );\n</code></pre></p>"},{"location":"use/paperland-api/#phetpaperlandremovemodelcomponent-componentname","title":"<code>phet.paperLand.removeModelComponent( componentName )</code>","text":""},{"location":"use/paperland-api/#arguments_11","title":"Arguments","text":"<ul> <li><code>{string}</code> <code>componentName</code> - The name of the component to remove.</li> </ul>"},{"location":"use/paperland-api/#example_15","title":"Example","text":"<pre><code>const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // Add a model component with the name 'x'.\n  phet.paperLand.removeModelComponent( 'x' );\n\n  // Remove a model component with the name 'gravityProperty'\n  phet.paperLand.removeModelComponent( 'gravityProperty' );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramRemoved: onProgramRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandgetmodelcomponent-componentname","title":"<code>phet.paperLand.getModelComponent( componentName )</code>","text":"<p>Returns a reference to the model component with the provided name, if it exists.</p>"},{"location":"use/paperland-api/#arguments_12","title":"Arguments","text":"<ul> <li><code>{string}</code> <code>componentName</code> - Name of the component in the model to get.</li> </ul>"},{"location":"use/paperland-api/#returns","title":"Returns","text":"<ul> <li><code>{Object | undefined}</code> - The model component, or undefined if it does not exist.</li> </ul>"},{"location":"use/paperland-api/#example_16","title":"Example","text":"<pre><code>const onProgramChangedPosition = ( paperProgramNumber, paperPoints, scratchpad, sharedData ) =&gt; {\n  const gravityProperty = phet.paperLand.getModelComponent( 'gravityProperty' );\n  const maxGravity = 20;\n\n  // If gravity exists in the model...\n  if ( gravityProperty ) {\n\n    // Use a utility function to get the program rotation from its four points - normalized from zero to one.\n    const rotation = phet.paperLand.utils.getNormalizedProgramRotation( paperPoints );\n    const newGravity =  maxGravity * rotation;\n    gravityProperty.set( newGravity ); \n  }\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramChangedPosition: onProgramChangedPosition.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandaddmodelpropertylink-componentname-listener","title":"<code>phet.paperLand.addModelPropertyLink( componentName, listener )</code>","text":"<p>Adds a listener to a PhET Axon Property in the model. The listener will be called whenever the value of the Property changes. If the Property is not in the model yet, paper-land will add the listener as soon as the Property is added with <code>addModelComponent</code>. When the Property is removed with <code>removeModelComponent</code>, the listener will be removed. You almost always want to use this in the <code>onProgramAdded</code> function.</p> <p> You almost always want to remove the listener in the <code>onProgramRemoved</code> function. See removeModelPropertyLink.</p>"},{"location":"use/paperland-api/#arguments_13","title":"Arguments","text":"<ul> <li><code>{string}</code> <code>componentName</code> - Name of the PhET Axon Property you will add with <code>addModelComponent</code>.</li> <li><code>{function}</code> <code>listener</code> - A JavaScript function that will be called when the Axon Property changes. Takes two   arguments, the current Property value and the old Property value, in that order.</li> </ul>"},{"location":"use/paperland-api/#returns_1","title":"Returns","text":"<ul> <li><code>{number}</code> - A unique ID for the listener. Assign this to the scratchpad to remove the listener when the program is   removed.</li> </ul>"},{"location":"use/paperland-api/#example_17","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // Add a listener that logs the new gravity value whenever it changes. The return value of addModelPropertyLink\n  // is saved to the scratchpad so that the listener can be removed later in onProgramRemoved.\n  scratchpad.gravityLinkId =  phet.paperLand.addModelPropertyLink( 'gravityProperty', ( newGravity, oldGravity ) =&gt; {\n    phet.paperLand.console.log( `Gravity changed value! New value: ${newGravity}, Old value: ${oldGravity}` );\n  } );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandremovemodelpropertylink-componentname-linkid","title":"<code>phet.paperLand.removeModelPropertyLink( componentName, linkId )</code>","text":"<p>Removes a listener from a PhET Axon Property in the <code>displayModel</code>. You almost always want to use this in the <code>onProgramRemoved</code> function.</p>"},{"location":"use/paperland-api/#arguments_14","title":"Arguments","text":"<ul> <li><code>{string}</code> <code>componentName</code> - Name of the PhET Axon Property you will add with <code>addModelComponent</code>.</li> <li><code>{number}</code> <code>linkId</code> - The number that was returned from <code>addModelPropertyLink</code>. Typically, you will save this on   the <code>scratchpad</code>.</li> </ul>"},{"location":"use/paperland-api/#example_18","title":"Example","text":"<pre><code>const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.removeModelPropertyLink( 'gravityProperty', scratchpad.gravityLinkId );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramRemoved: onProgramRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandaddmodelobserver-componentname-handleattach-handledetach","title":"<code>phet.paperLand.addModelObserver( componentName, handleAttach, handleDetach )</code>","text":"<p>Generally, you should use <code>addModelPropertyLink</code>/<code>removeModelPropertyLink</code>. Use this for more complicated cases that cannot use an Axon Property.</p> <p>This function lets you add observers to components in the model and components that are expected to be in the model. This way, you can gracefully add listeners to observable components even before they are added to the model.</p> <p>This should almost always be used in <code>onProgramAdded</code>, and counterpart <code>removeModelObserver</code> should be used in <code>onProgramRemoved</code>.</p>"},{"location":"use/paperland-api/#arguments_15","title":"Arguments","text":"<ul> <li><code>{string}</code> <code>componentName</code> - Name of the observable component in the <code>displayModel</code>.</li> <li><code>{function}</code> <code>handleAttach</code> - Function that attaches the observer to the observable as soon as the component is added   with <code>addModelComponent</code>.</li> <li><code>{function}</code> <code>handleDetach</code> - Function that removes the observer from the observable as soon as the observable   component is removed with <code>removeModelComponent</code>.</li> </ul>"},{"location":"use/paperland-api/#returns_2","title":"Returns","text":"<ul> <li><code>{number}</code> - A unique ID to the observer so that listeners can be detached when the program is no longer detected.</li> </ul>"},{"location":"use/paperland-api/#example_19","title":"Example","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // Add an observer to a model component called \"buttonPressedEmitter\". The \"buttonPressedEmitter\" notifies\n  // listeners whenever a button is pressed. The Emitter implements `addListener` and `removeListener` which\n  // are used in the second and third arguments.\n  scratchpad.observerId =  phet.paperLand.addModelObserver.(\n    'buttonPressedEmitter',\n    ( addedComponent ) =&gt; {\n      scratchpad.listener = () =&gt; {\n        phet.paperLand.console.log( 'You just pressed a button!' );\n      }\n      addedComponent.addListener( scratchpad.listener );\n    },\n    ( removedComponent ) =&gt; {\n      removedComponent.removeListener( scratchpad.listener );\n    }\n  )\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandremovemodelobserver-componentname-observerid","title":"<code>phet.paperLand.removeModelObserver( componentName, observerId )</code>","text":"<p>Generally, you should use <code>addModelPropertyLink</code>/<code>removeModelPropertyLink</code>. Use this for more complicated cases that cannot use an Axon Property.</p> <p>This function removes observers to components that are (or are expected to be) in the model.</p> <p>This should almost always be used in <code>onProgramRemoved</code>, after an observer was added with <code>addModelObserver</code>.</p>"},{"location":"use/paperland-api/#arguments_16","title":"Arguments","text":"<ul> <li><code>{string}</code> <code>componentName</code> - Name of the observable component in the `displayModel``.</li> <li><code>{number}</code> <code>observerId</code> - Unique ID for the observer that was created by <code>addModelObserver</code>.</li> </ul>"},{"location":"use/paperland-api/#example_20","title":"Example","text":"<pre><code>const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n  phet.paperLand.removeModelObserver( 'buttonPressedEmitter', scratchpad.observerId );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramRemoved: onProgramRemoved.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#display-view","title":"Display View","text":"<p>The Display page uses PhET libraries for multimodal output. You have access to every PhET library through the <code>phet</code> namespace. Each PhET library can be accessed through <code>phet</code> like</p> <ul> <li><code>phet.scenery.(...)</code></li> <li><code>phet.axon.(...)</code></li> <li><code>phet.sun.(...)</code></li> <li><code>phet.dot.(...)</code></li> </ul> <p>Describing the full API for these libraries is beyond the scope of this document. See the following for more information about the most used libraries. There are many others that may be useful to you.</p> <ul> <li>https://github.com/phetsims/scenery (Interactive content library(graphics, speech synthesis, screen reader access))</li> <li>https://github.com/phetsims/axon (Observable component library)</li> <li>https://github.com/phetsims/sun (UI component library)</li> <li>https://github.com/phetsims/dot (Math library)</li> <li>https://github.com/phetsims/tambo (Sound library)</li> </ul> <p>Here are a few examples to illustrate usages.</p>"},{"location":"use/paperland-api/#examples","title":"Examples","text":"<pre><code>const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) =&gt; {\n\n  // add a Scenery circle to the display view, in the center of the display\n  scratchpad.circle = new phet.scenery.Circle( 75, {\n    fill: 'red',\n    centerX: sharedData.displaySize.width / 2,\n    centerY: sharedData.displaySize.height / 2\n  };\n  sharedData.scene.addChild( scratchpad.circle );\n\n  // add a Sun button to the display view, in the top left of the display\n  sharedData.scene.addChild( new phet.sun.TextPushButton( 'Push me!', {\n    leftTop: new phet.dot.Vector2( 0, 0 )\n  }) );\n\n  // Speak something with scenery speech synthesis\n  phet.scenery.voicingUtteranceQueue.addToBack( 'I can talk!' );\n\n  // make the circle above discoverable to a screen reader, and focusable\n  scratchpad.circle.tagName = 'div';\n  scratchpad.circle.focusable = true;\n  scratchpad.circle.innerContent = 'I am a red circle, you can focus me!';\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramAdded: onProgramAdded.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#whiskers","title":"Whiskers","text":"<p>'Whiskers' are the mechanism by which papers determine if they are adjacent to another paper. Whiskers are lines that extend outward from the center of each paper side. When the line intersects another paper, the <code>onProgramAdjacent</code> event fires. See the <code>onProgramAdjacent</code> and <code>onProgramSeparated</code> paper events for more information.</p> <p>Every paper has whiskers. You can change the whisker lengths with the following options.</p>"},{"location":"use/paperland-api/#whiskerlength","title":"<code>whiskerLength</code>","text":"<p>Sets the length of all whiskers. The value is a ratio of the width of the entire camera space.</p>"},{"location":"use/paperland-api/#example_21","title":"Example","text":"<pre><code>await paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    whiskerLength: 0.3\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#customwhiskerlengths","title":"<code>customWhiskerLengths</code>","text":"<p>Sets the length of each whisker individually. The value is a ratio of the width of the entire camera space.</p>"},{"location":"use/paperland-api/#example_22","title":"Example","text":"<pre><code>await paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    customWhiskerLengths: {\n      top: 0.3,\n      right: 0.2,\n      bottom: 0.1,\n      left: 0.4\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#utils","title":"Utils","text":""},{"location":"use/paperland-api/#phetpaperlandutilsgetprogramrotation-points","title":"<code>phet.paperLand.utils.getProgramRotation( points )</code>","text":"<p>Returns the rotation of the paper in radians. Rotation is zero when top of program is parallel to top edge of camera view.</p>"},{"location":"use/paperland-api/#arguments_17","title":"Arguments","text":"<ul> <li><code>{{x: number, y: number}[]}</code> <code>points</code> - The four points of a program.</li> </ul>"},{"location":"use/paperland-api/#returns_3","title":"Returns","text":"<ul> <li><code>{number}</code> - Rotation of the paper in radians.</li> </ul>"},{"location":"use/paperland-api/#example_23","title":"Example","text":"<pre><code>const onProgramChangedPosition = ( paperProgramNumber, paperPoints, scratchpad, sharedData ) =&gt; {\n  const rotation = phet.paperLand.getProgramRotation( paperPoints );\n  phet.paperLand.console.log( `New rotation value: ${rotation}` );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramChangedPosition: onProgramChangedPosition.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandutilsgetnormalizedprogramrotation-points","title":"<code>phet.paperLand.utils.getNormalizedProgramRotation( points )</code>","text":"<p>Returns the rotation of the paper, normalized from 0 to 1. Rotation is 0 when top of program is parallel to top edge of camera view. Rotation is 1 when the paper has rotated 360 degrees. Most useful for scaling a model value with paper rotation.</p>"},{"location":"use/paperland-api/#arguments_18","title":"Arguments","text":"<ul> <li><code>{{x: number, y: number}[]}</code> <code>points</code> - The four points of a program.</li> </ul>"},{"location":"use/paperland-api/#returns_4","title":"Returns","text":"<ul> <li><code>{number}</code> - Rotation of the paper, normalized.</li> </ul>"},{"location":"use/paperland-api/#example_24","title":"Example","text":"<pre><code>const onProgramChangedPosition = ( paperProgramNumber, paperPoints, scratchpad, sharedData ) =&gt; {\n  const rotation = phet.paperLand.getNormalizedProgramRotation( paperPoints );\n  phet.paperLand.console.log( `New rotation value: ${rotation}` );\n};\n\nawait paper.set( 'data', {\n  paperPlaygroundData: {\n    updateTime: Date.now(),\n    eventHandlers: {\n      onProgramChangedPosition: onProgramChangedPosition.toString()\n    }\n  }\n} );\n</code></pre>"},{"location":"use/paperland-api/#console","title":"Console","text":"<p>The paperLand page has a console that displays logging and error information. It will notify when something has gone wrong in your program code. The following functions are also available to you to assist with writing programs.</p>"},{"location":"use/paperland-api/#phetpaperlandconsolelog-args","title":"<code>phet.paperLand.console.log( ...args )</code>","text":"<p>Prints a message to the console. Takes any number of arguments and prints them all as a string.</p>"},{"location":"use/paperland-api/#example_25","title":"Example","text":"<pre><code>const myVariable = 5;\nphet.paperLand.console.log( myVariable );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandconsolewarn-args","title":"<code>phet.paperLand.console.warn( ...args )</code>","text":"<p>Prints a warning message to the console. Takes any number of arguments and prints them all as a string.</p>"},{"location":"use/paperland-api/#example_26","title":"Example","text":"<pre><code>phet.paperLand.console.warn( 'Careful! Something is not right' );\n</code></pre>"},{"location":"use/paperland-api/#phetpaperlandconsoleerror-args","title":"<code>phet.paperLand.console.error( ...args )</code>","text":"<p>Prints an error message to the console. Takes any number of arguments and prints them all as a string.</p>"},{"location":"use/paperland-api/#example_27","title":"Example","text":"<pre><code>phet.paperLand.console.error( 'Something has gone wrong!' );\n</code></pre>"},{"location":"use/resources/","title":"Downloadable Resources","text":""},{"location":"use/resources/#paper-program-blank-template","title":"Paper Program Blank Template","text":"<p>Don't have a color printer, but do have markers/colored pencils? Use this template to fill in the color dot sequences for your paper programs on the fly.</p> <p>Advice</p> <p>Try to color in the dots as uniformly as possible to improve detection by your camera.</p> <p>Blank Dot Template (GitHub)</p> <p>Blank Dot Template</p> <p>Tip</p> <p>Dot sequences are tied to the program number/ID. When using Creator, you can change the number of the programs you create. This means that you can re-use papers over and over! Just note the number of the paper you have printed and change the program numbers before sending them to the Playground.</p>"},{"location":"use/resources/#craft-templates","title":"Craft Templates","text":"<p>Marker Slider Materials</p> <p>Sliding Program Full Program (PDF)</p>"},{"location":"use/walkthroughs/walkthroughs/","title":"Walkthroughs","text":"<p>Find more demos and walkthroughs at https://www.youtube.com/@PaperPlaygroundCommunity and some  Instructables that include Paper Playground programs.</p>"},{"location":"use/walkthroughs/walkthroughs/#creator-demo-and-walkthrough","title":"Creator Demo and Walkthrough","text":""},{"location":"use/walkthroughs/walkthroughs/#using-whiskers-markers-and-shapes-with-paper-crafting","title":"Using Whiskers, markers, and shapes - with paper crafting","text":"<p>Credit: Craft Tech Lab @ CU Boulder</p>"},{"location":"use/walkthroughs/walkthroughs/#paper-organ-walkthrough","title":"Paper Organ Walkthrough","text":""}]}
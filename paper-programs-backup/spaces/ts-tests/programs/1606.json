{
  "number": 1606,
  "originalCode": "// Voicing PhET Checkbox - TS\n// Keywords: checkbox, view, simple, phet, voice\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n// Voicing PhET Checkboxes: Name matches on-screen text; Do not have object responses.  \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Voicing responses\n    const voicingNameResponse = 'Force Values';\n    const voicingHintResponse = 'Explore with or without newtons.';\n    \n    // Create a checkbox and add it to the scene.\n    const checkBoxLabelText = voicingNameResponse\n    const fontSize = 16;\n    const checkboxLabel = new phet.scenery.Text( checkBoxLabelText, {\n      font: new phet.sceneryPhet.PhetFont( fontSize )\n    } );\n    const booleanProperty = new phet.axon.BooleanProperty( false );\n    const checkbox = new phet.sun.Checkbox( booleanProperty, checkboxLabel );\n    sharedData.scene.addChild( checkbox );\n    scratchpad.checkbox = checkbox;\n\n    //Adds to PaperLand\n    phet.paperLand.addModelComponent('checkboxBooleanProperty', booleanProperty);\n\n    // A work around to get around a bug with checkbox because default checkbox utterances\n    // will override low priority utterance.\n    const utterance = new phet.utteranceQueue.Utterance( {\n        priority: 5 \n    } );\n    scratchpad.linkID = phet.paperLand.addModelPropertyLink('checkboxBooleanProperty', checked => {\n        const nameResponse = voicingNameResponse\n        // Vocing responses that change with the checkbox checked state.\n        //const objectResponse = checked ? '' : ''\n        const contextResponse = checked ? 'Shown in newtons!' : 'Hidden!'\n        \n        // What voices when the checkbox is toggled (all input)\n        utterance.alert = new phet.utteranceQueue.ResponsePacket({\n            nameResponse: nameResponse, \n            //objectResponse: objectResponse,\n            contextResponse: contextResponse\n        });\n        phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n    });\n\n    // Needed to voice name and hint on focus    \n    checkbox.addInputListener( {\n        focus: event => {\n            utterance.alert = new phet.utteranceQueue.ResponsePacket({\n                nameResponse: voicingNameResponse,\n                hintResponse: voicingHintResponse \n            });\n            phet.scenery.voicingUtteranceQueue.addToBack( utterance )\n        }\n    } )\n\n\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    console.log( `onProgramChangedPosition called for ppn ${paperProgramNumber}`);\n\n    if ( scratchpad.checkbox ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.checkbox.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.checkbox.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {    \n    sharedData.scene.removeChild( scratchpad.checkbox );\n    scratchpad.checkbox = null;\n    \n    phet.paperLand.removeModelPropertyLink('checkboxBooleanProperty', scratchpad.linkID);\n    phet.paperLand.removeModelComponent('checkboxBooleanProperty');\n  };\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add some text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('Checkbox', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "currentCode": "// Voicing PhET Checkbox - TS\n// Keywords: checkbox, view, simple, phet, voice\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n// Voicing PhET Checkboxes: Name matches on-screen text; Do not have object responses.  \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Voicing responses\n    const voicingNameResponse = 'Force Values';\n    const voicingHintResponse = 'Explore with or without newtons.';\n    \n    // Create a checkbox and add it to the scene.\n    const checkBoxLabelText = voicingNameResponse\n    const fontSize = 16;\n    const checkboxLabel = new phet.scenery.Text( checkBoxLabelText, {\n      font: new phet.sceneryPhet.PhetFont( fontSize )\n    } );\n    const booleanProperty = new phet.axon.BooleanProperty( false );\n    const checkbox = new phet.sun.Checkbox( booleanProperty, checkboxLabel );\n    sharedData.scene.addChild( checkbox );\n    scratchpad.checkbox = checkbox;\n\n    //Adds to PaperLand\n    phet.paperLand.addModelComponent('checkboxBooleanProperty', booleanProperty);\n\n    // A work around to get around a bug with checkbox because default checkbox utterances\n    // will override low priority utterance.\n    const utterance = new phet.utteranceQueue.Utterance( {\n        priority: 5 \n    } );\n    scratchpad.linkID = phet.paperLand.addModelPropertyLink('checkboxBooleanProperty', checked => {\n        const nameResponse = voicingNameResponse\n        // Vocing responses that change with the checkbox checked state.\n        //const objectResponse = checked ? '' : ''\n        const contextResponse = checked ? 'Shown in newtons!' : 'Hidden!'\n        \n        // What voices when the checkbox is toggled (all input)\n        utterance.alert = new phet.utteranceQueue.ResponsePacket({\n            nameResponse: nameResponse, \n            //objectResponse: objectResponse,\n            contextResponse: contextResponse\n        });\n        phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n    });\n\n    // Needed to voice name and hint on focus    \n    checkbox.addInputListener( {\n        focus: event => {\n            utterance.alert = new phet.utteranceQueue.ResponsePacket({\n                nameResponse: voicingNameResponse,\n                hintResponse: voicingHintResponse \n            });\n            phet.scenery.voicingUtteranceQueue.addToBack( utterance )\n        }\n    } )\n\n\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    console.log( `onProgramChangedPosition called for ppn ${paperProgramNumber}`);\n\n    if ( scratchpad.checkbox ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.checkbox.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.checkbox.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {    \n    sharedData.scene.removeChild( scratchpad.checkbox );\n    scratchpad.checkbox = null;\n    \n    phet.paperLand.removeModelPropertyLink('checkboxBooleanProperty', scratchpad.linkID);\n    phet.paperLand.removeModelComponent('checkboxBooleanProperty');\n  };\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add some text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('Checkbox', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ts-tests.1606.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ts-tests/programs/1606/debugInfo",
  "claimUrl": "/api/spaces/ts-tests/programs/1606/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
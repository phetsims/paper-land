{
  "number": 903,
  "originalCode": "// Voicing Button - TS\n// Keywords: voicing, button\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\n// Import API to detect and pass paper markers\nimportScripts('paper.js');\n\n// Begin program in async\n(async () => {\n\n  //----------------------------------------------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n \n  // ===== //\n  // Called when the program is detected. Creates the button, adds it to the scene, and stores it on the \"scratchpad\"\n  // so that it can be removed later when the program is removed. \n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const voicingNameResponse = 'Push me!';\n    const voicingObjectResponse = 'Hello World.' \n    const voicingHintResponse = 'Push me to introduce me to the world.';\n\n    let pushCounter = 0;\n    const voicingButton = new phet.sun.TextPushButton( voicingNameResponse, {\n\n      // increment pushCounter, use it to update the context response and then speak Voicing responses.\n      listener: () => {\n        pushCounter++;\n        voicingButton.voicingContextResponse = `You pushed me ${pushCounter} ${pushCounter > 1 ? 'times' : 'time'}.`;\n\n        // Voice the object and context responses when you press the button (notice we are clearing the name and hint response)\n        voicingButton.voicingSpeakFullResponse( {\n          nameResponse: null,\n          hintResponse: null\n        } );\n      },\n\n      // assign Voicing responses to the button\n      voicingNameResponse: voicingNameResponse,\n      // voicingObjectResponse: voicingObjectResponse,\n      voicingHintResponse: voicingHintResponse\n    } );\n\n    // positioning\n    voicingButton.top = 300;\n    voicingButton.right = 300;\n\n    // Add it to the Display\n    sharedData.scene.addChild( voicingButton );\n\n    // assign it to the scratchpad for removal later\n    scratchpad.voicingButton = voicingButton;\n  };\n\n  // ===== //\n  // Called whenever the paper moves. Updates position in the display.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    console.log( `onProgramChangedPosition called for ppn ${paperProgramNumber}`);\n\n    if ( scratchpad.voicingButton ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.voicingButton.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.voicingButton.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  // ===== //\n  // Called whenever the paper is no longer detected. Removes the button and cleans up assignments.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    console.log( `onProgramRemoved called for ppn ${paperProgramNumber}`);\n    if ( scratchpad.voicingButton ){\n      sharedData.scene.removeChild( scratchpad.voicingButton );\n      scratchpad.voicingButton = null;\n    }\n    else{\n      alert( 'Error: voicingButton node not found in scratchpad data.' );\n    }\n  };\n   // ===== //\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    program: null,\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n  // END BOARD CODE // \n\n  //----------------------------------------------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------------------------------------------\n\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('World', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n",
  "currentCode": "// Voicing Button - TS\n// Keywords: voicing, button\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\n// Import API to detect and pass paper markers\nimportScripts('paper.js');\n\n// Begin program in async\n(async () => {\n\n  //----------------------------------------------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n \n  // ===== //\n  // Called when the program is detected. Creates the button, adds it to the scene, and stores it on the \"scratchpad\"\n  // so that it can be removed later when the program is removed. \n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const voicingNameResponse = 'Push me!';\n    const voicingObjectResponse = 'Hello World.' \n    const voicingHintResponse = 'Push me to introduce me to the world.';\n\n    let pushCounter = 0;\n    const voicingButton = new phet.sun.TextPushButton( voicingNameResponse, {\n\n      // increment pushCounter, use it to update the context response and then speak Voicing responses.\n      listener: () => {\n        pushCounter++;\n        voicingButton.voicingContextResponse = `You pushed me ${pushCounter} ${pushCounter > 1 ? 'times' : 'time'}.`;\n\n        // Voice the object and context responses when you press the button (notice we are clearing the name and hint response)\n        voicingButton.voicingSpeakFullResponse( {\n          nameResponse: null,\n          hintResponse: null\n        } );\n      },\n\n      // assign Voicing responses to the button\n      voicingNameResponse: voicingNameResponse,\n      // voicingObjectResponse: voicingObjectResponse,\n      voicingHintResponse: voicingHintResponse\n    } );\n\n    // positioning\n    voicingButton.top = 300;\n    voicingButton.right = 300;\n\n    // Add it to the Display\n    sharedData.scene.addChild( voicingButton );\n\n    // assign it to the scratchpad for removal later\n    scratchpad.voicingButton = voicingButton;\n  };\n\n  // ===== //\n  // Called whenever the paper moves. Updates position in the display.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    console.log( `onProgramChangedPosition called for ppn ${paperProgramNumber}`);\n\n    if ( scratchpad.voicingButton ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.voicingButton.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.voicingButton.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  // ===== //\n  // Called whenever the paper is no longer detected. Removes the button and cleans up assignments.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    console.log( `onProgramRemoved called for ppn ${paperProgramNumber}`);\n    if ( scratchpad.voicingButton ){\n      sharedData.scene.removeChild( scratchpad.voicingButton );\n      scratchpad.voicingButton = null;\n    }\n    else{\n      alert( 'Error: voicingButton node not found in scratchpad data.' );\n    }\n  };\n   // ===== //\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    program: null,\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n  // END BOARD CODE // \n\n  //----------------------------------------------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------------------------------------------\n\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('World', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ts-tests.903.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ts-tests/programs/903/debugInfo",
  "claimUrl": "/api/spaces/ts-tests/programs/903/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
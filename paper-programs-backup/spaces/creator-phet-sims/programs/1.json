{
  "number": 1,
  "originalCode": "// Vertex A\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const vertexA = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexA', vertexA );\n    \n\n      const vertexABounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'vertexABounds', vertexABounds );\n    \n\n\n      // Create a shape with kite.\n      const vertexARectShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const vertexARectPath = new phet.scenery.Path( vertexARectShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ) : 0.5,\n        centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height) : 0.5,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( vertexARectPath );\n      scratchpad.vertexARectPath = vertexARectPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.vertexARectPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'vertexABounds' ], ( vertexABounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const vertexARectShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.vertexARectPath.setShape( vertexARectShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.vertexARectPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ) : 0.5,\n          centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height) : 0.5,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        vertexARectPath.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        vertexARectPath.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        vertexARectPath.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        vertexARectPath.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        vertexARectPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        vertexARectPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        vertexARectPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        vertexARectPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        vertexARectPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        vertexARectPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const vertexARectPathViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( vertexARectPath.localBounds.width || 1 ) / ( vertexARectPath.localBounds.height || 1 );\n\n        const scaleX = vertexARectPathViewBounds.width / ( vertexARectPath.localBounds.width || 1 );\n        const scaleY = vertexARectPathViewBounds.height / ( vertexARectPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          vertexARectPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          vertexARectPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        vertexARectPath.center = vertexARectPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          vertexARectPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          vertexARectPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          vertexARectPath.fill = color;\n        };\n        \n        // for a line - Beware that the x/y variables are declared via the ShapeCodeFunctions!\n        const setX1 = ( newX1 ) => {\n          vertexARect_x1 = phet.paperLand.utils.paperToDisplayX( newX1, sharedData.displaySize.width );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          vertexARect_y1 = phet.paperLand.utils.paperToDisplayY( newY1, sharedData.displaySize.height );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          vertexARect_x2 = phet.paperLand.utils.paperToDisplayX( newX2, sharedData.displaySize.width );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          vertexARect_y2 = phet.paperLand.utils.paperToDisplayY( newY2, sharedData.displaySize.height );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          vertexARectPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToDisplayX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          vertexARectPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          vertexARectPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds(vertexABounds);\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexA' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexABounds' );\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.vertexARectPath );\n      delete scratchpad.vertexARectPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'vertexABounds' ], scratchpad.vertexARectPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.vertexARectPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty8 = phet.paperLand.getModelComponent( 'vertexA' );\n    if ( modelProperty8 ) {\n      modelProperty8.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n\n    const modelProperty9 = phet.paperLand.getModelComponent( 'vertexABounds' );\n    if ( modelProperty9 ) {\n      modelProperty9.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Vertex A', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Vertex A\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const vertexA = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexA', vertexA );\n    \n\n      const vertexABounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'vertexABounds', vertexABounds );\n    \n\n\n      // Create a shape with kite.\n      const vertexARectShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const vertexARectPath = new phet.scenery.Path( vertexARectShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ) : 0.5,\n        centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height) : 0.5,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( vertexARectPath );\n      scratchpad.vertexARectPath = vertexARectPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.vertexARectPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'vertexABounds' ], ( vertexABounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const vertexARectShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.vertexARectPath.setShape( vertexARectShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.vertexARectPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayX( 0.5, sharedData.displaySize.width ) : 0.5,\n          centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToDisplayY( 0.5, sharedData.displaySize.height) : 0.5,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        vertexARectPath.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        vertexARectPath.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        vertexARectPath.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        vertexARectPath.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        vertexARectPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        vertexARectPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        vertexARectPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        vertexARectPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        vertexARectPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        vertexARectPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const vertexARectPathViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( vertexARectPath.localBounds.width || 1 ) / ( vertexARectPath.localBounds.height || 1 );\n\n        const scaleX = vertexARectPathViewBounds.width / ( vertexARectPath.localBounds.width || 1 );\n        const scaleY = vertexARectPathViewBounds.height / ( vertexARectPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          vertexARectPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          vertexARectPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        vertexARectPath.center = vertexARectPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          vertexARectPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          vertexARectPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          vertexARectPath.fill = color;\n        };\n        \n        // for a line - Beware that the x/y variables are declared via the ShapeCodeFunctions!\n        const setX1 = ( newX1 ) => {\n          vertexARect_x1 = phet.paperLand.utils.paperToDisplayX( newX1, sharedData.displaySize.width );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          vertexARect_y1 = phet.paperLand.utils.paperToDisplayY( newY1, sharedData.displaySize.height );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          vertexARect_x2 = phet.paperLand.utils.paperToDisplayX( newX2, sharedData.displaySize.width );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          vertexARect_y2 = phet.paperLand.utils.paperToDisplayY( newY2, sharedData.displaySize.height );\n          vertexARectPath.shape = phet.kite.Shape.lineSegment( vertexARect_x1, vertexARect_y1, vertexARect_x2, vertexARect_y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          vertexARectPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToDisplayX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          vertexARectPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          vertexARectPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds(vertexABounds);\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexA' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexABounds' );\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.vertexARectPath );\n      delete scratchpad.vertexARectPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'vertexABounds' ], scratchpad.vertexARectPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.vertexARectPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty8 = phet.paperLand.getModelComponent( 'vertexA' );\n    if ( modelProperty8 ) {\n      modelProperty8.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n\n    const modelProperty9 = phet.paperLand.getModelComponent( 'vertexABounds' );\n    if ( modelProperty9 ) {\n      modelProperty9.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Vertex A', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-phet-sims.1.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-phet-sims/programs/1/debugInfo",
  "claimUrl": "/api/spaces/creator-phet-sims/programs/1/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
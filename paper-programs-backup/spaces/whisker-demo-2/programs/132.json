{
  "number": 132,
  "originalCode": "// Whiskers - Share Data A\n// Keywords: \n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: \n// Program Description: This is a light. When connected to the source, it will light up.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.setProgramData( paperProgramNumber, 'myData', { value: 'A' } );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  const onProgramAdjacent = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n  };\n\n  const onProgramSeparated = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} detached from ${programNumber} ${direction}` );\n  };\n\n  // Called when the program moves.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Whisker A', canvas.width / 2, canvas.height / 2 - 10);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n})();\n\n\n\n\n",
  "currentCode": "// Whiskers - Share Data A\n// Keywords: \n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: \n// Program Description: This is a light. When connected to the source, it will light up.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.setProgramData( paperProgramNumber, 'myData', { value: 'A' } );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  const onProgramAdjacent = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n  };\n\n  const onProgramSeparated = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} detached from ${programNumber} ${direction}` );\n  };\n\n  // Called when the program moves.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Whisker A', canvas.width / 2, canvas.height / 2 - 10);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n})();\n\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.whisker-demo-2.132.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/whisker-demo-2/programs/132/debugInfo",
  "claimUrl": "/api/spaces/whisker-demo-2/programs/132/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 519,
  "originalCode": "// Quad (All Vertices)\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const vertexACombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexACombined', vertexACombined );\n    \n\n      const vertexBCombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexBCombined', vertexBCombined );\n    \n\n      const vertexCCombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexCCombined', vertexCCombined );\n    \n\n      const vertexDCombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexDCombined', vertexDCombined );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexACombined' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexBCombined' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexCCombined' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexDCombined' );\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    // Since all of these components are created by this program,\n// they are guaranteed to be available.\nconst vA = phet.paperLand.getModelComponent( 'vertexACombined' );\nconst vB = phet.paperLand.getModelComponent( 'vertexBCombined' );\nconst vC = phet.paperLand.getModelComponent( 'vertexCCombined' );\nconst vD = phet.paperLand.getModelComponent( 'vertexDCombined' );\n\n// We can use Vector2.fromStateObject go easily convert from\n// paper programs object literal to dot.Vector2 instance.\n// Note that paper programs points order just happens to match\n// Quadrilateral order.\nvA.value = phet.dot.Vector2.fromStateObject( points[ 0 ] );\nvB.value = phet.dot.Vector2.fromStateObject( points[ 1 ] );\nvC.value = phet.dot.Vector2.fromStateObject( points[ 2 ] );\nvD.value = phet.dot.Vector2.fromStateObject( points[ 3 ] );\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Quad (All Vertices)', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Quad (All Vertices)\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const vertexACombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexACombined', vertexACombined );\n    \n\n      const vertexBCombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexBCombined', vertexBCombined );\n    \n\n      const vertexCCombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexCCombined', vertexCCombined );\n    \n\n      const vertexDCombined = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'vertexDCombined', vertexDCombined );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexACombined' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexBCombined' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexCCombined' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'vertexDCombined' );\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    // Since all of these components are created by this program,\n// they are guaranteed to be available.\nconst vA = phet.paperLand.getModelComponent( 'vertexACombined' );\nconst vB = phet.paperLand.getModelComponent( 'vertexBCombined' );\nconst vC = phet.paperLand.getModelComponent( 'vertexCCombined' );\nconst vD = phet.paperLand.getModelComponent( 'vertexDCombined' );\n\n// We can use Vector2.fromStateObject go easily convert from\n// paper programs object literal to dot.Vector2 instance.\n// Note that paper programs points order just happens to match\n// Quadrilateral order.\nvA.value = phet.dot.Vector2.fromStateObject( points[ 0 ] );\nvB.value = phet.dot.Vector2.fromStateObject( points[ 1 ] );\nvC.value = phet.dot.Vector2.fromStateObject( points[ 2 ] );\nvD.value = phet.dot.Vector2.fromStateObject( points[ 3 ] );\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Quad (All Vertices)', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.jg-tests.519.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/jg-tests/programs/519/debugInfo",
  "claimUrl": "/api/spaces/jg-tests/programs/519/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
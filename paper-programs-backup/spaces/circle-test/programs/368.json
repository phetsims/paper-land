{
  "number": 368,
  "originalCode": "// PointC\n// Keywords: point, C\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Example program with functioning Board and Projector code!\n// !!!UPDATE ME WITH A BETTER BOARD EXAMPLE!!!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // The position of this \"point\" in the space\n    phet.paperLand.addModelComponent( 'pointCProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n\n    // Representation of the angle between other points in this space\n    phet.paperLand.addModelComponent( 'angleProperty', new phet.axon.Property( 0 ) );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    const model = sharedData.model;\n\n    // The center of this program in camera space\n    const displayCenter = new phet.dot.Vector2(\n      ( positionPoints[ 0 ].x + ( positionPoints[ 2 ].x - positionPoints[ 0 ].x ) / 2 ) * sharedData.displaySize.width,\n      ( 1 - ( positionPoints[ 0 ].y + ( positionPoints[ 2 ].y - positionPoints[ 0 ].y ) / 2 ) ) * sharedData.displaySize.height,\n    )\n\n    if ( model.has( 'pointCProperty' ) ) {\n      model.get( 'pointCProperty' ).value = displayCenter;\n    }\n\n\n    if ( model.has( 'pointAProperty' ) && model.has( 'pointBProperty' ) ) {\n        const pointAPosition = model.get( 'pointAProperty' ).value;\n        const pointBPosition = model.get( 'pointBProperty' ).value;\n        const pointCPosition = model.get( 'pointCProperty' ).value;\n\n        const a = pointCPosition.distance( pointBPosition );\n        const b = pointCPosition.distance( pointAPosition );\n        const c = pointBPosition.distance( pointAPosition );\n\n        // law of cosines\n        const angle = Math.acos( (b * b + a * a - c * c) / ( 2 * b * a ) );\n        model.get( 'angleProperty' ).value = angle;\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n      phet.paperLand.removeModelComponent( 'pointCProperty' );\n      phet.paperLand.removeModelComponent( 'angleProperty' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Point', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('C', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n\n",
  "currentCode": "// PointC\n// Keywords: point, C\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Example program with functioning Board and Projector code!\n// !!!UPDATE ME WITH A BETTER BOARD EXAMPLE!!!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // The position of this \"point\" in the space\n    phet.paperLand.addModelComponent( 'pointCProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n\n    // Representation of the angle between other points in this space\n    phet.paperLand.addModelComponent( 'angleProperty', new phet.axon.Property( 0 ) );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    const model = sharedData.model;\n\n    // The center of this program in camera space\n    const displayCenter = new phet.dot.Vector2(\n      ( positionPoints[ 0 ].x + ( positionPoints[ 2 ].x - positionPoints[ 0 ].x ) / 2 ) * sharedData.displaySize.width,\n      ( 1 - ( positionPoints[ 0 ].y + ( positionPoints[ 2 ].y - positionPoints[ 0 ].y ) / 2 ) ) * sharedData.displaySize.height,\n    )\n\n    if ( model.has( 'pointCProperty' ) ) {\n      model.get( 'pointCProperty' ).value = displayCenter;\n    }\n\n\n    if ( model.has( 'pointAProperty' ) && model.has( 'pointBProperty' ) ) {\n        const pointAPosition = model.get( 'pointAProperty' ).value;\n        const pointBPosition = model.get( 'pointBProperty' ).value;\n        const pointCPosition = model.get( 'pointCProperty' ).value;\n\n        const a = pointCPosition.distance( pointBPosition );\n        const b = pointCPosition.distance( pointAPosition );\n        const c = pointBPosition.distance( pointAPosition );\n\n        // law of cosines\n        const angle = Math.acos( (b * b + a * a - c * c) / ( 2 * b * a ) );\n        model.get( 'angleProperty' ).value = angle;\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n      phet.paperLand.removeModelComponent( 'pointCProperty' );\n      phet.paperLand.removeModelComponent( 'angleProperty' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Point', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('C', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.circle-test.368.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/circle-test/programs/368/debugInfo",
  "claimUrl": "/api/spaces/circle-test/programs/368/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
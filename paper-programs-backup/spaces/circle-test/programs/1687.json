{
  "number": 1687,
  "originalCode": "// Angle sound\n// Keywords: angle, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies) \n// Recommended Programs: circle prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const angleSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    phet.tambo.soundManager.addSoundGenerator( angleSound );\n    scratchpad.angleSound = angleSound;\n\n    const soundOnWhenIdleTime = 1; // in seconds\n    let stopSoundTimeout = null;\n\n    const soundListener = ( newAngle ) => {\n      if ( !angleSound.isPlaying ){\n        angleSound.play();\n      }\n\n      // 100 is the maximum of the angle range - to be more robust, add a direct dependency on the\n      // angleProperty with addModelObserver instead of using addModelPropertyLink. Then in handleAttach\n      // you would have a reference to the modelProperty and its range.\n      newAngle = Math.max( newAngle, 0.1 );\n      const playbackRate = (1 / ( newAngle / 3.14 )) / 5;\n      console.log( playbackRate );\n      angleSound.setPlaybackRate( playbackRate );\n\n      // Set a timer to turn off the sound when the angle is no longer changing.\n      if ( stopSoundTimeout ){\n        window.clearTimeout( stopSoundTimeout );\n      }\n      stopSoundTimeout = window.setTimeout( () => {\n        angleSound.stop();\n      }, soundOnWhenIdleTime * 1000 );\n    };\n\n    scratchpad.angleListenerId = phet.paperLand.addModelPropertyLink( 'angleProperty', soundListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the angle\n    // based on positionPoints instead of angleProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // stop observing the angleProperty\n    phet.paperLand.removeModelPropertyLink( 'angleProperty', scratchpad.angleListenerId );\n    delete scratchpad.angleListenerId;\n\n    // stop sounds and remove\n    scratchpad.angleSound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.angleSound );\n    delete scratchpad.angleSound;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Circle', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// Angle sound\n// Keywords: angle, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies) \n// Recommended Programs: circle prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const angleSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    phet.tambo.soundManager.addSoundGenerator( angleSound );\n    scratchpad.angleSound = angleSound;\n\n    const soundOnWhenIdleTime = 1; // in seconds\n    let stopSoundTimeout = null;\n\n    const soundListener = ( newAngle ) => {\n      if ( !angleSound.isPlaying ){\n        angleSound.play();\n      }\n\n      // 100 is the maximum of the angle range - to be more robust, add a direct dependency on the\n      // angleProperty with addModelObserver instead of using addModelPropertyLink. Then in handleAttach\n      // you would have a reference to the modelProperty and its range.\n      newAngle = Math.max( newAngle, 0.1 );\n      const playbackRate = (1 / ( newAngle / 3.14 )) / 5;\n      console.log( playbackRate );\n      angleSound.setPlaybackRate( playbackRate );\n\n      // Set a timer to turn off the sound when the angle is no longer changing.\n      if ( stopSoundTimeout ){\n        window.clearTimeout( stopSoundTimeout );\n      }\n      stopSoundTimeout = window.setTimeout( () => {\n        angleSound.stop();\n      }, soundOnWhenIdleTime * 1000 );\n    };\n\n    scratchpad.angleListenerId = phet.paperLand.addModelPropertyLink( 'angleProperty', soundListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the angle\n    // based on positionPoints instead of angleProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // stop observing the angleProperty\n    phet.paperLand.removeModelPropertyLink( 'angleProperty', scratchpad.angleListenerId );\n    delete scratchpad.angleListenerId;\n\n    // stop sounds and remove\n    scratchpad.angleSound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.angleSound );\n    delete scratchpad.angleSound;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Circle', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.circle-test.1687.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/circle-test/programs/1687/debugInfo",
  "claimUrl": "/api/spaces/circle-test/programs/1687/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 2007,
  "originalCode": "// Altitude: Image Y-Position mapped to Altitude - Copy\n// Keywords: altitude, image, asset, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //----------------------------------------------------------------------\n    // Template Variables\n    //----------------------------------------------------------------------\n    const propertyName = 'altitudeProperty';\n\n    const imageWidthInPixels = 50; // Must be positive.\n\n    const imageFile = 'girlInAir.png';\n    // const imageFile = 'lunarLander.png';\n    // const imageFile = 'birdInAir.png';\n\n    //----------------------------------------------------------------------\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', `media/images/${imageFile}` );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      minWidth: imageWidthInPixels,\n      maxWidth: imageWidthInPixels\n    } );\n\n    sharedData.scene.addChild( imageNode );\n\n    // Adds listeners to the model component when the program is added or when the model\n    // Property is added.\n    const addComponentListeners = component => {\n\n      // This the function to implement to watch the changing Property.\n      const componentListener = value => {\n        const viewAltitude =  sharedData.displaySize.height * ( 1 - value / component.range.max );\n        imageNode.centerY = viewAltitude;\n        imageNode.centerX = sharedData.displaySize.width / 2;\n      }\n\n      component.link( componentListener );\n      scratchpad[ `componentListener${paperProgramNumber}` ] = componentListener;\n    };\n\n    // removes \n    const removeComponentListeners = ( component ) => {\n      component.unlink( scratchpad[ `componentListener${paperProgramNumber}` ] );\n      delete scratchpad[ `componentListener${paperProgramNumber}` ];\n    };\n\n    if ( model.has( propertyName ) ) {\n\n      // Property exists, add view listeners to it\n      addComponentListeners( model.get( propertyName ) );\n    }\n    const modelAddedListener = ( componentName, component ) => {\n\n      // Property was added after this one, add listeners to it\n      if ( componentName === propertyName ) {\n        addComponentListeners( component );\n      }\n    };\n    phet.paperLand.modelComponentAddedEmitter.addListener( modelAddedListener );\n\n    const modelRemovedListener = ( componentName, component ) => {\n\n      // Property was removed before this one, remove listeners\n      if ( componentName === propertyName ) {\n        removeComponentListeners( component );\n      }\n    };\n    phet.paperLand.modelComponentRemovedEmitter.addListener( modelRemovedListener );\n\n    // assign components to the scratchpad so that they can be removed later\n    scratchpad[ `modelAdded${paperProgramNumber}` ] = modelAddedListener;\n    scratchpad[ `modelRemoved${paperProgramNumber}` ] = modelRemovedListener;\n    scratchpad[ `removeComponentListeners${paperProgramNumber}`] = removeComponentListeners;\n    scratchpad[ `propertyName${paperProgramNumber}` ] = propertyName;\n    scratchpad[ `imageNode${paperProgramNumber}`] = imageNode;\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    const propertyName = scratchpad[ `propertyName${paperProgramNumber}` ];\n    if ( model.has( propertyName ) ) {\n      scratchpad[ `removeComponentListeners${paperProgramNumber}`]( model.get( propertyName ) );\n    }\n\n    sharedData.scene.removeChild( scratchpad[ `imageNode${paperProgramNumber}` ] );\n\n    delete scratchpad[ `modelAdded${paperProgramNumber}` ];\n    delete scratchpad[ `modelRemoved${paperProgramNumber}` ];\n    delete scratchpad[ `removeComponentListeners${paperProgramNumber}`];\n    delete scratchpad[ `propertyName${paperProgramNumber}` ];\n    delete scratchpad[ `imageNode${paperProgramNumber}` ];\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// Altitude: Image Y-Position mapped to Altitude - Copy\n// Keywords: altitude, image, asset, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //----------------------------------------------------------------------\n    // Template Variables\n    //----------------------------------------------------------------------\n    const propertyName = 'altitudeProperty';\n\n    const imageWidthInPixels = 50; // Must be positive.\n\n    const imageFile = 'girlInAir.png';\n    // const imageFile = 'lunarLander.png';\n    // const imageFile = 'birdInAir.png';\n\n    //----------------------------------------------------------------------\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', `media/images/${imageFile}` );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      minWidth: imageWidthInPixels,\n      maxWidth: imageWidthInPixels\n    } );\n\n    sharedData.scene.addChild( imageNode );\n\n    // Adds listeners to the model component when the program is added or when the model\n    // Property is added.\n    const addComponentListeners = component => {\n\n      // This the function to implement to watch the changing Property.\n      const componentListener = value => {\n        const viewAltitude =  sharedData.displaySize.height * ( 1 - value / component.range.max );\n        imageNode.centerY = viewAltitude;\n        imageNode.centerX = sharedData.displaySize.width / 2;\n      }\n\n      component.link( componentListener );\n      scratchpad[ `componentListener${paperProgramNumber}` ] = componentListener;\n    };\n\n    // removes \n    const removeComponentListeners = ( component ) => {\n      component.unlink( scratchpad[ `componentListener${paperProgramNumber}` ] );\n      delete scratchpad[ `componentListener${paperProgramNumber}` ];\n    };\n\n    if ( model.has( propertyName ) ) {\n\n      // Property exists, add view listeners to it\n      addComponentListeners( model.get( propertyName ) );\n    }\n    const modelAddedListener = ( componentName, component ) => {\n\n      // Property was added after this one, add listeners to it\n      if ( componentName === propertyName ) {\n        addComponentListeners( component );\n      }\n    };\n    phet.paperLand.modelComponentAddedEmitter.addListener( modelAddedListener );\n\n    const modelRemovedListener = ( componentName, component ) => {\n\n      // Property was removed before this one, remove listeners\n      if ( componentName === propertyName ) {\n        removeComponentListeners( component );\n      }\n    };\n    phet.paperLand.modelComponentRemovedEmitter.addListener( modelRemovedListener );\n\n    // assign components to the scratchpad so that they can be removed later\n    scratchpad[ `modelAdded${paperProgramNumber}` ] = modelAddedListener;\n    scratchpad[ `modelRemoved${paperProgramNumber}` ] = modelRemovedListener;\n    scratchpad[ `removeComponentListeners${paperProgramNumber}`] = removeComponentListeners;\n    scratchpad[ `propertyName${paperProgramNumber}` ] = propertyName;\n    scratchpad[ `imageNode${paperProgramNumber}`] = imageNode;\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    const propertyName = scratchpad[ `propertyName${paperProgramNumber}` ];\n    if ( model.has( propertyName ) ) {\n      scratchpad[ `removeComponentListeners${paperProgramNumber}`]( model.get( propertyName ) );\n    }\n\n    sharedData.scene.removeChild( scratchpad[ `imageNode${paperProgramNumber}` ] );\n\n    delete scratchpad[ `modelAdded${paperProgramNumber}` ];\n    delete scratchpad[ `modelRemoved${paperProgramNumber}` ];\n    delete scratchpad[ `removeComponentListeners${paperProgramNumber}`];\n    delete scratchpad[ `propertyName${paperProgramNumber}` ];\n    delete scratchpad[ `imageNode${paperProgramNumber}` ];\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lv-testSpace.2007.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lv-testSpace/programs/2007/debugInfo",
  "claimUrl": "/api/spaces/lv-testSpace/programs/2007/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
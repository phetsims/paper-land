{
  "number": 1272,
  "originalCode": "// Altitude: Change Altitude with Paper Position - Copy\n// Keywords: altitude, model, positionPoints\n// ------------------------------- //\n// Required Programs (dependencies): Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description: Sets the Altitude property value set in Altitude Model by\n// the center position of this paper.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed. Create new components here.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Nothing to create! This program controls an existing model Property.\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    if ( model.altitudeProperty ) {\n      const range = model.altitudeProperty.range;\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      // Graphics coordinate system has 0 at top so subtract from 1 so that 0 is at the bottom.\n      let paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n      const newValue = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( newValue, range.max ), range.min );\n      model.altitudeProperty.value = constrainedValue;\n    }\n  };\n\n  // Called when the program is changed or no longer detected. Destroy components here.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Nothing to destroy! This program is only a controller.\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "currentCode": "// Altitude: Change Altitude with Paper Position - Copy\n// Keywords: altitude, model, positionPoints\n// ------------------------------- //\n// Required Programs (dependencies): Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description: Sets the Altitude property value set in Altitude Model by\n// the center position of this paper.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed. Create new components here.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Nothing to create! This program controls an existing model Property.\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    if ( model.altitudeProperty ) {\n      const range = model.altitudeProperty.range;\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      // Graphics coordinate system has 0 at top so subtract from 1 so that 0 is at the bottom.\n      let paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n      const newValue = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( newValue, range.max ), range.min );\n      model.altitudeProperty.value = constrainedValue;\n    }\n  };\n\n  // Called when the program is changed or no longer detected. Destroy components here.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Nothing to destroy! This program is only a controller.\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lv-testSpace.1272.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lv-testSpace/programs/1272/debugInfo",
  "claimUrl": "/api/spaces/lv-testSpace/programs/1272/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
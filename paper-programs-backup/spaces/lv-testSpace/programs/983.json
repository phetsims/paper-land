{
  "number": 983,
  "originalCode": "// Altitude: Continuous Sound for Altitude Magnitude - Copy\n// Keywords: altitude, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const altitudeSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Adds a listener to the altitudeProperty - called when this program is added OR\n    // when the altitudeProperty is added to the global model.\n    const addAltitudeChangedListener = ( altitudeProperty ) => {\n\n      phet.tambo.soundManager.addSoundGenerator( altitudeSound );\n      scratchpad[ `altitudeSound${paperProgramNumber}`] = altitudeSound;\n\n      const soundOnWhenIdleTime = 1; // in seconds\n      let stopSoundTimeout = null;\n\n      scratchpad[ `soundListener${paperProgramNumber}` ] = ( newAltitude ) => {\n\n        if ( !altitudeSound.isPlaying ){\n          altitudeSound.play();\n        }\n        altitudeSound.setPlaybackRate( 0.5 + newAltitude / altitudeProperty.range.max * 1.5 );\n\n        // Set a timer to turn off the sound when the altitude is no longer changing.\n        if ( stopSoundTimeout ){\n          window.clearTimeout( stopSoundTimeout );\n        }\n        stopSoundTimeout = window.setTimeout( () => {\n          altitudeSound.stop();\n        }, soundOnWhenIdleTime * 1000 );\n      };\n      altitudeProperty.link( scratchpad[ `soundListener${paperProgramNumber}`] );\n    }\n\n    if ( model.altitudeProperty ) {\n\n      // altitudeProperty was already present when this program was added, add listeners\n      addAltitudeChangedListener( model.altitudeProperty );\n    }\n\n    // add to the scratchpad so that this listener can be removed when this program is removed\n    scratchpad[ `modelAddedListener${paperProgramNumber}`] = ( componentName, component ) => {\n      if ( componentName === 'altitudeProperty' ) {\n \n        // altitudeProperty was added AFTER this program was added, add listeners\n        addAltitudeChangedListener( component );\n      }\n    };\n    phet.paperLand.modelComponentAddedEmitter.addListener( scratchpad[ `modelAddedListener${paperProgramNumber}`] );\n\n    scratchpad[ `modelRemovedListener${paperProgramNumber}`] = ( componentName, component ) => {\n      if ( componentName === 'altitudeProperty' ) {\n\n        // altitudeProperty was removed after this program was added, remove listeners\n        component.unlink( scratchpad[ `soundListener${paperProgramNumber}`] );\n        delete scratchpad[ `soundListener${paperProgramNumber}`];\n\n        const altitudeSound = scratchpad[ `altitudeSound${paperProgramNumber}` ];\n        altitudeSound.stop();\n        phet.tambo.soundManager.removeSoundGenerator( altitudeSound );\n        delete scratchpad[ `altitudeSound${paperProgramNumber}`];\n      }\n    };\n    phet.paperLand.modelComponentRemovedEmitter.addListener( scratchpad[ `modelRemovedListener${paperProgramNumber}`] );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.modelComponentAddedEmitter.removeListener( scratchpad[ `modelAddedListener${paperProgramNumber}`] );\n    phet.paperLand.modelComponentRemovedEmitter.removeListener( scratchpad[ `modelRemovedListener${paperProgramNumber}`] );\n\n    if ( scratchpad[ `altitudeSound${paperProgramNumber}`] ) {\n\n      sharedData.model.get('altitudeProperty').unlink( scratchpad[ `soundListener${paperProgramNumber}`] );\n      delete scratchpad[ `soundListener${paperProgramNumber}`];\n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad[ `altitudeSound${paperProgramNumber}`] );\n      delete scratchpad[ `altitudeSound${paperProgramNumber}`];\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Altitude: Continuous Sound for Altitude Magnitude - Copy\n// Keywords: altitude, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const altitudeSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Adds a listener to the altitudeProperty - called when this program is added OR\n    // when the altitudeProperty is added to the global model.\n    const addAltitudeChangedListener = ( altitudeProperty ) => {\n\n      phet.tambo.soundManager.addSoundGenerator( altitudeSound );\n      scratchpad[ `altitudeSound${paperProgramNumber}`] = altitudeSound;\n\n      const soundOnWhenIdleTime = 1; // in seconds\n      let stopSoundTimeout = null;\n\n      scratchpad[ `soundListener${paperProgramNumber}` ] = ( newAltitude ) => {\n\n        if ( !altitudeSound.isPlaying ){\n          altitudeSound.play();\n        }\n        altitudeSound.setPlaybackRate( 0.5 + newAltitude / altitudeProperty.range.max * 1.5 );\n\n        // Set a timer to turn off the sound when the altitude is no longer changing.\n        if ( stopSoundTimeout ){\n          window.clearTimeout( stopSoundTimeout );\n        }\n        stopSoundTimeout = window.setTimeout( () => {\n          altitudeSound.stop();\n        }, soundOnWhenIdleTime * 1000 );\n      };\n      altitudeProperty.link( scratchpad[ `soundListener${paperProgramNumber}`] );\n    }\n\n    if ( model.altitudeProperty ) {\n\n      // altitudeProperty was already present when this program was added, add listeners\n      addAltitudeChangedListener( model.altitudeProperty );\n    }\n\n    // add to the scratchpad so that this listener can be removed when this program is removed\n    scratchpad[ `modelAddedListener${paperProgramNumber}`] = ( componentName, component ) => {\n      if ( componentName === 'altitudeProperty' ) {\n \n        // altitudeProperty was added AFTER this program was added, add listeners\n        addAltitudeChangedListener( component );\n      }\n    };\n    phet.paperLand.modelComponentAddedEmitter.addListener( scratchpad[ `modelAddedListener${paperProgramNumber}`] );\n\n    scratchpad[ `modelRemovedListener${paperProgramNumber}`] = ( componentName, component ) => {\n      if ( componentName === 'altitudeProperty' ) {\n\n        // altitudeProperty was removed after this program was added, remove listeners\n        component.unlink( scratchpad[ `soundListener${paperProgramNumber}`] );\n        delete scratchpad[ `soundListener${paperProgramNumber}`];\n\n        const altitudeSound = scratchpad[ `altitudeSound${paperProgramNumber}` ];\n        altitudeSound.stop();\n        phet.tambo.soundManager.removeSoundGenerator( altitudeSound );\n        delete scratchpad[ `altitudeSound${paperProgramNumber}`];\n      }\n    };\n    phet.paperLand.modelComponentRemovedEmitter.addListener( scratchpad[ `modelRemovedListener${paperProgramNumber}`] );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.modelComponentAddedEmitter.removeListener( scratchpad[ `modelAddedListener${paperProgramNumber}`] );\n    phet.paperLand.modelComponentRemovedEmitter.removeListener( scratchpad[ `modelRemovedListener${paperProgramNumber}`] );\n\n    if ( scratchpad[ `altitudeSound${paperProgramNumber}`] ) {\n\n      sharedData.model.get('altitudeProperty').unlink( scratchpad[ `soundListener${paperProgramNumber}`] );\n      delete scratchpad[ `soundListener${paperProgramNumber}`];\n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad[ `altitudeSound${paperProgramNumber}`] );\n      delete scratchpad[ `altitudeSound${paperProgramNumber}`];\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lv-testSpace.983.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lv-testSpace/programs/983/debugInfo",
  "claimUrl": "/api/spaces/lv-testSpace/programs/983/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "programs": [
    {
      "number": 819,
      "title": "test2",
      "keywords": "",
      "description": "",
      "positionProperty": {
        "x": 110.3939208984375,
        "y": 116.61505057153272
      },
      "modelContainer": {
        "namedBooleanProperties": [],
        "namedVector2Properties": [
          {
            "name": "position",
            "propertyType": "Vector2Property",
            "defaultX": 0,
            "defaultY": 0
          }
        ],
        "namedNumberProperties": [],
        "namedEnumerationProperties": [],
        "namedDerivedProperties": []
      },
      "controllerContainer": {
        "vector2PropertyControllers": [],
        "booleanPropertyControllers": [],
        "numberPropertyControllers": [],
        "enumerationPropertyControllers": []
      },
      "viewContainer": {
        "soundViews": [
          {
            "name": "wallSound",
            "modelComponentNames": [
              "position"
            ],
            "controlFunctionString": "function playSoundWhenHitBoundary() {\n  // Get the dimensions of the boundary\n  const boundaryWidth = window.innerWidth;\n  const boundaryHeight = window.innerHeight;\n  \n  // Listen for the window resize event to update the boundary dimensions\n  window.addEventListener('resize', () => {\n    boundaryWidth = window.innerWidth;\n    boundaryHeight = window.innerHeight;\n  });\n  \n  // Listen for the window scroll event to check if the model hits the boundary\n  window.addEventListener('scroll', () => {\n    const modelOffsetLeft = window.scrollX;\n    const modelOffsetTop = window.scrollY;\n    \n    // Check if the model hits the left or right edge of the boundary\n    if (modelOffsetLeft < 0 || modelOffsetLeft > boundaryWidth) {\n      // Play the sound when the model hits the edge\n      play();\n    }\n    \n    // Check if the model hits the top or bottom edge of the boundary\n    if (modelOffsetTop < 0 || modelOffsetTop > boundaryHeight) {\n      // Play the sound when the model hits the edge\n      play();\n    }\n  });\n}\n\nplaySoundWhenHitBoundary();",
            "soundFileName": "quadShapeCollision.mp3",
            "loop": false
          }
        ],
        "descriptionViews": [],
        "textViews": [],
        "shapeViews": [
          {
            "name": "poly",
            "modelComponentNames": [
              "position"
            ],
            "controlFunctionString": "function changeColor() {\n  const HUE_RANGE = 360; // Define the maximum hue value\n\n  let hue = 0; // Initialize hue variable to 0\n\n  // Create an interval that executes a callback function every 100 milliseconds\n  setInterval(() => {\n    hue = (hue + 1) % HUE_RANGE; // Increment hue by 1 and ensure it stays within the defined range\n\n    const color = `hsl(${hue}, 100%, 50%)`; // Create an HSL color string using the current hue value\n    NONE_AVAILABLE(color); // Call the NONE_AVAILABLE function with the new color\n  }, 100);\n}",
            "defaultViewOptions": {
              "centerX": null,
              "centerY": null,
              "scale": 1,
              "rotation": 0,
              "opacity": 1,
              "visible": true
            },
            "defaultShapeOptions": {
              "shapeType": "polygon",
              "fill": "#007BFF",
              "stroke": "#001F3F",
              "lineWidth": 1,
              "rectWidth": 100,
              "rectHeight": 50,
              "circleRadius": 50,
              "ellipseRadiusX": 100,
              "ellipseRadiusY": 50,
              "lineStartX": 0,
              "lineStartY": 0,
              "lineEndX": 100,
              "lineEndY": 100,
              "triangleBaseWidth": 100,
              "triangleHeight": 100,
              "polygonPoints": [
                [
                  0,
                  0
                ],
                [
                  100,
                  0
                ],
                [
                  100,
                  100
                ],
                [
                  0,
                  100
                ]
              ]
            }
          }
        ],
        "backgroundViews": [],
        "imageViews": []
      },
      "listenerContainer": {
        "linkListeners": [],
        "animationListeners": [
          {
            "name": "bounceAnimation",
            "controlledPropertyNames": [
              "position"
            ],
            "controlFunctionString": "function changeColor() \n  const HUE_RANGE = 360; // Define the maximum hue value\n\n  let hue = 0; // Initialize hue variable to 0\n\n  // Create an interval that executes a callback function every 100 milliseconds\n  setInterval(() => {\n    hue = (hue + 1) % HUE_RANGE; // Increment hue by 1 and ensure it stays within the defined range\n\n    const color = `hsl(${hue}, 100%, 50%)`; // Create an HSL color string using the current hue value\n    NONE_AVAILABLE(color); // Call the NONE_AVAILABLE function with the new color\n  }, 100);\n\n"
          }
        ]
      },
      "customCodeContainer": {
        "onProgramAddedCode": "",
        "onProgramRemovedCode": "",
        "onProgramChangedPositionCode": "",
        "onProgramMarkersAddedCode": "",
        "onProgramMarkersRemovedCode": "",
        "onProgramMarkersChangedPositionCode": "",
        "onProgramAdjacentCode": "",
        "onProgramSeparatedCode": ""
      }
    }
  ]
}
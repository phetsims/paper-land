{
  "number": 394,
  "originalCode": "// Animated Image\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const position = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'position', position );\n    \n\n      const rotation = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 6.28 )\n      });\n      phet.paperLand.addModelComponent( 'rotation', rotation );\n    \n\n      // Create an image and add it to the view.\n      let imageImageElement = document.createElement( 'img' );\n      imageImageElement.src = 'media/images/frosted.png';\n      const imageImage = new phet.scenery.Image( imageImageElement );\n      \n      sharedData.scene.addChild( imageImage );\n      scratchpad.imageImage = imageImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.imageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position', 'rotation' ], ( position, rotation ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        imageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        imageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        imageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        imageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        imageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        imageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        imageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        imageImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        imageImage.rotation = rotation;\n      };\n\n        const setImage = imageName => {\n          let imageImageImageElement = document.createElement( 'img' );\n          imageImageImageElement.src = 'media/images/' + imageName;\n          imageImage.image = imageImageImageElement; \n        };\n      \n      \n        setRotation( rotation );\n\nsetCenterX( position.x );\nsetCenterY( position.y );\n      } );\n    \n\n      const playsoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/b-tone.mp3' );\n      const playsoundSoundClip = new phet.tambo.SoundClip( playsoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( playsoundSoundClip );\n      \n      let playsoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds\n      let playsoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n\n      // Play the sound when any dependencies change value.\n      scratchpad.playsoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position' ], ( position ) => {\n        // in a local scope, define the functions that the user can use to manipulate the sound\n        const setOutputLevel = ( level ) => {\n        \n          // As a safety measure, don't let the user set a level below zero and above 2.\n          const outputLevel = Math.max( 0, Math.min( 2, level ) );\n          playsoundSoundClip.outputLevel = outputLevel;\n        };\n        const setPlaybackRate = ( rate ) => {\n        \n          // As a safety measure, the playback rate cannot go below zero.\n          const playbackRate = Math.max( 0, rate );\n          playsoundSoundClip.setPlaybackRate( playbackRate );\n        };\n        \n        // a function the user can call to play the sound\n        const play = () => {\n        \n          // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n          // can only be played at a limited interval for safety.\n          if ( ( !playsoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - playsoundLastPlayTime > 0.25 ) {\n            playsoundSoundClip.play();\n            playsoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n            \n            // Set a timer to turn off the sound when the value stops changing.\n            if ( playsoundStopSoundTimeout ){\n              window.clearTimeout( playsoundStopSoundTimeout );\n            }\n            \n            // only stop if looping\n            if ( false ) {\n              playsoundStopSoundTimeout = window.setTimeout( () => {\n                playsoundSoundClip.stop();\n              }, 5000 );\n            }  \n          }\n        };\n        \n        const stop = () => {\n          // Set a timer to turn off the sound when the value stops changing.\n          if ( playsoundStopSoundTimeout ){\n            window.clearTimeout( playsoundStopSoundTimeout );\n          }\n          playsoundSoundClip.stop();\n        };\n        \n        if ( true ) {\n          play();\n        }\n      \n        if (position.x > window.innerWidth / 2) {\n    setPlaybackRate(1);\n    setOutputLevel(0.5);\n    play();\n} else {\n    setPlaybackRate(0.5);\n    setOutputLevel(0.2);\n    play();\n}\n            \n      } );       \n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.playsoundSoundClip = playsoundSoundClip;\n    \n\n      const animationAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'position', 'rotation' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const position = phet.paperLand.getModelComponent( 'position' ).value;\nconst rotation = phet.paperLand.getModelComponent( 'rotation' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPosition = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'position' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setRotation = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'rotation' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          // Move the position up and down over time with a sin function\nsetPosition( new phet.dot.Vector2( 0.5, Math.sin( elapsedTime ) * 0.25 + 0.4 ) );\n\n// Make the rotation change a bit so that it looks like it moves up and down\nsetRotation( Math.sin( elapsedTime ) * 0.2 );\n \n        }\n      };\n      scratchpad.animationAnimationListener = animationAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( animationAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'position' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rotation' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.imageImage );\n      delete scratchpad.imageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'position', 'rotation' ], scratchpad.imageImageMultilinkId );\n      delete scratchpad.imageImageMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.playsoundSoundClip );\n      delete scratchpad.playsoundSoundClip;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'position' ], scratchpad.playsoundSoundMultilinkId );\n      delete scratchpad.playsoundSoundMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.animationAnimationListener );\n      delete scratchpad.animationAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Animated Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Animated Image\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const position = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'position', position );\n    \n\n      const rotation = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 6.28 )\n      });\n      phet.paperLand.addModelComponent( 'rotation', rotation );\n    \n\n      // Create an image and add it to the view.\n      let imageImageElement = document.createElement( 'img' );\n      imageImageElement.src = 'media/images/frosted.png';\n      const imageImage = new phet.scenery.Image( imageImageElement );\n      \n      sharedData.scene.addChild( imageImage );\n      scratchpad.imageImage = imageImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.imageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position', 'rotation' ], ( position, rotation ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        imageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        imageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        imageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        imageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        imageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        imageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        imageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        imageImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        imageImage.rotation = rotation;\n      };\n\n        const setImage = imageName => {\n          let imageImageImageElement = document.createElement( 'img' );\n          imageImageImageElement.src = 'media/images/' + imageName;\n          imageImage.image = imageImageImageElement; \n        };\n      \n      \n        setRotation( rotation );\n\nsetCenterX( position.x );\nsetCenterY( position.y );\n      } );\n    \n\n      const playsoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/b-tone.mp3' );\n      const playsoundSoundClip = new phet.tambo.SoundClip( playsoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( playsoundSoundClip );\n      \n      let playsoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds\n      let playsoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n\n      // Play the sound when any dependencies change value.\n      scratchpad.playsoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position' ], ( position ) => {\n        // in a local scope, define the functions that the user can use to manipulate the sound\n        const setOutputLevel = ( level ) => {\n        \n          // As a safety measure, don't let the user set a level below zero and above 2.\n          const outputLevel = Math.max( 0, Math.min( 2, level ) );\n          playsoundSoundClip.outputLevel = outputLevel;\n        };\n        const setPlaybackRate = ( rate ) => {\n        \n          // As a safety measure, the playback rate cannot go below zero.\n          const playbackRate = Math.max( 0, rate );\n          playsoundSoundClip.setPlaybackRate( playbackRate );\n        };\n        \n        // a function the user can call to play the sound\n        const play = () => {\n        \n          // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n          // can only be played at a limited interval for safety.\n          if ( ( !playsoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - playsoundLastPlayTime > 0.25 ) {\n            playsoundSoundClip.play();\n            playsoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n            \n            // Set a timer to turn off the sound when the value stops changing.\n            if ( playsoundStopSoundTimeout ){\n              window.clearTimeout( playsoundStopSoundTimeout );\n            }\n            \n            // only stop if looping\n            if ( false ) {\n              playsoundStopSoundTimeout = window.setTimeout( () => {\n                playsoundSoundClip.stop();\n              }, 5000 );\n            }  \n          }\n        };\n        \n        const stop = () => {\n          // Set a timer to turn off the sound when the value stops changing.\n          if ( playsoundStopSoundTimeout ){\n            window.clearTimeout( playsoundStopSoundTimeout );\n          }\n          playsoundSoundClip.stop();\n        };\n        \n        if ( true ) {\n          play();\n        }\n      \n        if (position.x > window.innerWidth / 2) {\n    setPlaybackRate(1);\n    setOutputLevel(0.5);\n    play();\n} else {\n    setPlaybackRate(0.5);\n    setOutputLevel(0.2);\n    play();\n}\n            \n      } );       \n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.playsoundSoundClip = playsoundSoundClip;\n    \n\n      const animationAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'position', 'rotation' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const position = phet.paperLand.getModelComponent( 'position' ).value;\nconst rotation = phet.paperLand.getModelComponent( 'rotation' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPosition = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'position' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setRotation = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'rotation' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          // Move the position up and down over time with a sin function\nsetPosition( new phet.dot.Vector2( 0.5, Math.sin( elapsedTime ) * 0.25 + 0.4 ) );\n\n// Make the rotation change a bit so that it looks like it moves up and down\nsetRotation( Math.sin( elapsedTime ) * 0.2 );\n \n        }\n      };\n      scratchpad.animationAnimationListener = animationAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( animationAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'position' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rotation' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.imageImage );\n      delete scratchpad.imageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'position', 'rotation' ], scratchpad.imageImageMultilinkId );\n      delete scratchpad.imageImageMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.playsoundSoundClip );\n      delete scratchpad.playsoundSoundClip;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'position' ], scratchpad.playsoundSoundMultilinkId );\n      delete scratchpad.playsoundSoundMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.animationAnimationListener );\n      delete scratchpad.animationAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Animated Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-ash.394.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-ash/programs/394/debugInfo",
  "claimUrl": "/api/spaces/creator-ash/programs/394/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
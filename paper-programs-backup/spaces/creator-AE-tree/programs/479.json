{
  "number": 479,
  "originalCode": "// Servo Controller\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const redMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'redMarkerOn', redMarkerOn );\n    \n\n      const blueMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'blueMarkerOn', blueMarkerOn );\n    \n\n      const greenMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'greenMarkerOn', greenMarkerOn );\n    \n\n      const blackMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'blackMarkerOn', blackMarkerOn );\n    \n\n    \n      if ( true ) {\n        \n        // Writing to a characteristic, in this case we are controlling the device from the paper playground model.\n        // We can set up a mulilink that will write to the characteristic when the dependency properties change.\n        scratchpad.writeToMicrobitMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'redMarkerOn', 'blueMarkerOn', 'greenMarkerOn', 'blackMarkerOn' ], ( redMarkerOn, blueMarkerOn, greenMarkerOn, blackMarkerOn ) => {\n        \n          // references to each model components that will just be read from (not part of the multilink) - since\n          // they are not part of the multilink, they may not exist yet\n          if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n            \n            const writeToCharacteristic = _newCharacteristicValue => {\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( '6e400001-b5a3-f393-e0a9-e50e24dcca9e', '6e400003-b5a3-f393-e0a9-e50e24dcca9e', _newCharacteristicValue );\n            };\n            \n            const writeStringToCharacteristic = ( _newCharacteristicValueString, _startDelim = '$', _endDelim = '|' ) => {\n            \n              // wrap the string in delimiters for the device\n              const _wrappedString = _startDelim + _newCharacteristicValueString + _endDelim;\n              \n              // encode as UTF-8 Uint8Array\n              const _encodedValue = new TextEncoder().encode( _wrappedString );\n            \n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( '6e400001-b5a3-f393-e0a9-e50e24dcca9e', '6e400003-b5a3-f393-e0a9-e50e24dcca9e', _encodedValue );\n            };\n            \n            // _matrix is a 5x5 2D array of 1s and 0s, corresponding to the LED matrix\n            const writeMatrixToCharacteristic = ( _matrix ) => {\n              const _ledMatrix = new Int8Array(5);\n              const _buffer = [\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0']\n              ]\n              for (var i = 0; i < 5; i++) {\n                for (var j = 0; j < 5; j++) {\n                  _buffer[i][7-j] = _matrix[i][4 - j]\n                }\n              }\n              for (var i = 0; i < 5; i++) {\n                const _string = _buffer[i].join(\"\");\n                _ledMatrix[i]=parseInt(_string,2)\n              }\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( '6e400001-b5a3-f393-e0a9-e50e24dcca9e', '6e400003-b5a3-f393-e0a9-e50e24dcca9e', _ledMatrix );\n            };\n            \n            // the code block that the user wrote to change controlled Properties\n            let sendString = \"\";\n\nif (redMarkerOn && !blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"speed:50\";\n    //calling the wash routine from MakeCode\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:-50\";\n}\nelse if (redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:0\";\n}\nelse if (!redMarkerOn && !blueMarkerOn && greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"angle:0\";\n    sendString = \"wash:50\";\n    phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && !blueMarkerOn && !greenMarkerOn && blackMarkerOn) {\n    //sendString = \"angle:180\";\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\n\nif (sendString !== \"\") {\n    phet.paperLand.console.log(`Sending servo command ${sendString}`)\n    writeStringToCharacteristic(sendString);\n}\n          }\n        } );\n      }\n      else {\n      \n        // Reading from the characteristic, in this case we are controlling other model components\n        phet.paperLand.boardBluetoothServers.addCharacteristicListener(\n          '6e400001-b5a3-f393-e0a9-e50e24dcca9e',\n          '6e400003-b5a3-f393-e0a9-e50e24dcca9e',\n          deviceValue => {\n          \n            if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n              // Make available as a string for easy reading\n              const _textDecoder = new TextDecoder('utf-8'); // Default is utf-8, which is typical for UART text data\n              const deviceValueString = _textDecoder.decode(deviceValue);\n            \n              // references to each model component controlled by this listener\n              \n            \n              // the functions create in the local scope to manipulate the controlled components\n              \n              \n              // the function that that the user wrote\n              let sendString = \"\";\n\nif (redMarkerOn && !blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"speed:50\";\n    //calling the wash routine from MakeCode\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:-50\";\n}\nelse if (redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:0\";\n}\nelse if (!redMarkerOn && !blueMarkerOn && greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"angle:0\";\n    sendString = \"wash:50\";\n    phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && !blueMarkerOn && !greenMarkerOn && blackMarkerOn) {\n    //sendString = \"angle:180\";\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\n\nif (sendString !== \"\") {\n    phet.paperLand.console.log(`Sending servo command ${sendString}`)\n    writeStringToCharacteristic(sendString);\n} \n            }\n         \n          }\n        )\n        .then( addedListener => {\n          scratchpad.characteristicListener = addedListener;\n        } )\n        .catch( error => {\n          phet.paperLand.console.error( error );\n        } );\n      }\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'redMarkerOn' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'blueMarkerOn' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'greenMarkerOn' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'blackMarkerOn' );\n    \n\n     phet.paperLand.console.log( 'Removing a BLE component' );\n     phet.paperLand.boardBluetoothServers.removeCharacteristicListener(\n       '6e400001-b5a3-f393-e0a9-e50e24dcca9e',\n       '6e400003-b5a3-f393-e0a9-e50e24dcca9e',\n       scratchpad.characteristicListener\n     ).catch( error => {\n       phet.paperLand.console.error( error );\n     } );\n     \n     if ( scratchpad.writeToMicrobitMultilinkId ) {\n       phet.paperLand.removeModelPropertyMultilink( [ 'redMarkerOn', 'blueMarkerOn', 'greenMarkerOn', 'blackMarkerOn' ], scratchpad.writeToMicrobitMultilinkId );\n       delete scratchpad.writeToMicrobitMultilinkId;\n     }\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty8 = phet.paperLand.getModelComponent( 'redMarkerOn' );\n    if ( modelProperty8 ) {\n      modelProperty8.value = _.filter(markers, { colorName: 'red' }).length > 0;\n    }\n\n    const modelProperty10 = phet.paperLand.getModelComponent( 'blueMarkerOn' );\n    if ( modelProperty10 ) {\n      modelProperty10.value = _.filter(markers, { colorName: 'blue' }).length > 0;\n    }\n\n    const modelProperty12 = phet.paperLand.getModelComponent( 'greenMarkerOn' );\n    if ( modelProperty12 ) {\n      modelProperty12.value = _.filter(markers, { colorName: 'green' }).length > 0;\n    }\n\n    const modelProperty14 = phet.paperLand.getModelComponent( 'blackMarkerOn' );\n    if ( modelProperty14 ) {\n      modelProperty14.value = _.filter(markers, { colorName: 'black' }).length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty17 = phet.paperLand.getModelComponent( 'redMarkerOn' );\n    if ( modelProperty17 ) {\n      modelProperty17.value = _.filter(markers, { colorName: 'red' }).length > 0;\n    }\n\n    const modelProperty19 = phet.paperLand.getModelComponent( 'blueMarkerOn' );\n    if ( modelProperty19 ) {\n      modelProperty19.value = _.filter(markers, { colorName: 'blue' }).length > 0;\n    }\n\n    const modelProperty21 = phet.paperLand.getModelComponent( 'greenMarkerOn' );\n    if ( modelProperty21 ) {\n      modelProperty21.value = _.filter(markers, { colorName: 'green' }).length > 0;\n    }\n\n    const modelProperty23 = phet.paperLand.getModelComponent( 'blackMarkerOn' );\n    if ( modelProperty23 ) {\n      modelProperty23.value = _.filter(markers, { colorName: 'black' }).length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Servo Controller', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Servo Controller\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const redMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'redMarkerOn', redMarkerOn );\n    \n\n      const blueMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'blueMarkerOn', blueMarkerOn );\n    \n\n      const greenMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'greenMarkerOn', greenMarkerOn );\n    \n\n      const blackMarkerOn = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'blackMarkerOn', blackMarkerOn );\n    \n\n    \n      if ( true ) {\n        \n        // Writing to a characteristic, in this case we are controlling the device from the paper playground model.\n        // We can set up a mulilink that will write to the characteristic when the dependency properties change.\n        scratchpad.writeToMicrobitMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'redMarkerOn', 'blueMarkerOn', 'greenMarkerOn', 'blackMarkerOn' ], ( redMarkerOn, blueMarkerOn, greenMarkerOn, blackMarkerOn ) => {\n        \n          // references to each model components that will just be read from (not part of the multilink) - since\n          // they are not part of the multilink, they may not exist yet\n          if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n            \n            const writeToCharacteristic = _newCharacteristicValue => {\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( '6e400001-b5a3-f393-e0a9-e50e24dcca9e', '6e400003-b5a3-f393-e0a9-e50e24dcca9e', _newCharacteristicValue );\n            };\n            \n            const writeStringToCharacteristic = ( _newCharacteristicValueString, _startDelim = '$', _endDelim = '|' ) => {\n            \n              // wrap the string in delimiters for the device\n              const _wrappedString = _startDelim + _newCharacteristicValueString + _endDelim;\n              \n              // encode as UTF-8 Uint8Array\n              const _encodedValue = new TextEncoder().encode( _wrappedString );\n            \n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( '6e400001-b5a3-f393-e0a9-e50e24dcca9e', '6e400003-b5a3-f393-e0a9-e50e24dcca9e', _encodedValue );\n            };\n            \n            // _matrix is a 5x5 2D array of 1s and 0s, corresponding to the LED matrix\n            const writeMatrixToCharacteristic = ( _matrix ) => {\n              const _ledMatrix = new Int8Array(5);\n              const _buffer = [\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0']\n              ]\n              for (var i = 0; i < 5; i++) {\n                for (var j = 0; j < 5; j++) {\n                  _buffer[i][7-j] = _matrix[i][4 - j]\n                }\n              }\n              for (var i = 0; i < 5; i++) {\n                const _string = _buffer[i].join(\"\");\n                _ledMatrix[i]=parseInt(_string,2)\n              }\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( '6e400001-b5a3-f393-e0a9-e50e24dcca9e', '6e400003-b5a3-f393-e0a9-e50e24dcca9e', _ledMatrix );\n            };\n            \n            // the code block that the user wrote to change controlled Properties\n            let sendString = \"\";\n\nif (redMarkerOn && !blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"speed:50\";\n    //calling the wash routine from MakeCode\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:-50\";\n}\nelse if (redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:0\";\n}\nelse if (!redMarkerOn && !blueMarkerOn && greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"angle:0\";\n    sendString = \"wash:50\";\n    phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && !blueMarkerOn && !greenMarkerOn && blackMarkerOn) {\n    //sendString = \"angle:180\";\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\n\nif (sendString !== \"\") {\n    phet.paperLand.console.log(`Sending servo command ${sendString}`)\n    writeStringToCharacteristic(sendString);\n}\n          }\n        } );\n      }\n      else {\n      \n        // Reading from the characteristic, in this case we are controlling other model components\n        phet.paperLand.boardBluetoothServers.addCharacteristicListener(\n          '6e400001-b5a3-f393-e0a9-e50e24dcca9e',\n          '6e400003-b5a3-f393-e0a9-e50e24dcca9e',\n          deviceValue => {\n          \n            if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n              // Make available as a string for easy reading\n              const _textDecoder = new TextDecoder('utf-8'); // Default is utf-8, which is typical for UART text data\n              const deviceValueString = _textDecoder.decode(deviceValue);\n            \n              // references to each model component controlled by this listener\n              \n            \n              // the functions create in the local scope to manipulate the controlled components\n              \n              \n              // the function that that the user wrote\n              let sendString = \"\";\n\nif (redMarkerOn && !blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"speed:50\";\n    //calling the wash routine from MakeCode\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:-50\";\n}\nelse if (redMarkerOn && blueMarkerOn && !greenMarkerOn && !blackMarkerOn) {\n    sendString = \"speed:0\";\n}\nelse if (!redMarkerOn && !blueMarkerOn && greenMarkerOn && !blackMarkerOn) {\n    //sendString = \"angle:0\";\n    sendString = \"wash:50\";\n    phet.paperLand.console.log(\"sending wash command\");\n}\nelse if (!redMarkerOn && !blueMarkerOn && !greenMarkerOn && blackMarkerOn) {\n    //sendString = \"angle:180\";\n    //sendString = \"wash:50\";\n    //phet.paperLand.console.log(\"sending wash command\");\n}\n\nif (sendString !== \"\") {\n    phet.paperLand.console.log(`Sending servo command ${sendString}`)\n    writeStringToCharacteristic(sendString);\n} \n            }\n         \n          }\n        )\n        .then( addedListener => {\n          scratchpad.characteristicListener = addedListener;\n        } )\n        .catch( error => {\n          phet.paperLand.console.error( error );\n        } );\n      }\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'redMarkerOn' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'blueMarkerOn' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'greenMarkerOn' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'blackMarkerOn' );\n    \n\n     phet.paperLand.console.log( 'Removing a BLE component' );\n     phet.paperLand.boardBluetoothServers.removeCharacteristicListener(\n       '6e400001-b5a3-f393-e0a9-e50e24dcca9e',\n       '6e400003-b5a3-f393-e0a9-e50e24dcca9e',\n       scratchpad.characteristicListener\n     ).catch( error => {\n       phet.paperLand.console.error( error );\n     } );\n     \n     if ( scratchpad.writeToMicrobitMultilinkId ) {\n       phet.paperLand.removeModelPropertyMultilink( [ 'redMarkerOn', 'blueMarkerOn', 'greenMarkerOn', 'blackMarkerOn' ], scratchpad.writeToMicrobitMultilinkId );\n       delete scratchpad.writeToMicrobitMultilinkId;\n     }\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty8 = phet.paperLand.getModelComponent( 'redMarkerOn' );\n    if ( modelProperty8 ) {\n      modelProperty8.value = _.filter(markers, { colorName: 'red' }).length > 0;\n    }\n\n    const modelProperty10 = phet.paperLand.getModelComponent( 'blueMarkerOn' );\n    if ( modelProperty10 ) {\n      modelProperty10.value = _.filter(markers, { colorName: 'blue' }).length > 0;\n    }\n\n    const modelProperty12 = phet.paperLand.getModelComponent( 'greenMarkerOn' );\n    if ( modelProperty12 ) {\n      modelProperty12.value = _.filter(markers, { colorName: 'green' }).length > 0;\n    }\n\n    const modelProperty14 = phet.paperLand.getModelComponent( 'blackMarkerOn' );\n    if ( modelProperty14 ) {\n      modelProperty14.value = _.filter(markers, { colorName: 'black' }).length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty17 = phet.paperLand.getModelComponent( 'redMarkerOn' );\n    if ( modelProperty17 ) {\n      modelProperty17.value = _.filter(markers, { colorName: 'red' }).length > 0;\n    }\n\n    const modelProperty19 = phet.paperLand.getModelComponent( 'blueMarkerOn' );\n    if ( modelProperty19 ) {\n      modelProperty19.value = _.filter(markers, { colorName: 'blue' }).length > 0;\n    }\n\n    const modelProperty21 = phet.paperLand.getModelComponent( 'greenMarkerOn' );\n    if ( modelProperty21 ) {\n      modelProperty21.value = _.filter(markers, { colorName: 'green' }).length > 0;\n    }\n\n    const modelProperty23 = phet.paperLand.getModelComponent( 'blackMarkerOn' );\n    if ( modelProperty23 ) {\n      modelProperty23.value = _.filter(markers, { colorName: 'black' }).length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Servo Controller', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-AE-tree.479.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-AE-tree/programs/479/debugInfo",
  "claimUrl": "/api/spaces/creator-AE-tree/programs/479/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
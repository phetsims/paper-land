{
  "number": 1062,
  "originalCode": "// Voice Volume Value\n// Keywords: density, voicing, view\n// ------------------------------- //\n// Required Programs (dependencies) Density: Model\n// Recommended Programs: Density: Change Volume with Paper Area\n// Program Description:\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const utterance = new phet.utteranceQueue.Utterance( {\n\n      // This Utterance should not cancel others (like ones speaking about density)\n      announcerOptions: {\n        cancelOther: false\n      }\n    } );\n\n    // This the function to implement to watch the changing Property.\n    const voiceVolume = value => {\n\n      // Just read the new volume value, to 1 decimal place.\n      const volumeValue = phet.dot.Utils.toFixed( value, 1 );\n      utterance.alert = `New volume value: ${volumeValue} Liters`;\n      phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n    };\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'volumeProperty', voiceVolume );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.addModelPropertyLink( 'volumeProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Voice', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Volume', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n",
  "currentCode": "// Voice Volume Value\n// Keywords: density, voicing, view\n// ------------------------------- //\n// Required Programs (dependencies) Density: Model\n// Recommended Programs: Density: Change Volume with Paper Area\n// Program Description:\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const utterance = new phet.utteranceQueue.Utterance( {\n\n      // This Utterance should not cancel others (like ones speaking about density)\n      announcerOptions: {\n        cancelOther: false\n      }\n    } );\n\n    // This the function to implement to watch the changing Property.\n    const voiceVolume = value => {\n\n      // Just read the new volume value, to 1 decimal place.\n      const volumeValue = phet.dot.Utils.toFixed( value, 1 );\n      utterance.alert = `New volume value: ${volumeValue} Liters`;\n      phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n    };\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'volumeProperty', voiceVolume );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.addModelPropertyLink( 'volumeProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Voice', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Volume', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.density-demo.1062.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/density-demo/programs/1062/debugInfo",
  "claimUrl": "/api/spaces/density-demo/programs/1062/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
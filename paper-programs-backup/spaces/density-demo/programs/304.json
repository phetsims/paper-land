{
  "number": 304,
  "originalCode": "// Image Transparency Density Map\n// Keywords: density, image, asset, view\n// ------------------------------- //\n// Required Programs (dependencies): Density: Model\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const propertyName = 'densityProperty';\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Create a Scenery image node.\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', 'media/images/barrel.png' );\n    scratchpad.imageNode = new phet.scenery.Image( imageElement, {\n      minWidth: 150,\n      maxWidth: 150,\n      center: new phet.dot.Vector2( 300, 150 )\n    } );\n    sharedData.scene.addChild( scratchpad.imageNode );\n\n    // This the function to implement to watch the changing Property.\n    const densityListener = value => {\n      if ( model.has( 'densityRange' ) ) {\n        const range = model.get( 'densityRange' );\n        scratchpad.imageNode.opacity = Math.max( value / range.max, 0.2 );\n      }\n    };\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'densityProperty', densityListener );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelPropertyLink( 'densityProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n\n    sharedData.scene.removeChild( scratchpad.imageNode );\n    delete scratchpad.imageNode;\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Density', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Image Transparency', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n",
  "currentCode": "// Image Transparency Density Map\n// Keywords: density, image, asset, view\n// ------------------------------- //\n// Required Programs (dependencies): Density: Model\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const propertyName = 'densityProperty';\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Create a Scenery image node.\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', 'media/images/barrel.png' );\n    scratchpad.imageNode = new phet.scenery.Image( imageElement, {\n      minWidth: 150,\n      maxWidth: 150,\n      center: new phet.dot.Vector2( 300, 150 )\n    } );\n    sharedData.scene.addChild( scratchpad.imageNode );\n\n    // This the function to implement to watch the changing Property.\n    const densityListener = value => {\n      if ( model.has( 'densityRange' ) ) {\n        const range = model.get( 'densityRange' );\n        scratchpad.imageNode.opacity = Math.max( value / range.max, 0.2 );\n      }\n    };\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'densityProperty', densityListener );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelPropertyLink( 'densityProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n\n    sharedData.scene.removeChild( scratchpad.imageNode );\n    delete scratchpad.imageNode;\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Density', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Image Transparency', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.density-demo.304.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/density-demo/programs/304/debugInfo",
  "claimUrl": "/api/spaces/density-demo/programs/304/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
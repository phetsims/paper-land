{
  "number": 1886,
  "originalCode": "// Change Volume with Paper Area\n// Keywords: density, model, paperPositions\n// ------------------------------- //\n// Required Programs (dependencies): Density: Model\n// Recommended Programs: Density: Voice Volume Value\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed. Create new components here.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Nothing to create! This program controls an existing model Property.\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    if ( model.has( 'volumeProperty' ) ) {\n      const volumeProperty = model.get( 'volumeProperty' );\n      const range = volumeProperty.range;\n\n      // these values are normalized within the camera window\n      const paperWidth = positionPoints[ 2 ].x - positionPoints[ 0 ].x;\n      const paperHeight = positionPoints[ 2 ].y - positionPoints[ 0 ].y;\n      const area = paperWidth * paperHeight;\n\n      // multiply area by 2 so max value is ~half of the camera window\n      const newValue = area * 2 * range.max;\n      const constrainedValue = Math.max( Math.min( newValue, range.max ), range.min );\n      volumeProperty.value = constrainedValue;\n    }\n  };\n\n  // Called when the program is changed or no longer detected. Destroy components here.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Nothing to destroy! This program is only a controller.\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Volume', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "currentCode": "// Change Volume with Paper Area\n// Keywords: density, model, paperPositions\n// ------------------------------- //\n// Required Programs (dependencies): Density: Model\n// Recommended Programs: Density: Voice Volume Value\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed. Create new components here.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Nothing to create! This program controls an existing model Property.\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    if ( model.has( 'volumeProperty' ) ) {\n      const volumeProperty = model.get( 'volumeProperty' );\n      const range = volumeProperty.range;\n\n      // these values are normalized within the camera window\n      const paperWidth = positionPoints[ 2 ].x - positionPoints[ 0 ].x;\n      const paperHeight = positionPoints[ 2 ].y - positionPoints[ 0 ].y;\n      const area = paperWidth * paperHeight;\n\n      // multiply area by 2 so max value is ~half of the camera window\n      const newValue = area * 2 * range.max;\n      const constrainedValue = Math.max( Math.min( newValue, range.max ), range.min );\n      volumeProperty.value = constrainedValue;\n    }\n  };\n\n  // Called when the program is changed or no longer detected. Destroy components here.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    // Nothing to destroy! This program is only a controller.\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Volume', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.density-demo.1886.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/density-demo/programs/1886/debugInfo",
  "claimUrl": "/api/spaces/density-demo/programs/1886/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 1674,
  "originalCode": "// IDRC test\r\n// Keywords: start, begin, new, hello world\r\n// =============================== //\r\n// Program Dependencies: N/A\r\n// Recommended Programs: General Template (templates)\r\n// Program Description: Example program with functioning Board and Projector code!\r\n// !!!UPDATE ME WITH A BETTER BOARD EXAMPLE!!!\r\n\r\nimportScripts('paper.js');\r\n\r\n(async () => {\r\n\r\n  //----------------------------------------------------------------------\r\n  // Board code\r\n  //----------------------------------------------------------------------\r\n\r\n  // Get the paper number of this piece of paper (which should not change).\r\n  const myPaperNumber = await paper.get('number');\r\n\r\n  // Called when the program is detected or changed.\r\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/loonCall.mp3' );\r\n\r\n    const soundClip = new phet.tambo.SoundClip( wrappedAudioBuffer );\r\n    phet.tambo.soundManager.addSoundGenerator( soundClip );\r\n    setTimeout( () => {\r\n      soundClip.play();\r\n      console.log( 'Just played sound clip, did you hear it?' );\r\n    }, 1000 );\r\n    \r\n    // Assign the sound to the scratchpad so that we can remove it later\r\n    scratchpad.soundClip = soundClip;\r\n  };\r\n\r\n  // Called when the paper positions change.\r\n  // const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\r\n    \r\n    // Behavior that changes with paper position here.\r\n    // Global model for all programs\r\n    // const model = sharedData.modelProperty.value;\r\n  // };\r\n\r\n  // Called when the program is changed or no longer detected.\r\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.soundClip );\r\n    scratchpad.soundClip = null;\r\n  };\r\n\r\n  // Add the state change handler defined above as data for this paper.\r\n  await paper.set('data', {\r\n    paperPlaygroundData: {\r\n      updateTime: Date.now(),\r\n      eventHandlers: {\r\n        onProgramAdded: onProgramAdded.toString(),\r\n        onProgramRemoved: onProgramRemoved.toString()\r\n      }\r\n    }\r\n  } );\r\n\r\n  //----------------------------------------------------------------------\r\n  // Projector code\r\n  //----------------------------------------------------------------------\r\n\r\n  const canvas = await paper.get('canvas');\r\n\r\n  // Draw \"Hello world\" on the canvas.\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.font = '20px sans-serif';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillStyle = 'rgb(255,0,0)';\r\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\r\n  ctx.fillStyle = 'rgb(0,255,0)';\r\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\r\n\r\n  // Get a \"supporter canvas\", which is a canvas for the entire\r\n  // projection surface.\r\n  const supporterCanvas = await paper.get('supporterCanvas');\r\n  const supporterCtx = supporterCanvas.getContext('2d');\r\n\r\n  // Repeat every 100 milliseconds.\r\n  setInterval(async () => {\r\n    // Get a list of all the papers.\r\n    const papers = await paper.get('papers');\r\n\r\n    // Clear out the supporter canvas. We get our own canvas, so we won't\r\n    // interfere with other programs by doing this.\r\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\r\n\r\n    // Draw a circle in the center of our paper.\r\n    const myCenter = papers[myPaperNumber].points.center;\r\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\r\n    supporterCtx.beginPath();\r\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\r\n    supporterCtx.fill();\r\n\r\n    // Draw a line from our paper to each other paper.\r\n    Object.keys(papers).forEach(otherPaperNumber => {\r\n      if (otherPaperNumber !== myPaperNumber) {\r\n        const otherCenter = papers[otherPaperNumber].points.center;\r\n\r\n        supporterCtx.beginPath();\r\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\r\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\r\n        supporterCtx.stroke();\r\n      }\r\n    });\r\n  }, 100);\r\n})();\r\n",
  "currentCode": "// IDRC test\r\n// Keywords: start, begin, new, hello world\r\n// =============================== //\r\n// Program Dependencies: N/A\r\n// Recommended Programs: General Template (templates)\r\n// Program Description: Example program with functioning Board and Projector code!\r\n// !!!UPDATE ME WITH A BETTER BOARD EXAMPLE!!!\r\n\r\nimportScripts('paper.js');\r\n\r\n(async () => {\r\n\r\n  //----------------------------------------------------------------------\r\n  // Board code\r\n  //----------------------------------------------------------------------\r\n\r\n  // Get the paper number of this piece of paper (which should not change).\r\n  const myPaperNumber = await paper.get('number');\r\n\r\n  // Called when the program is detected or changed.\r\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/loonCall.mp3' );\r\n\r\n    const soundClip = new phet.tambo.SoundClip( wrappedAudioBuffer );\r\n    phet.tambo.soundManager.addSoundGenerator( soundClip );\r\n    setTimeout( () => {\r\n      soundClip.play();\r\n      console.log( 'Just played sound clip, did you hear it?' );\r\n    }, 1000 );\r\n    \r\n    // Assign the sound to the scratchpad so that we can remove it later\r\n    scratchpad.soundClip = soundClip;\r\n  };\r\n\r\n  // Called when the paper positions change.\r\n  // const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\r\n    \r\n    // Behavior that changes with paper position here.\r\n    // Global model for all programs\r\n    // const model = sharedData.modelProperty.value;\r\n  // };\r\n\r\n  // Called when the program is changed or no longer detected.\r\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.soundClip );\r\n    scratchpad.soundClip = null;\r\n  };\r\n\r\n  // Add the state change handler defined above as data for this paper.\r\n  await paper.set('data', {\r\n    paperPlaygroundData: {\r\n      updateTime: Date.now(),\r\n      eventHandlers: {\r\n        onProgramAdded: onProgramAdded.toString(),\r\n        onProgramRemoved: onProgramRemoved.toString()\r\n      }\r\n    }\r\n  } );\r\n\r\n  //----------------------------------------------------------------------\r\n  // Projector code\r\n  //----------------------------------------------------------------------\r\n\r\n  const canvas = await paper.get('canvas');\r\n\r\n  // Draw \"Hello world\" on the canvas.\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.font = '20px sans-serif';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillStyle = 'rgb(255,0,0)';\r\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\r\n  ctx.fillStyle = 'rgb(0,255,0)';\r\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\r\n\r\n  // Get a \"supporter canvas\", which is a canvas for the entire\r\n  // projection surface.\r\n  const supporterCanvas = await paper.get('supporterCanvas');\r\n  const supporterCtx = supporterCanvas.getContext('2d');\r\n\r\n  // Repeat every 100 milliseconds.\r\n  setInterval(async () => {\r\n    // Get a list of all the papers.\r\n    const papers = await paper.get('papers');\r\n\r\n    // Clear out the supporter canvas. We get our own canvas, so we won't\r\n    // interfere with other programs by doing this.\r\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\r\n\r\n    // Draw a circle in the center of our paper.\r\n    const myCenter = papers[myPaperNumber].points.center;\r\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\r\n    supporterCtx.beginPath();\r\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\r\n    supporterCtx.fill();\r\n\r\n    // Draw a line from our paper to each other paper.\r\n    Object.keys(papers).forEach(otherPaperNumber => {\r\n      if (otherPaperNumber !== myPaperNumber) {\r\n        const otherCenter = papers[otherPaperNumber].points.center;\r\n\r\n        supporterCtx.beginPath();\r\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\r\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\r\n        supporterCtx.stroke();\r\n      }\r\n    });\r\n  }, 100);\r\n})();\r\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1674.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1674/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1674/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
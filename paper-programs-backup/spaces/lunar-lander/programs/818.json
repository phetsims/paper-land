{
  "number": 818,
  "originalCode": "// Gravity Control - Position\n// Keywords: gravity, model, control, position, paper\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get( 'number' );\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // The range of values that will control.\n    scratchpad.gravityRange = new phet.dot.Range( -25, 0 );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    if ( sharedData.model.has( 'gravityProperty' ) ) {\n      const gravityProperty = sharedData.model.get( 'gravityProperty' );\n\n      // get paper centerY - this is a value between 0 (bottom) and 1 (top)\n      const normalizedY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n\n      // map centerY to the gravity range - since gravity is in the -y direction, largest value\n      // is at the 'min' of the range\n      const gravityValue = normalizedY * scratchpad.gravityRange.min;\n      gravityProperty.value = scratchpad.gravityRange.constrainValue( gravityValue );\n      phet.paperLand.console.log( 'Gravity: '+ gravityValue );\n    }\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    delete scratchpad.gravityRange;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Linear', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Value', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n\n\n\n",
  "currentCode": "// Gravity Control - Position\n// Keywords: gravity, model, control, position, paper\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get( 'number' );\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // The range of values that will control.\n    scratchpad.gravityRange = new phet.dot.Range( -25, 0 );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    if ( sharedData.model.has( 'gravityProperty' ) ) {\n      const gravityProperty = sharedData.model.get( 'gravityProperty' );\n\n      // get paper centerY - this is a value between 0 (bottom) and 1 (top)\n      const normalizedY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n\n      // map centerY to the gravity range - since gravity is in the -y direction, largest value\n      // is at the 'min' of the range\n      const gravityValue = normalizedY * scratchpad.gravityRange.min;\n      gravityProperty.value = scratchpad.gravityRange.constrainValue( gravityValue );\n      phet.paperLand.console.log( 'Gravity: '+ gravityValue );\n    }\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    delete scratchpad.gravityRange;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Linear', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Value', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.818.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/818/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/818/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 1403,
  "originalCode": "// Thrust Control\n// Keywords: model, p2, physics, controller\n// ------------------------------- //\n// Required Programs (dependencies) Lander\n// Recommended Programs:\n// Program Description: Controls the thrust for the Lander.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    const thrustProperty = sharedData.model.get( 'landerThrustProperty' );\n    if ( thrustProperty ) {\n      const range = new phet.dot.Range( 0, 25 );\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      // Graphics coordinate system has 0 at top so subtract from 1 so that 0 is at the bottom.\n      const paperCenterX = ( positionPoints[ 0 ].x + positionPoints[ 2 ].x ) / 2;\n      const paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;  \n\n      const newX = paperCenterX * range.max;\n      const newY = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedX = range.constrainValue( newX );\n      const constrainedY = range.constrainValue( newY );\n\n      // for x component of thrust, we want 0 at the center of the screen\n      const centeredX = constrainedX - ( range.max / 2 );\n\n      thrustProperty.value = new phet.dot.Vector2( centeredX, constrainedY );\n\n      // print the y value of thrust to the console\n      phet.paperLand.console.log( constrainedY );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramChangedPosition: onProgramChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// Thrust Control\n// Keywords: model, p2, physics, controller\n// ------------------------------- //\n// Required Programs (dependencies) Lander\n// Recommended Programs:\n// Program Description: Controls the thrust for the Lander.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    const thrustProperty = sharedData.model.get( 'landerThrustProperty' );\n    if ( thrustProperty ) {\n      const range = new phet.dot.Range( 0, 25 );\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      // Graphics coordinate system has 0 at top so subtract from 1 so that 0 is at the bottom.\n      const paperCenterX = ( positionPoints[ 0 ].x + positionPoints[ 2 ].x ) / 2;\n      const paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;  \n\n      const newX = paperCenterX * range.max;\n      const newY = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedX = range.constrainValue( newX );\n      const constrainedY = range.constrainValue( newY );\n\n      // for x component of thrust, we want 0 at the center of the screen\n      const centeredX = constrainedX - ( range.max / 2 );\n\n      thrustProperty.value = new phet.dot.Vector2( centeredX, constrainedY );\n\n      // print the y value of thrust to the console\n      phet.paperLand.console.log( constrainedY );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramChangedPosition: onProgramChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1403.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1403/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1403/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
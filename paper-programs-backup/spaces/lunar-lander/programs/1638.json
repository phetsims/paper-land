{
  "number": 1638,
  "originalCode": "// Gravity Voicing\n// Keywords: speech, synthesis, responses\n// =============================== //\n// Program Dependencies: World (Model)\n// Recommended Programs:\n// Program Description: Prints Voicing responses when the gravityProperty changes.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // When the gravity changes, generate response strings and speak them. A linkId is saved\n    // to the scratchpad so that we can unlink this behavior when the program is removed.\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'gravityProperty', ( currentGravity, oldGravity ) => {\n\n      // The oldGravity may be undefined if this is the first time the function is called. In that case,\n      // describe change relative to 0 gravity.\n      oldGravity = oldGravity || 0;\n\n      // We want to describe if the Lander feels lighter or heavier. Compare oldGravity to currentGravity\n      // to determine this and save to a string variable for use in responses. Note that gravity is negative,\n      // so we negate the values before the comparison for the description. The ? operator is called\n      // the ternary operator and is shorthand for if/else.\n      const weightChangeString = -currentGravity > -oldGravity ? 'heavier' : 'lighter';\n\n      // We want to describe HOW MUCH the weight has changed. Map the difference in weight to a described scale.\n      const weightChange = Math.abs( oldGravity - currentGravity ); // absolute value for scale\n      const weightChangeAmountString = weightChange < 3 ? 'a little' :\n                                       weightChange < 8 ? 'much' :\n                                       'much much'; // else case, anything more than last value is 'much much'\n\n      const planetName = sharedData.model.get( 'planetNameProperty' ).value;                                   \n    \n      // The value with limitted precision so it sounds nice when read.\n      const formattedValue = phet.dot.Utils.toFixed( currentGravity, 3 );\n\n      // Assemble responses \n      const utterance = new phet.utteranceQueue.Utterance( {\n        alert: new phet.utteranceQueue.ResponsePacket( {\n          nameResponse: `Landing on ${planetName}`, // Name of the value\n          //objectResponse: `Now ${formattedValue} meters per second squared`, // The new value itself\n          //objectResponse: `Now on ${planetName}`, // The value of gravity expressed as body.\n          contextResponse: `Lander seems ${weightChangeAmountString} ${weightChangeString}.` // Contextual changes after the changing value\n        } )\n      } );\n\n      phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n    } );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n      // Remove the link to the gravityProperty when the program is removed\n      phet.paperLand.removeModelPropertyLink( 'gravityProperty', scratchpad.linkId );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "currentCode": "// Gravity Voicing\n// Keywords: speech, synthesis, responses\n// =============================== //\n// Program Dependencies: World (Model)\n// Recommended Programs:\n// Program Description: Prints Voicing responses when the gravityProperty changes.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // When the gravity changes, generate response strings and speak them. A linkId is saved\n    // to the scratchpad so that we can unlink this behavior when the program is removed.\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'gravityProperty', ( currentGravity, oldGravity ) => {\n\n      // The oldGravity may be undefined if this is the first time the function is called. In that case,\n      // describe change relative to 0 gravity.\n      oldGravity = oldGravity || 0;\n\n      // We want to describe if the Lander feels lighter or heavier. Compare oldGravity to currentGravity\n      // to determine this and save to a string variable for use in responses. Note that gravity is negative,\n      // so we negate the values before the comparison for the description. The ? operator is called\n      // the ternary operator and is shorthand for if/else.\n      const weightChangeString = -currentGravity > -oldGravity ? 'heavier' : 'lighter';\n\n      // We want to describe HOW MUCH the weight has changed. Map the difference in weight to a described scale.\n      const weightChange = Math.abs( oldGravity - currentGravity ); // absolute value for scale\n      const weightChangeAmountString = weightChange < 3 ? 'a little' :\n                                       weightChange < 8 ? 'much' :\n                                       'much much'; // else case, anything more than last value is 'much much'\n\n      const planetName = sharedData.model.get( 'planetNameProperty' ).value;                                   \n    \n      // The value with limitted precision so it sounds nice when read.\n      const formattedValue = phet.dot.Utils.toFixed( currentGravity, 3 );\n\n      // Assemble responses \n      const utterance = new phet.utteranceQueue.Utterance( {\n        alert: new phet.utteranceQueue.ResponsePacket( {\n          nameResponse: `Landing on ${planetName}`, // Name of the value\n          //objectResponse: `Now ${formattedValue} meters per second squared`, // The new value itself\n          //objectResponse: `Now on ${planetName}`, // The value of gravity expressed as body.\n          contextResponse: `Lander seems ${weightChangeAmountString} ${weightChangeString}.` // Contextual changes after the changing value\n        } )\n      } );\n\n      phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n    } );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n      // Remove the link to the gravityProperty when the program is removed\n      phet.paperLand.removeModelPropertyLink( 'gravityProperty', scratchpad.linkId );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1638.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1638/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1638/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 1846,
  "originalCode": "// Planetary Gravity from List - Markers\r\n// Keywords: radio, buttons, markers, example, voicing\r\n// =============================== //\r\n// Program Dependencies:\r\n// Recommended Programs:\r\n// Program Description: Creates a \"radio group\" that controls gravity. The value is controlled by the\r\n//                      number of markers on this program. 0 markers sets to first value, 1 markers sets\r\n//                      to second value, and so on.                          \r\n\r\nimportScripts('paper.js');\r\n\r\n(async () => {\r\n\r\n  //----------------------------------------------------------------------\r\n  // Board code\r\n  //----------------------------------------------------------------------\r\n\r\n  // Called when the program is detected or changed.\r\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n\r\n    // This is the function we want to call whenever a marker is added or removed from the program. You\r\n    // could copy/paste the body of this function right into onProgramMarkersAdded/Removed functions,\r\n    // but it is created once here and assigned to the scratchpad to avoid code duplication. The function\r\n    // takes a single argument, the current number of markers contained in the program.\r\n    scratchpad.handleMarkersChanged = currentMarkers => {\r\n\r\n      // get a reference to the Property to control\r\n      const planetNameProperty = sharedData.model.get( 'planetNameProperty' );\r\n      const planetNames = sharedData.model.get( 'planetNames' );\r\n      if ( planetNameProperty && planetNames ) {\r\n        \r\n        // The number of markers control the current value.\r\n        const numberOfMarkers = currentMarkers.length;\r\n        if ( numberOfMarkers < planetNames.length ) {\r\n          planetNameProperty.value = planetNames[ numberOfMarkers ];\r\n        }\r\n        else {\r\n            \r\n          // There are more markers in the program than there are values, just set to the last\r\n          // possible value\r\n          planetNameProperty.value = planetNames[ planetNames.length - 1 ];\r\n        }\r\n      }\r\n      else {\r\n        phet.paperLand.console.warn( 'No planetNameProperty to control yet. Add the World program.' );\r\n      }\r\n    }\r\n\r\n    // Observe the changing Property. addModelPropertyLink returns a uniqueID which is saved to the\r\n    // scratchpad so it can be easily unlinked later.\r\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'planetNameProperty', value => {\r\n      phet.paperLand.console.log( `New radio value: ${value}` );\r\n    } );\r\n  };\r\n\r\n  // Called when the program is changed or no longer detected.\r\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n\r\n    // unlink the Property listener that was logging the new value to the console\r\n    scratchpad.linkId = phet.paperLand.removeModelPropertyLink( 'planetNameProperty', scratchpad.linkId );\r\n    delete scratchpad.linkId;\r\n\r\n    // we are done with our Property controller function\r\n    delete scratchpad.handleMarkersChanged;\r\n  };\r\n\r\n  // Called whenever a marker is added to the program\r\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\r\n    scratchpad.handleMarkersChanged( currentMarkers );\r\n  };\r\n\r\n  // Called whenever a marker is removed from the program\r\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\r\n    scratchpad.handleMarkersChanged( currentMarkers );\r\n  };\r\n\r\n  // Add the state change handler defined above as data for this paper.\r\n  await paper.set('data', {\r\n    paperPlaygroundData: {\r\n      updateTime: Date.now(),\r\n      eventHandlers: {\r\n        onProgramAdded: onProgramAdded.toString(),\r\n        onProgramRemoved: onProgramRemoved.toString(),\r\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\r\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString()\r\n      }\r\n    }\r\n  } );\r\n\r\n  //----------------------------------------------------------------------\r\n  // Projector code\r\n  //----------------------------------------------------------------------\r\n\r\n  const canvas = await paper.get('canvas');\r\n\r\n  // Draw \"Hello world\" on the canvas.\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.font = '20px sans-serif';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillStyle = 'rgb(255,0,0)';\r\n  ctx.fillText('Toggle', canvas.width / 2, canvas.height / 2 - 10);\r\n})();\r\n\r\n\r\n",
  "currentCode": "// Planetary Gravity from List - Markers\r\n// Keywords: radio, buttons, markers, example, voicing\r\n// =============================== //\r\n// Program Dependencies:\r\n// Recommended Programs:\r\n// Program Description: Creates a \"radio group\" that controls gravity. The value is controlled by the\r\n//                      number of markers on this program. 0 markers sets to first value, 1 markers sets\r\n//                      to second value, and so on.                          \r\n\r\nimportScripts('paper.js');\r\n\r\n(async () => {\r\n\r\n  //----------------------------------------------------------------------\r\n  // Board code\r\n  //----------------------------------------------------------------------\r\n\r\n  // Called when the program is detected or changed.\r\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n\r\n    // This is the function we want to call whenever a marker is added or removed from the program. You\r\n    // could copy/paste the body of this function right into onProgramMarkersAdded/Removed functions,\r\n    // but it is created once here and assigned to the scratchpad to avoid code duplication. The function\r\n    // takes a single argument, the current number of markers contained in the program.\r\n    scratchpad.handleMarkersChanged = currentMarkers => {\r\n\r\n      // get a reference to the Property to control\r\n      const planetNameProperty = sharedData.model.get( 'planetNameProperty' );\r\n      const planetNames = sharedData.model.get( 'planetNames' );\r\n      if ( planetNameProperty && planetNames ) {\r\n        \r\n        // The number of markers control the current value.\r\n        const numberOfMarkers = currentMarkers.length;\r\n        if ( numberOfMarkers < planetNames.length ) {\r\n          planetNameProperty.value = planetNames[ numberOfMarkers ];\r\n        }\r\n        else {\r\n            \r\n          // There are more markers in the program than there are values, just set to the last\r\n          // possible value\r\n          planetNameProperty.value = planetNames[ planetNames.length - 1 ];\r\n        }\r\n      }\r\n      else {\r\n        phet.paperLand.console.warn( 'No planetNameProperty to control yet. Add the World program.' );\r\n      }\r\n    }\r\n\r\n    // Observe the changing Property. addModelPropertyLink returns a uniqueID which is saved to the\r\n    // scratchpad so it can be easily unlinked later.\r\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'planetNameProperty', value => {\r\n      phet.paperLand.console.log( `New radio value: ${value}` );\r\n    } );\r\n  };\r\n\r\n  // Called when the program is changed or no longer detected.\r\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n\r\n    // unlink the Property listener that was logging the new value to the console\r\n    scratchpad.linkId = phet.paperLand.removeModelPropertyLink( 'planetNameProperty', scratchpad.linkId );\r\n    delete scratchpad.linkId;\r\n\r\n    // we are done with our Property controller function\r\n    delete scratchpad.handleMarkersChanged;\r\n  };\r\n\r\n  // Called whenever a marker is added to the program\r\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\r\n    scratchpad.handleMarkersChanged( currentMarkers );\r\n  };\r\n\r\n  // Called whenever a marker is removed from the program\r\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\r\n    scratchpad.handleMarkersChanged( currentMarkers );\r\n  };\r\n\r\n  // Add the state change handler defined above as data for this paper.\r\n  await paper.set('data', {\r\n    paperPlaygroundData: {\r\n      updateTime: Date.now(),\r\n      eventHandlers: {\r\n        onProgramAdded: onProgramAdded.toString(),\r\n        onProgramRemoved: onProgramRemoved.toString(),\r\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\r\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString()\r\n      }\r\n    }\r\n  } );\r\n\r\n  //----------------------------------------------------------------------\r\n  // Projector code\r\n  //----------------------------------------------------------------------\r\n\r\n  const canvas = await paper.get('canvas');\r\n\r\n  // Draw \"Hello world\" on the canvas.\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.font = '20px sans-serif';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillStyle = 'rgb(255,0,0)';\r\n  ctx.fillText('Toggle', canvas.width / 2, canvas.height / 2 - 10);\r\n})();\r\n\r\n\r\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1846.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1846/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1846/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
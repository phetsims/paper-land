{
  "number": 1169,
  "originalCode": "// World (Model)\n// Keywords: gravity, physics, model\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs: Lander, Thrust, Lander Voicing, Thrust Sound\n// Program Description: Creates a world for lunar lander.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // create a world with p2 physics and add to the global model\n    const world = new p2.World();\n    phet.paperLand.addModelComponent( 'world', world );\n    phet.scratch = {};\n    phet.scratch.world = world;\n\n    // All of the available planet names that the model can use\n    const planetNames = [\n      'Moon',\n      'Mercury',\n      'Venus',\n      'Earth',\n      'Mars',\n      'Jupiter',\n      'Saturn',\n      'Uranus',\n      'Neptune',\n      'Pluto'\n    ];\n    phet.paperLand.addModelComponent( 'planetNames', planetNames );\n\n    const planetNameProperty = new phet.axon.Property( 'Moon' );\n    phet.paperLand.addModelComponent( 'planetNameProperty', planetNameProperty );\n\n    // create a Property that will control acceleration due to gravity\n    const gravityProperty = new phet.axon.Property( -9.8 );\n    phet.paperLand.addModelComponent( 'gravityProperty', gravityProperty );\n\n    // When the selected planet name changes, set the gravity value to that planet's \n    // acceleration due to gravity\n    scratchpad.nameLinkId = phet.paperLand.addModelPropertyLink( 'planetNameProperty', planetName => {\n      sharedData.model.get( 'gravityProperty' ).value = planetName === 'Moon' ? -1.625 :\n                                                        planetName === 'Mercury' ? -3.721 :\n                                                        planetName === 'Venus' ? -8.87 :\n                                                        planetName === 'Earth' ? -9.807 :\n                                                        planetName === 'Mars' ? -3.721 :\n                                                        planetName === 'Jupiter' ? -24.79 :\n                                                        planetName === 'Saturn' ? -10.44 :\n                                                        planetName === 'Uranus' ? -8.87 :\n                                                        planetName === 'Neptune' ? -11.15 :\n                                                        planetName === 'Pluto' ? -0.62 :\n                                                        0;\n    } );\n\n    // create an Emitter that other programs to listen to that fires an event after p2 physics has completed\n    // a step and updated all physical bodies\n    const worldStepEmitter = new phet.axon.Emitter();\n    phet.paperLand.addModelComponent( 'worldStepEmitter', worldStepEmitter );\n\n    // create \"ground\" so the lander stops at the bottom\n    const planeShape = new p2.Box( { width: sharedData.displaySize.width * 2, height: 500 } );\n    const planeBody = new p2.Body( {\n      type: p2.Body.KINEMATIC,\n      mass: 0, // tells p2 that this body shouldn't respond to forces\n      position: [ 0, -225 ], // initial position\n    } );\n    planeBody.addShape( planeShape );\n    world.addBody( planeBody );\n\n    // Add a function to the model to convert from p2 model coordinates to \"board view\" coordinates\n    const modelToViewPosition = modelPosition => {\n      return new phet.dot.Vector2( modelPosition.x + sharedData.displaySize.width / 2, sharedData.displaySize.height - modelPosition.y );\n    };\n    phet.paperLand.addModelComponent( 'modelToViewPosition', modelToViewPosition );\n\n    // Add a function to the model to convert board \"view\" coordinates to p2 model coordinates\n    const viewToModelPosition = viewPosition => {\n      return new phet.dot.Vector2(\n        viewPosition.x - sharedData.displaySize.width / 2,\n        sharedData.displaySize.height - viewPosition.y\n      )\n    }\n    phet.paperLand.addModelComponent( 'viewToModelPosition', viewToModelPosition );\n\n    // move physics bodies forward in time\n    scratchpad.stepListener = dt => {\n\n      // limit dt to prevent odd behaviors that could happen with really large time steps\n      dt = Math.min( dt, 0.02 ); // in seconds\n      world.step( dt );\n      worldStepEmitter.emit();\n    }\n    phet.axon.stepTimer.addListener( scratchpad.stepListener );\n\n    // set p2 physics gravity when model gravity changes\n    const gravityListener = yGravity => {\n      world.gravity = [ 0, yGravity ];\n    };\n    scratchpad.gravityListenerId = phet.paperLand.addModelPropertyLink( 'gravityProperty', gravityListener );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelPropertyLink( 'gravityProperty', scratchpad.gravityListenerId );\n    delete scratchpad.gravityListenerId;\n\n    phet.paperLand.removeModelPropertyLink( 'planetNameProperty', scratchpad.nameLinkId );\n    delete scratchpad.nameLinkId;\n\n    phet.paperLand.removeModelComponent( 'world' );\n    phet.paperLand.removeModelComponent( 'worldStepEmitter' );\n    phet.paperLand.removeModelComponent( 'gravityProperty' );\n    phet.paperLand.removeModelComponent( 'modelToViewPosition' );\n    phet.paperLand.removeModelComponent( 'viewToModelPosition' );\n    phet.paperLand.removeModelComponent( 'planetNames' );\n    phet.paperLand.removeModelComponent( 'planetNameProperty' );\n\n    phet.axon.stepTimer.removeListener( scratchpad.stepListener );\n    delete scratchpad.stepListener;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Lunar', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Model', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// World (Model)\n// Keywords: gravity, physics, model\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs: Lander, Thrust, Lander Voicing, Thrust Sound\n// Program Description: Creates a world for lunar lander.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // create a world with p2 physics and add to the global model\n    const world = new p2.World();\n    phet.paperLand.addModelComponent( 'world', world );\n    phet.scratch = {};\n    phet.scratch.world = world;\n\n    // All of the available planet names that the model can use\n    const planetNames = [\n      'Moon',\n      'Mercury',\n      'Venus',\n      'Earth',\n      'Mars',\n      'Jupiter',\n      'Saturn',\n      'Uranus',\n      'Neptune',\n      'Pluto'\n    ];\n    phet.paperLand.addModelComponent( 'planetNames', planetNames );\n\n    const planetNameProperty = new phet.axon.Property( 'Moon' );\n    phet.paperLand.addModelComponent( 'planetNameProperty', planetNameProperty );\n\n    // create a Property that will control acceleration due to gravity\n    const gravityProperty = new phet.axon.Property( -9.8 );\n    phet.paperLand.addModelComponent( 'gravityProperty', gravityProperty );\n\n    // When the selected planet name changes, set the gravity value to that planet's \n    // acceleration due to gravity\n    scratchpad.nameLinkId = phet.paperLand.addModelPropertyLink( 'planetNameProperty', planetName => {\n      sharedData.model.get( 'gravityProperty' ).value = planetName === 'Moon' ? -1.625 :\n                                                        planetName === 'Mercury' ? -3.721 :\n                                                        planetName === 'Venus' ? -8.87 :\n                                                        planetName === 'Earth' ? -9.807 :\n                                                        planetName === 'Mars' ? -3.721 :\n                                                        planetName === 'Jupiter' ? -24.79 :\n                                                        planetName === 'Saturn' ? -10.44 :\n                                                        planetName === 'Uranus' ? -8.87 :\n                                                        planetName === 'Neptune' ? -11.15 :\n                                                        planetName === 'Pluto' ? -0.62 :\n                                                        0;\n    } );\n\n    // create an Emitter that other programs to listen to that fires an event after p2 physics has completed\n    // a step and updated all physical bodies\n    const worldStepEmitter = new phet.axon.Emitter();\n    phet.paperLand.addModelComponent( 'worldStepEmitter', worldStepEmitter );\n\n    // create \"ground\" so the lander stops at the bottom\n    const planeShape = new p2.Box( { width: sharedData.displaySize.width * 2, height: 500 } );\n    const planeBody = new p2.Body( {\n      type: p2.Body.KINEMATIC,\n      mass: 0, // tells p2 that this body shouldn't respond to forces\n      position: [ 0, -225 ], // initial position\n    } );\n    planeBody.addShape( planeShape );\n    world.addBody( planeBody );\n\n    // Add a function to the model to convert from p2 model coordinates to \"board view\" coordinates\n    const modelToViewPosition = modelPosition => {\n      return new phet.dot.Vector2( modelPosition.x + sharedData.displaySize.width / 2, sharedData.displaySize.height - modelPosition.y );\n    };\n    phet.paperLand.addModelComponent( 'modelToViewPosition', modelToViewPosition );\n\n    // Add a function to the model to convert board \"view\" coordinates to p2 model coordinates\n    const viewToModelPosition = viewPosition => {\n      return new phet.dot.Vector2(\n        viewPosition.x - sharedData.displaySize.width / 2,\n        sharedData.displaySize.height - viewPosition.y\n      )\n    }\n    phet.paperLand.addModelComponent( 'viewToModelPosition', viewToModelPosition );\n\n    // move physics bodies forward in time\n    scratchpad.stepListener = dt => {\n\n      // limit dt to prevent odd behaviors that could happen with really large time steps\n      dt = Math.min( dt, 0.02 ); // in seconds\n      world.step( dt );\n      worldStepEmitter.emit();\n    }\n    phet.axon.stepTimer.addListener( scratchpad.stepListener );\n\n    // set p2 physics gravity when model gravity changes\n    const gravityListener = yGravity => {\n      world.gravity = [ 0, yGravity ];\n    };\n    scratchpad.gravityListenerId = phet.paperLand.addModelPropertyLink( 'gravityProperty', gravityListener );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelPropertyLink( 'gravityProperty', scratchpad.gravityListenerId );\n    delete scratchpad.gravityListenerId;\n\n    phet.paperLand.removeModelPropertyLink( 'planetNameProperty', scratchpad.nameLinkId );\n    delete scratchpad.nameLinkId;\n\n    phet.paperLand.removeModelComponent( 'world' );\n    phet.paperLand.removeModelComponent( 'worldStepEmitter' );\n    phet.paperLand.removeModelComponent( 'gravityProperty' );\n    phet.paperLand.removeModelComponent( 'modelToViewPosition' );\n    phet.paperLand.removeModelComponent( 'viewToModelPosition' );\n    phet.paperLand.removeModelComponent( 'planetNames' );\n    phet.paperLand.removeModelComponent( 'planetNameProperty' );\n\n    phet.axon.stepTimer.removeListener( scratchpad.stepListener );\n    delete scratchpad.stepListener;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Lunar', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Model', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1169.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1169/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1169/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
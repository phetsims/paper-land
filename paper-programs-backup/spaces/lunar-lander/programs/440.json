{
  "number": 440,
  "originalCode": "// Thrust Control - X\n// Keywords: controller, model, move, position, change, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: N/A\n// Program Description: Controls just the X component of the force of thrust by\n//                      moving the program left and right.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board cod\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    const thrustProperty = sharedData.model.get( 'landerThrustProperty' );\n    if ( thrustProperty ) {\n      const range = new phet.dot.Range( 0, 25 );\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      const paperCenterX = ( positionPoints[ 0 ].x + positionPoints[ 2 ].x ) / 2;\n\n      // multiply normalized value by max of range \n      const newX = paperCenterX * range.max;\n\n      // make sure value is within the range\n      const constrainedX = range.constrainValue( newX );\n\n      // offset because for x component of thrust, we want 0 at the center of the screen\n      const centeredX = constrainedX - ( range.max / 2 );\n\n      // The axon.Property must take a Vector2, so we update it by creating a new Vector2\n      // with new X component and current y component\n      thrustProperty.value = new phet.dot.Vector2( centeredX, thrustProperty.value.y );\n\n    }\n    phet.paperLand.console.log( 'Thrust X: ' + thrustProperty.value.x )\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Thrust Control - X\n// Keywords: controller, model, move, position, change, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: N/A\n// Program Description: Controls just the X component of the force of thrust by\n//                      moving the program left and right.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board cod\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    const thrustProperty = sharedData.model.get( 'landerThrustProperty' );\n    if ( thrustProperty ) {\n      const range = new phet.dot.Range( 0, 25 );\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      const paperCenterX = ( positionPoints[ 0 ].x + positionPoints[ 2 ].x ) / 2;\n\n      // multiply normalized value by max of range \n      const newX = paperCenterX * range.max;\n\n      // make sure value is within the range\n      const constrainedX = range.constrainValue( newX );\n\n      // offset because for x component of thrust, we want 0 at the center of the screen\n      const centeredX = constrainedX - ( range.max / 2 );\n\n      // The axon.Property must take a Vector2, so we update it by creating a new Vector2\n      // with new X component and current y component\n      thrustProperty.value = new phet.dot.Vector2( centeredX, thrustProperty.value.y );\n\n    }\n    phet.paperLand.console.log( 'Thrust X: ' + thrustProperty.value.x )\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.440.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/440/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/440/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 1659,
  "originalCode": "// Thrust Sound\n// Keywords: thrust, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies): Thrust\n// Recommended Programs:\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/looping-thrust.mp3' );\n    const thrustSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n    scratchpad.thrustSound = thrustSound;\n\n    const outputLevelRange = new phet.dot.Range( 0, 0.8 );\n\n    phet.tambo.soundManager.addSoundGenerator( thrustSound );\n\n    // Called when it is possible to attach to the model component\n    const handleAttach = thrustProperty => {\n\n      // The actual work to do with the changing thrust\n      scratchpad.thrustListener = thrust => {\n        if ( thrust.magnitude === 0 ) {\n          thrustSound.stop();\n        }\n        else if ( !thrustSound.isPlaying ) {\n          thrustSound.play();\n        }\n\n        thrustSound.outputLevel = outputLevelRange.constrainValue( thrust.magnitude * 1 / 18 );\n      };\n\n      thrustProperty.link( scratchpad.thrustListener );\n    };\n\n    // Called when the model component or this program is removed\n    const handleDetach = thrustProperty => {\n\n      // remove the listener from the Property\n      thrustProperty.unlink( scratchpad.thrustListener );\n      delete scratchpad.thrustProperty;\n\n      // extra work - in this case stopping sound\n      thrustSound.stop();\n    }\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'landerThrustProperty', handleAttach, handleDetach );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    scratchpad.thrustSound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.thrustSound );\n    delete scratchpad.thrustSound;\n\n    phet.paperLand.removeModelObserver( 'landerThrustProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Thrust Sound\n// Keywords: thrust, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies): Thrust\n// Recommended Programs:\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/looping-thrust.mp3' );\n    const thrustSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n    scratchpad.thrustSound = thrustSound;\n\n    const outputLevelRange = new phet.dot.Range( 0, 0.8 );\n\n    phet.tambo.soundManager.addSoundGenerator( thrustSound );\n\n    // Called when it is possible to attach to the model component\n    const handleAttach = thrustProperty => {\n\n      // The actual work to do with the changing thrust\n      scratchpad.thrustListener = thrust => {\n        if ( thrust.magnitude === 0 ) {\n          thrustSound.stop();\n        }\n        else if ( !thrustSound.isPlaying ) {\n          thrustSound.play();\n        }\n\n        thrustSound.outputLevel = outputLevelRange.constrainValue( thrust.magnitude * 1 / 18 );\n      };\n\n      thrustProperty.link( scratchpad.thrustListener );\n    };\n\n    // Called when the model component or this program is removed\n    const handleDetach = thrustProperty => {\n\n      // remove the listener from the Property\n      thrustProperty.unlink( scratchpad.thrustListener );\n      delete scratchpad.thrustProperty;\n\n      // extra work - in this case stopping sound\n      thrustSound.stop();\n    }\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'landerThrustProperty', handleAttach, handleDetach );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    scratchpad.thrustSound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.thrustSound );\n    delete scratchpad.thrustSound;\n\n    phet.paperLand.removeModelObserver( 'landerThrustProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1659.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1659/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1659/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
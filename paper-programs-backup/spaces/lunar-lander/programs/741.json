{
  "number": 741,
  "originalCode": "// PLACEHOLDER FOR PRINTED PAPER\n// Keywords: lander, voicing, view, polling\n// ------------------------------- //\n// Required Programs (dependencies):\n// Recommended Programs:\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const utterance = new phet.utteranceQueue.Utterance( {\n      announcerOptions: { cancelOther: false }\n    } );\n\n    const handleLanderExists = landerVelocityProperty => {\n      const voicingStepListener = dt => {\n        const velocity = landerVelocityProperty.value;\n\n        if ( velocity.magnitude < 1 ) {\n          utterance.alert = `Lander not moving.`;\n          phet.scenery.voicingUtteranceQueue.addToBack( utterance );  \n        }\n        else {\n\n          // Default for MovementAlerter describes -y up\n          const describerVelocity = new phet.dot.Vector2( velocity.x, -velocity.y );\n          const directionString = phet.sceneryPhet.MovementAlerter.getDirectionDescriptionFromAngle(\n            describerVelocity.angle\n          );\n          utterance.alert = `Lander moving ${directionString}`;\n          phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n        }\n      };\n      scratchpad.intervalListener = phet.axon.stepTimer.setInterval( voicingStepListener, 7000 );\n    };\n\n    const handleLanderRemoved = lander => {\n      phet.axon.stepTimer.clearInterval( scratchpad.intervalListener );\n    }\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'landerVelocityProperty', handleLanderExists, handleLanderRemoved );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelObserver( 'landerVelocityProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Voice', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// PLACEHOLDER FOR PRINTED PAPER\n// Keywords: lander, voicing, view, polling\n// ------------------------------- //\n// Required Programs (dependencies):\n// Recommended Programs:\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const utterance = new phet.utteranceQueue.Utterance( {\n      announcerOptions: { cancelOther: false }\n    } );\n\n    const handleLanderExists = landerVelocityProperty => {\n      const voicingStepListener = dt => {\n        const velocity = landerVelocityProperty.value;\n\n        if ( velocity.magnitude < 1 ) {\n          utterance.alert = `Lander not moving.`;\n          phet.scenery.voicingUtteranceQueue.addToBack( utterance );  \n        }\n        else {\n\n          // Default for MovementAlerter describes -y up\n          const describerVelocity = new phet.dot.Vector2( velocity.x, -velocity.y );\n          const directionString = phet.sceneryPhet.MovementAlerter.getDirectionDescriptionFromAngle(\n            describerVelocity.angle\n          );\n          utterance.alert = `Lander moving ${directionString}`;\n          phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n        }\n      };\n      scratchpad.intervalListener = phet.axon.stepTimer.setInterval( voicingStepListener, 7000 );\n    };\n\n    const handleLanderRemoved = lander => {\n      phet.axon.stepTimer.clearInterval( scratchpad.intervalListener );\n    }\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'landerVelocityProperty', handleLanderExists, handleLanderRemoved );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelObserver( 'landerVelocityProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Voice', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.741.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/741/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/741/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
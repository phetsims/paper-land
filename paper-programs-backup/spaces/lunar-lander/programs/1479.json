{
  "number": 1479,
  "originalCode": "// Target\r\n// Keywords: p2, body, platform, target\r\n// ------------------------------- //\r\n// Required Programs (dependencies):\r\n// Recommended Programs:\r\n// Program Description:\r\n\r\nimportScripts('paper.js');\r\n\r\n(async () => {\r\n\r\n  //----------------------------------------------------------------------\r\n  // Board code\r\n  //----------------------------------------------------------------------\r\n\r\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n\r\n    // create a target shape body for p2 physics engine\r\n    const targetShape = new p2.Box( { width: 150, height: 15 } );\r\n    scratchpad.targetBody = new p2.Body( {\r\n\r\n      // zero mass means this body is static and doesn't respond to forces\r\n      mass: 0\r\n    } );\r\n    scratchpad.targetBody.addShape( targetShape );\r\n\r\n    // add the body to the paper land model\r\n    phet.paperLand.addModelComponent( 'target', scratchpad.targetBody );\r\n\r\n    // The view component for the target\r\n    scratchpad.targetRectangle = new phet.scenery.Rectangle( 0, 0, 250, 45, {\r\n      fill: '#1E90FF'\r\n    } );\r\n\r\n    // When the world is available, we will add the model component to the world\r\n    // and the view component to the display\r\n    const handleWorldExists = world => {\r\n      world.addBody( scratchpad.targetBody );\r\n      sharedData.scene.addChild( scratchpad.targetRectangle );\r\n    };\r\n\r\n    // When the world (or this program) is removed, we remove the model and view componets\r\n    const handleWorldRemoved = world => {\r\n      world.removeBody( scratchpad.targetBody );\r\n      sharedData.scene.removeChild( scratchpad.targetRectangle );\r\n    }\r\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'world', handleWorldExists, handleWorldRemoved );\r\n  };\r\n\r\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\r\n\r\n    if ( sharedData.model.has( 'viewToModelPosition' ) ) {\r\n\r\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\r\n      const paperCenterX = ( positionPoints[ 0 ].x + positionPoints[ 2 ].x ) / 2;\r\n      const paperCenterY = ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\r\n\r\n      const centerX = paperCenterX * sharedData.displaySize.width;\r\n      const centerY = paperCenterY * sharedData.displaySize.height;\r\n      const viewCenter = new phet.dot.Vector2( centerX, centerY );\r\n\r\n      // The model has a utility function to convert from view to model coordinates (since papers\r\n      // are in view coordinates).\r\n      const modelPosition = sharedData.model.get( 'viewToModelPosition' )( viewCenter );\r\n\r\n      // Position the body in the physics engine\r\n      scratchpad.targetBody.position = [ modelPosition.x, modelPosition.y ];\r\n\r\n      // position the component in the view\r\n      scratchpad.targetRectangle.center = viewCenter;\r\n    }\r\n  };\r\n\r\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n    phet.paperLand.removeModelObserver( 'world', scratchpad.observerId );\r\n  };\r\n\r\n  // Add the state change handler defined above as data for this paper.\r\n  await paper.set('data', {\r\n    paperPlaygroundData: {\r\n      updateTime: Date.now(),\r\n      eventHandlers: {\r\n        onProgramAdded: onProgramAdded.toString(),\r\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\r\n        onProgramRemoved: onProgramRemoved.toString()\r\n      }\r\n    }\r\n  } );\r\n\r\n  //----------------------------------------------------------------------\r\n  // Projector code\r\n  //----------------------------------------------------------------------\r\n\r\n  // Get a canvas object for this paper.\r\n  const canvas = await paper.get('canvas');\r\n\r\n  // Draw the name of the program on the canvas\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.font = '20px sans-serif';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillStyle = 'rgb(255,0,0)';\r\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\r\n  ctx.fillStyle = 'rgb(0,255,0)';\r\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 + 20);\r\n})();\r\n\r\n\r\n\r\n",
  "currentCode": "// Target\r\n// Keywords: p2, body, platform, target\r\n// ------------------------------- //\r\n// Required Programs (dependencies):\r\n// Recommended Programs:\r\n// Program Description:\r\n\r\nimportScripts('paper.js');\r\n\r\n(async () => {\r\n\r\n  //----------------------------------------------------------------------\r\n  // Board code\r\n  //----------------------------------------------------------------------\r\n\r\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n\r\n    // create a target shape body for p2 physics engine\r\n    const targetShape = new p2.Box( { width: 150, height: 15 } );\r\n    scratchpad.targetBody = new p2.Body( {\r\n\r\n      // zero mass means this body is static and doesn't respond to forces\r\n      mass: 0\r\n    } );\r\n    scratchpad.targetBody.addShape( targetShape );\r\n\r\n    // add the body to the paper land model\r\n    phet.paperLand.addModelComponent( 'target', scratchpad.targetBody );\r\n\r\n    // The view component for the target\r\n    scratchpad.targetRectangle = new phet.scenery.Rectangle( 0, 0, 250, 45, {\r\n      fill: '#1E90FF'\r\n    } );\r\n\r\n    // When the world is available, we will add the model component to the world\r\n    // and the view component to the display\r\n    const handleWorldExists = world => {\r\n      world.addBody( scratchpad.targetBody );\r\n      sharedData.scene.addChild( scratchpad.targetRectangle );\r\n    };\r\n\r\n    // When the world (or this program) is removed, we remove the model and view componets\r\n    const handleWorldRemoved = world => {\r\n      world.removeBody( scratchpad.targetBody );\r\n      sharedData.scene.removeChild( scratchpad.targetRectangle );\r\n    }\r\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'world', handleWorldExists, handleWorldRemoved );\r\n  };\r\n\r\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\r\n\r\n    if ( sharedData.model.has( 'viewToModelPosition' ) ) {\r\n\r\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\r\n      const paperCenterX = ( positionPoints[ 0 ].x + positionPoints[ 2 ].x ) / 2;\r\n      const paperCenterY = ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\r\n\r\n      const centerX = paperCenterX * sharedData.displaySize.width;\r\n      const centerY = paperCenterY * sharedData.displaySize.height;\r\n      const viewCenter = new phet.dot.Vector2( centerX, centerY );\r\n\r\n      // The model has a utility function to convert from view to model coordinates (since papers\r\n      // are in view coordinates).\r\n      const modelPosition = sharedData.model.get( 'viewToModelPosition' )( viewCenter );\r\n\r\n      // Position the body in the physics engine\r\n      scratchpad.targetBody.position = [ modelPosition.x, modelPosition.y ];\r\n\r\n      // position the component in the view\r\n      scratchpad.targetRectangle.center = viewCenter;\r\n    }\r\n  };\r\n\r\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\r\n    phet.paperLand.removeModelObserver( 'world', scratchpad.observerId );\r\n  };\r\n\r\n  // Add the state change handler defined above as data for this paper.\r\n  await paper.set('data', {\r\n    paperPlaygroundData: {\r\n      updateTime: Date.now(),\r\n      eventHandlers: {\r\n        onProgramAdded: onProgramAdded.toString(),\r\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\r\n        onProgramRemoved: onProgramRemoved.toString()\r\n      }\r\n    }\r\n  } );\r\n\r\n  //----------------------------------------------------------------------\r\n  // Projector code\r\n  //----------------------------------------------------------------------\r\n\r\n  // Get a canvas object for this paper.\r\n  const canvas = await paper.get('canvas');\r\n\r\n  // Draw the name of the program on the canvas\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.font = '20px sans-serif';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillStyle = 'rgb(255,0,0)';\r\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\r\n  ctx.fillStyle = 'rgb(0,255,0)';\r\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 + 20);\r\n})();\r\n\r\n\r\n\r\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1479.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1479/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1479/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
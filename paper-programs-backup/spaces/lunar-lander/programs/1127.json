{
  "number": 1127,
  "originalCode": "// Mass Control - Rotation\n// Keywords: controller, mass, dial, rotation, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Controls the mass of the lander by rotating the program.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // this controller will change the mass to be within this range\n    // NOTE: You could put this in model component if multiple things care about this range.\n    // NOTE: That would also be more efficient, notice we are creating a new Range every\n    //       time the program moves!\n    const range = new phet.dot.Range( 1, 25 ); // in kg\n\n    // check to see that the model has the Property we want to control\n    if ( sharedData.model.has( 'landerMassProperty' ) ) {\n\n      // get a reference to the model Property so we can change it\n      const landerMassProperty = sharedData.model.get( 'landerMassProperty' );\n\n      // this utility function takes the paper points (from Jan's Paper API) and calculates a normalized\n      // rotation. 0 means no rotation, 1 means it rotated a full 360 degrees. You can also use\n      // getProgramRotation() if you want the value in radians. A normalized value will often be easier\n      // to scale a model value.\n      const normalizedRotation = phet.paperLand.utils.getNormalizedProgramRotation( positionPoints );\n\n      // calculate new mass from rotation - we want 0 rotation to be the min of the range (not zero mass),\n      // so the value is offset by the minimum mass. \n      const scaledMass = range.min + normalizedRotation * ( range.max - range.min );\n\n      // set the new value to the mass Property\n      landerMassProperty.value = scaledMass;\n      phet.paperLand.console.log( landerMassProperty );\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Mass', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Dial', canvas.width / 2, canvas.height / 2 + 20);\n\n})();\n",
  "currentCode": "// Mass Control - Rotation\n// Keywords: controller, mass, dial, rotation, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Controls the mass of the lander by rotating the program.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // this controller will change the mass to be within this range\n    // NOTE: You could put this in model component if multiple things care about this range.\n    // NOTE: That would also be more efficient, notice we are creating a new Range every\n    //       time the program moves!\n    const range = new phet.dot.Range( 1, 25 ); // in kg\n\n    // check to see that the model has the Property we want to control\n    if ( sharedData.model.has( 'landerMassProperty' ) ) {\n\n      // get a reference to the model Property so we can change it\n      const landerMassProperty = sharedData.model.get( 'landerMassProperty' );\n\n      // this utility function takes the paper points (from Jan's Paper API) and calculates a normalized\n      // rotation. 0 means no rotation, 1 means it rotated a full 360 degrees. You can also use\n      // getProgramRotation() if you want the value in radians. A normalized value will often be easier\n      // to scale a model value.\n      const normalizedRotation = phet.paperLand.utils.getNormalizedProgramRotation( positionPoints );\n\n      // calculate new mass from rotation - we want 0 rotation to be the min of the range (not zero mass),\n      // so the value is offset by the minimum mass. \n      const scaledMass = range.min + normalizedRotation * ( range.max - range.min );\n\n      // set the new value to the mass Property\n      landerMassProperty.value = scaledMass;\n      phet.paperLand.console.log( landerMassProperty );\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Mass', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Dial', canvas.width / 2, canvas.height / 2 + 20);\n\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.1127.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/1127/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/1127/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
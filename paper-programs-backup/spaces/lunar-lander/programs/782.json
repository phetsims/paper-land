{
  "number": 782,
  "originalCode": "// Thrust Control - Y\n// Keywords: controller, model, move, position, change, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: N/A\n// Program Description: Controls just the Y component of the force of thrust by\n//                      moving the program up and down.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    const thrustProperty = sharedData.model.get( 'landerThrustProperty' );\n    if ( thrustProperty ) {\n      const range = new phet.dot.Range( 0, 25 );\n\n      // This is the center.y, normalized from 0 to 1. Graphics coordinate system has 0\n      // at top so subtract from 1 so that 0 is at the bottom.\n      const paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;  \n\n      // normalized value scaled by our range\n      const newY = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedY = range.constrainValue( newY );\n\n      // The axon.Property requires a Vector2 value - so we create a new Vector2 for it,\n      // using the new y value and the existing x value\n      thrustProperty.value = new phet.dot.Vector2( thrustProperty.value.x, constrainedY );\n    }\n    phet.paperLand.console.log( 'Thrust Y: ' + thrustProperty.value.y )    \n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// Thrust Control - Y\n// Keywords: controller, model, move, position, change, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: N/A\n// Program Description: Controls just the Y component of the force of thrust by\n//                      moving the program up and down.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    const thrustProperty = sharedData.model.get( 'landerThrustProperty' );\n    if ( thrustProperty ) {\n      const range = new phet.dot.Range( 0, 25 );\n\n      // This is the center.y, normalized from 0 to 1. Graphics coordinate system has 0\n      // at top so subtract from 1 so that 0 is at the bottom.\n      const paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;  \n\n      // normalized value scaled by our range\n      const newY = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedY = range.constrainValue( newY );\n\n      // The axon.Property requires a Vector2 value - so we create a new Vector2 for it,\n      // using the new y value and the existing x value\n      thrustProperty.value = new phet.dot.Vector2( thrustProperty.value.x, constrainedY );\n    }\n    phet.paperLand.console.log( 'Thrust Y: ' + thrustProperty.value.y )    \n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.lunar-lander.782.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/lunar-lander/programs/782/debugInfo",
  "claimUrl": "/api/spaces/lunar-lander/programs/782/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 1341,
  "originalCode": "// Time-Based Model & View Demo\n// Keywords: time, time-based, model\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Example program with functioning Board and Projector code!\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    if ( scratchpad.imageNode ) {\n      alert( 'There is already an imageNode on the scratchpad!' );\n    }\n\n    const imageSource = 'lunarLander.png';\n\n    // Create a Scenery image node.\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', `media/images/${imageSource}` );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      maxWidth: 70\n    } );\n\n    // Add the image to the scene.\n    sharedData.scene.addChild( imageNode );\n\n    // Add the image to the scratchpad so that it can be added later.\n    scratchpad.imageNode = imageNode;\n\n    // Create a simple model with a position that moves in a circular motion around a\n    // center point.  Values are normalized to the screen size.\n    const centerPoint = new phet.dot.Vector2( 0.5, 0.5 );\n    const positionRelativeToCenter = new phet.dot.Vector2( 0.25, 0 );\n    const rotationRate = Math.PI / 2;\n    const positionProperty = new phet.axon.Property( phet.dot.Vector2.ZERO );\n    scratchpad.stepListener = dt => {\n      positionRelativeToCenter.rotate( rotationRate * dt );\n      positionProperty.set( centerPoint.plus( positionRelativeToCenter ) );\n    }\n\n    // Add the step listener to the step timer to implement time-based behavior.\n    phet.axon.stepTimer.addListener( scratchpad.stepListener );\n\n    // Add the postion Property to the shared data model.\n    phet.paperLand.addModelComponent( 'positionProperty', positionProperty );\n\n    // Create a listener to update the image position on the display.\n    scratchpad.updatePosition = position => {\n      imageNode.centerX = sharedData.displaySize.width * position.x;\n      imageNode.centerY = sharedData.displaySize.height * position.y;\n    };\n\n    // Update the image position as the model position changes.\n    positionProperty.link( scratchpad.updatePosition );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Disconnect from the step listener.\n    if ( scratchpad.stepListener ) {\n      console.log( 'removing listener' );\n      phet.axon.stepTimer.removeListener( scratchpad.stepListener );\n      scratchpad.stepListener = null;\n    }\n    else {\n      alert( 'No step listener found when paper removed.' );\n    }\n\n    // Remove the image from the display.\n    if ( scratchpad.imageNode ) {\n      sharedData.scene.removeChild( scratchpad.imageNode );\n      scratchpad.imageNode = null;\n    }\n    else {\n      alert( 'Error: Image node not found in scratchpad data.' );\n    }\n\n    // Unhook the image position updater and remove the model element.\n    if ( sharedData.model.has('positionProperty') ) {\n      sharedData.model.get('positionProperty').unlink( scratchpad.updatePosition );\n      scratchpad.updatePosition = null;\n      phet.paperLand.removeModelComponent( 'positionProperty' );\n    }\n    else {\n      alert( 'No positionProperty found when paper removed.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw message on the canvas.\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Time-Based', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Demo', canvas.width / 2, canvas.height / 2 + 20 );\n  \n} )();\n\n",
  "currentCode": "// Time-Based Model & View Demo\n// Keywords: time, time-based, model\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Example program with functioning Board and Projector code!\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    if ( scratchpad.imageNode ) {\n      alert( 'There is already an imageNode on the scratchpad!' );\n    }\n\n    const imageSource = 'lunarLander.png';\n\n    // Create a Scenery image node.\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', `media/images/${imageSource}` );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      maxWidth: 70\n    } );\n\n    // Add the image to the scene.\n    sharedData.scene.addChild( imageNode );\n\n    // Add the image to the scratchpad so that it can be added later.\n    scratchpad.imageNode = imageNode;\n\n    // Create a simple model with a position that moves in a circular motion around a\n    // center point.  Values are normalized to the screen size.\n    const centerPoint = new phet.dot.Vector2( 0.5, 0.5 );\n    const positionRelativeToCenter = new phet.dot.Vector2( 0.25, 0 );\n    const rotationRate = Math.PI / 2;\n    const positionProperty = new phet.axon.Property( phet.dot.Vector2.ZERO );\n    scratchpad.stepListener = dt => {\n      positionRelativeToCenter.rotate( rotationRate * dt );\n      positionProperty.set( centerPoint.plus( positionRelativeToCenter ) );\n    }\n\n    // Add the step listener to the step timer to implement time-based behavior.\n    phet.axon.stepTimer.addListener( scratchpad.stepListener );\n\n    // Add the postion Property to the shared data model.\n    phet.paperLand.addModelComponent( 'positionProperty', positionProperty );\n\n    // Create a listener to update the image position on the display.\n    scratchpad.updatePosition = position => {\n      imageNode.centerX = sharedData.displaySize.width * position.x;\n      imageNode.centerY = sharedData.displaySize.height * position.y;\n    };\n\n    // Update the image position as the model position changes.\n    positionProperty.link( scratchpad.updatePosition );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Disconnect from the step listener.\n    if ( scratchpad.stepListener ) {\n      console.log( 'removing listener' );\n      phet.axon.stepTimer.removeListener( scratchpad.stepListener );\n      scratchpad.stepListener = null;\n    }\n    else {\n      alert( 'No step listener found when paper removed.' );\n    }\n\n    // Remove the image from the display.\n    if ( scratchpad.imageNode ) {\n      sharedData.scene.removeChild( scratchpad.imageNode );\n      scratchpad.imageNode = null;\n    }\n    else {\n      alert( 'Error: Image node not found in scratchpad data.' );\n    }\n\n    // Unhook the image position updater and remove the model element.\n    if ( sharedData.model.has('positionProperty') ) {\n      sharedData.model.get('positionProperty').unlink( scratchpad.updatePosition );\n      scratchpad.updatePosition = null;\n      phet.paperLand.removeModelComponent( 'positionProperty' );\n    }\n    else {\n      alert( 'No positionProperty found when paper removed.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw message on the canvas.\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Time-Based', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Demo', canvas.width / 2, canvas.height / 2 + 20 );\n  \n} )();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.simple-demos.1341.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/simple-demos/programs/1341/debugInfo",
  "claimUrl": "/api/spaces/simple-demos/programs/1341/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
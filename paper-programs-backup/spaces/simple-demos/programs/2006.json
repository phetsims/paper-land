{
  "number": 2006,
  "originalCode": "// Basic Markers\n// Keywords: example, demo\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: An example of the marker functions. These functions are generally provided with\n//                      an array of the added/removed/current markers. Each marker in that array has\n//                      info of Jan Paul's Markers API, see https://github.com/janpaul123/paperprograms/blob/master/docs/api.md#marker-points\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    \n    // Whenever a marker is added to the camera view\n    scratchpad.globalMarkersAddedListener = addedMarkers => {\n      phet.paperLand.console.log( `Added ${addedMarkers.length} marker(s) to camera` );\n    };\n    phet.paperLand.markersAddedEmitter.addListener( scratchpad.globalMarkersAddedListener );\n\n    // Whenever a marker is removed from the camera view\n    scratchpad.globalMarkersRemovedListener = removedMarkers => {\n      phet.paperLand.console.log( `Removed ${removedMarkers.length} marker(s) from camera` );\n    }\n    phet.paperLand.markersRemovedEmitter.addListener( scratchpad.globalMarkersRemovedListener );\n\n    // Whenever a marker moves, this function is called\n    scratchpad.globalMarkersChangedPositionListener = movedMarkers => {\n      phet.paperLand.console.log( `Moved ${movedMarkers.length} marker(s) in camera` );\n    }\n    phet.paperLand.markersChangedPositionEmitter.addListener( scratchpad.globalMarkersChangedPositionListener );\n  };\n\n  // When markers are specifically added to THIS program.\n  const onProgramMarkersAdded = ( paperProgramNumber, currentPaperProgramPoints, scratchpad, sharedData, currentMarkersForProgram ) => {\n    phet.paperLand.console.log( `${currentMarkersForProgram.length} marker(s) added to program ${paperProgramNumber}` );\n  }\n\n  // When markers are specifically removed from THIS program.\n  const onProgramMarkersRemoved = ( paperProgramNumber, currentPaperProgramPoints, scratchpad, sharedData, currentMarkersForProgram ) => {\n    phet.paperLand.console.log( `marker(s) removed from program ${paperProgramNumber}, ${currentMarkersForProgram.length} remain` );\n  };\n\n  // When markers are specifically moved on THIS program\n  const onProgramMarkersChangedPosition = ( paperProgramNumber, currentPaperProgramPoints, scratchpad, sharedData, currentMarkersForProgram ) => {\n    phet.paperLand.console.log( `${currentMarkersForProgram.length} markers(s) moved on program ${paperProgramNumber}!` );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove all the listeners when the program is removed.\n    phet.paperLand.markersAddedEmitter.removeListener( scratchpad.globalMarkersAddedListener );\n    phet.paperLand.markersRemovedEmitter.removeListener( scratchpad.globalMarkersRemovedListener );\n    phet.paperLand.markersChangedPositionEmitter.removeListener( scratchpad.globalMarkersChangedPositionListener );\n    delete scratchpad.globalMarkersAddedListener;\n    delete scratchpad.globalMarkersRemovedListener;\n    delete scratchpad.globalMarkersChangedPositionListener;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Basic', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Markers', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Basic Markers\n// Keywords: example, demo\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: An example of the marker functions. These functions are generally provided with\n//                      an array of the added/removed/current markers. Each marker in that array has\n//                      info of Jan Paul's Markers API, see https://github.com/janpaul123/paperprograms/blob/master/docs/api.md#marker-points\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    \n    // Whenever a marker is added to the camera view\n    scratchpad.globalMarkersAddedListener = addedMarkers => {\n      phet.paperLand.console.log( `Added ${addedMarkers.length} marker(s) to camera` );\n    };\n    phet.paperLand.markersAddedEmitter.addListener( scratchpad.globalMarkersAddedListener );\n\n    // Whenever a marker is removed from the camera view\n    scratchpad.globalMarkersRemovedListener = removedMarkers => {\n      phet.paperLand.console.log( `Removed ${removedMarkers.length} marker(s) from camera` );\n    }\n    phet.paperLand.markersRemovedEmitter.addListener( scratchpad.globalMarkersRemovedListener );\n\n    // Whenever a marker moves, this function is called\n    scratchpad.globalMarkersChangedPositionListener = movedMarkers => {\n      phet.paperLand.console.log( `Moved ${movedMarkers.length} marker(s) in camera` );\n    }\n    phet.paperLand.markersChangedPositionEmitter.addListener( scratchpad.globalMarkersChangedPositionListener );\n  };\n\n  // When markers are specifically added to THIS program.\n  const onProgramMarkersAdded = ( paperProgramNumber, currentPaperProgramPoints, scratchpad, sharedData, currentMarkersForProgram ) => {\n    phet.paperLand.console.log( `${currentMarkersForProgram.length} marker(s) added to program ${paperProgramNumber}` );\n  }\n\n  // When markers are specifically removed from THIS program.\n  const onProgramMarkersRemoved = ( paperProgramNumber, currentPaperProgramPoints, scratchpad, sharedData, currentMarkersForProgram ) => {\n    phet.paperLand.console.log( `marker(s) removed from program ${paperProgramNumber}, ${currentMarkersForProgram.length} remain` );\n  };\n\n  // When markers are specifically moved on THIS program\n  const onProgramMarkersChangedPosition = ( paperProgramNumber, currentPaperProgramPoints, scratchpad, sharedData, currentMarkersForProgram ) => {\n    phet.paperLand.console.log( `${currentMarkersForProgram.length} markers(s) moved on program ${paperProgramNumber}!` );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove all the listeners when the program is removed.\n    phet.paperLand.markersAddedEmitter.removeListener( scratchpad.globalMarkersAddedListener );\n    phet.paperLand.markersRemovedEmitter.removeListener( scratchpad.globalMarkersRemovedListener );\n    phet.paperLand.markersChangedPositionEmitter.removeListener( scratchpad.globalMarkersChangedPositionListener );\n    delete scratchpad.globalMarkersAddedListener;\n    delete scratchpad.globalMarkersRemovedListener;\n    delete scratchpad.globalMarkersChangedPositionListener;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Basic', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Markers', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.simple-demos.2006.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/simple-demos/programs/2006/debugInfo",
  "claimUrl": "/api/spaces/simple-demos/programs/2006/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 674,
  "originalCode": "// Spider and web\n// Keywords: markers, image, demo, example\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs:\n// Program Description: An example program that watches for all detected markers. Draws a spider on \n//                      the program and creates a \"web\" between all markers that surround the spider.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // A parent Node for all lines of the web (added before the spider image so it is behind)\n    scratchpad.allLinesNode = new phet.scenery.Node();\n    sharedData.scene.addChild( scratchpad.allLinesNode );\n\n    // Create a Scenery image node for a spider and add it to the scene\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', 'media/images/spider.png' );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      maxWidth: 140\n    } );\n    sharedData.scene.addChild( imageNode );\n    scratchpad.imageNode = imageNode;\n\n    // To be called when we detect a change to global markers (add, remove, move)\n    scratchpad.redrawWeb = () => {\n\n      // Remove all of the previous web lines\n      scratchpad.allLinesNode.removeAllChildren();\n\n      // To create the web, draw a line between every single detected marker\n      sharedData.allMarkers.forEach( markerA => {\n        sharedData.allMarkers.forEach( markerB => {\n\n          // Don't draw a line between the same marker\n          if ( markerA !== markerB ) {\n            const p1 = new phet.dot.Vector2(\n              markerA.position.x * sharedData.displaySize.width,\n              markerA.position.y * sharedData.displaySize.height \n            );\n            const p2 = new phet.dot.Vector2(\n              markerB.position.x * sharedData.displaySize.width,\n              markerB.position.y * sharedData.displaySize.height \n            );\n\n            const line = new phet.scenery.Line( p1, p2, { stroke: 'rgb(90,114,120)', lineWidth: 1.5 } );\n            scratchpad.allLinesNode.addChild( line );\n          }\n        } );\n      } );\n    };\n\n    // NOTE: These callbacks provide an array of markers that were specifically added/removed/changed. But they are not\n    // used in this demo. In this example we just draw lines between every single detected marker (accessed through\n    // sharedData.allMarkers).\n    phet.paperLand.markersAddedEmitter.addListener( scratchpad.redrawWeb );\n    phet.paperLand.markersRemovedEmitter.addListener( scratchpad.redrawWeb );\n    phet.paperLand.markersChangedPositionEmitter.addListener( scratchpad.redrawWeb );\n\n    // redraw markers right away when the progrma is added\n    scratchpad.redrawWeb();\n  };\n\n  // Called when the program moves.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    // Center the image based on the position of the paper.\n    const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n    const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n    scratchpad.imageNode.centerX = paperCenterX * sharedData.displaySize.width;\n    scratchpad.imageNode.centerY = paperCenterY * sharedData.displaySize.height;\n  };\n\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    sharedData.scene.removeChild( scratchpad.imageNode );\n    scratchpad.imageNode = null;\n\n    sharedData.scene.removeChild( scratchpad.allLinesNode );\n    delete scratchpad.allLinesNode;\n\n    phet.paperLand.markersAddedEmitter.removeListener( scratchpad.redrawWeb );\n    phet.paperLand.markersRemovedEmitter.removeListener( scratchpad.redrawWeb );\n    phet.paperLand.markersChangedPositionEmitter.removeListener( scratchpad.redrawWeb );\n    delete scratchpad.redrawWeb;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Toggle', canvas.width / 2, canvas.height / 2 - 10);\n})();\n\n",
  "currentCode": "// Spider and web\n// Keywords: markers, image, demo, example\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs:\n// Program Description: An example program that watches for all detected markers. Draws a spider on \n//                      the program and creates a \"web\" between all markers that surround the spider.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // A parent Node for all lines of the web (added before the spider image so it is behind)\n    scratchpad.allLinesNode = new phet.scenery.Node();\n    sharedData.scene.addChild( scratchpad.allLinesNode );\n\n    // Create a Scenery image node for a spider and add it to the scene\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', 'media/images/spider.png' );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      maxWidth: 140\n    } );\n    sharedData.scene.addChild( imageNode );\n    scratchpad.imageNode = imageNode;\n\n    // To be called when we detect a change to global markers (add, remove, move)\n    scratchpad.redrawWeb = () => {\n\n      // Remove all of the previous web lines\n      scratchpad.allLinesNode.removeAllChildren();\n\n      // To create the web, draw a line between every single detected marker\n      sharedData.allMarkers.forEach( markerA => {\n        sharedData.allMarkers.forEach( markerB => {\n\n          // Don't draw a line between the same marker\n          if ( markerA !== markerB ) {\n            const p1 = new phet.dot.Vector2(\n              markerA.position.x * sharedData.displaySize.width,\n              markerA.position.y * sharedData.displaySize.height \n            );\n            const p2 = new phet.dot.Vector2(\n              markerB.position.x * sharedData.displaySize.width,\n              markerB.position.y * sharedData.displaySize.height \n            );\n\n            const line = new phet.scenery.Line( p1, p2, { stroke: 'rgb(90,114,120)', lineWidth: 1.5 } );\n            scratchpad.allLinesNode.addChild( line );\n          }\n        } );\n      } );\n    };\n\n    // NOTE: These callbacks provide an array of markers that were specifically added/removed/changed. But they are not\n    // used in this demo. In this example we just draw lines between every single detected marker (accessed through\n    // sharedData.allMarkers).\n    phet.paperLand.markersAddedEmitter.addListener( scratchpad.redrawWeb );\n    phet.paperLand.markersRemovedEmitter.addListener( scratchpad.redrawWeb );\n    phet.paperLand.markersChangedPositionEmitter.addListener( scratchpad.redrawWeb );\n\n    // redraw markers right away when the progrma is added\n    scratchpad.redrawWeb();\n  };\n\n  // Called when the program moves.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    // Center the image based on the position of the paper.\n    const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n    const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n    scratchpad.imageNode.centerX = paperCenterX * sharedData.displaySize.width;\n    scratchpad.imageNode.centerY = paperCenterY * sharedData.displaySize.height;\n  };\n\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    sharedData.scene.removeChild( scratchpad.imageNode );\n    scratchpad.imageNode = null;\n\n    sharedData.scene.removeChild( scratchpad.allLinesNode );\n    delete scratchpad.allLinesNode;\n\n    phet.paperLand.markersAddedEmitter.removeListener( scratchpad.redrawWeb );\n    phet.paperLand.markersRemovedEmitter.removeListener( scratchpad.redrawWeb );\n    phet.paperLand.markersChangedPositionEmitter.removeListener( scratchpad.redrawWeb );\n    delete scratchpad.redrawWeb;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Toggle', canvas.width / 2, canvas.height / 2 - 10);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.simple-demos.674.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/simple-demos/programs/674/debugInfo",
  "claimUrl": "/api/spaces/simple-demos/programs/674/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
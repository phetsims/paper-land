{
  "number": 1993,
  "originalCode": "// Marker Toggle\n// Keywords: a/b, switch, toggle, markers, example\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs:\n// Program Description: Creates a component that toggles between two values. Adding a marker (any color)\n//                      to the program sets the value to the \"right\" value.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // The values for the toggle - when toggled, it takes on the valueB value.\n    // Note that values do not need to be boolean (but they can be if you would like).\n    scratchpad.valueA = 'VALUE_A';\n    scratchpad.valueB = 'VALUE_B';\n\n    // Create an axon.Property for the model that any program can observe.\n    phet.paperLand.addModelComponent( 'toggleProperty', new phet.axon.Property( scratchpad.valueA ) );\n\n    // This is the function we want to call whenever a marker is added or removed from the program. You\n    // could copy/paste the body of this function right into onProgramMarkersAdded/Removed functions,\n    // but it is created once here and assigned to the scratchpad to avoid code duplication. The function\n    // takes a single argument, the current number of markers contained in the program.\n    scratchpad.handleMarkersChanged = currentMarkers => {\n\n      // If the model doesn't have the Property we created when the program was added,\n      // something went wrong and this function will fail!\n      if ( !sharedData.model.has( 'toggleProperty' ) ) {\n        phet.paperLand.console.error( 'toggleProperty does not exist in the model!' );\n        return;\n      }\n\n      // get a reference to the Property now that we know it exists\n      const toggleProperty = sharedData.model.get( 'toggleProperty' );\n\n      // This toggle takes on the 'valueB' value when there are any number of markers in the program\n      // This is called the ternary operator, it is shorthand for if/else.\n      toggleProperty.value = currentMarkers.length > 0 ? scratchpad.valueB : scratchpad.valueA;\n    }\n\n    // Observe the changing Property - this function just prints the new value to the console, but\n    // you could do anything in this function or put this function in a different program. addModelPropertyLink\n    // returns a uniqueID which is saved to the scratchpad so it can be easily unlinked later.\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'toggleProperty', value => {\n      phet.paperLand.console.warn( `New toggle value: ${value}` );\n    } );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // remove the Property from the model\n    phet.paperLand.removeModelComponent( 'toggleProperty' );\n\n    // unlink the Property listener that was logging the new value to the console\n    scratchpad.linkId = phet.paperLand.removeModelPropertyLink( 'toggleProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n\n    // we are done with our Property controller function\n    delete scratchpad.handleMarkersChanged;\n  };\n\n  // Called whenever a marker is added to the program\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.handleMarkersChanged( currentMarkers );\n  };\n\n  // Called whenever a marker is removed from the program\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.handleMarkersChanged( currentMarkers );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Toggle', canvas.width / 2, canvas.height / 2 - 10);\n})();\n",
  "currentCode": "// Marker Toggle\n// Keywords: a/b, switch, toggle, markers, example\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs:\n// Program Description: Creates a component that toggles between two values. Adding a marker (any color)\n//                      to the program sets the value to the \"right\" value.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // The values for the toggle - when toggled, it takes on the valueB value.\n    // Note that values do not need to be boolean (but they can be if you would like).\n    scratchpad.valueA = 'VALUE_A';\n    scratchpad.valueB = 'VALUE_B';\n\n    // Create an axon.Property for the model that any program can observe.\n    phet.paperLand.addModelComponent( 'toggleProperty', new phet.axon.Property( scratchpad.valueA ) );\n\n    // This is the function we want to call whenever a marker is added or removed from the program. You\n    // could copy/paste the body of this function right into onProgramMarkersAdded/Removed functions,\n    // but it is created once here and assigned to the scratchpad to avoid code duplication. The function\n    // takes a single argument, the current number of markers contained in the program.\n    scratchpad.handleMarkersChanged = currentMarkers => {\n\n      // If the model doesn't have the Property we created when the program was added,\n      // something went wrong and this function will fail!\n      if ( !sharedData.model.has( 'toggleProperty' ) ) {\n        phet.paperLand.console.error( 'toggleProperty does not exist in the model!' );\n        return;\n      }\n\n      // get a reference to the Property now that we know it exists\n      const toggleProperty = sharedData.model.get( 'toggleProperty' );\n\n      // This toggle takes on the 'valueB' value when there are any number of markers in the program\n      // This is called the ternary operator, it is shorthand for if/else.\n      toggleProperty.value = currentMarkers.length > 0 ? scratchpad.valueB : scratchpad.valueA;\n    }\n\n    // Observe the changing Property - this function just prints the new value to the console, but\n    // you could do anything in this function or put this function in a different program. addModelPropertyLink\n    // returns a uniqueID which is saved to the scratchpad so it can be easily unlinked later.\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'toggleProperty', value => {\n      phet.paperLand.console.warn( `New toggle value: ${value}` );\n    } );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // remove the Property from the model\n    phet.paperLand.removeModelComponent( 'toggleProperty' );\n\n    // unlink the Property listener that was logging the new value to the console\n    scratchpad.linkId = phet.paperLand.removeModelPropertyLink( 'toggleProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n\n    // we are done with our Property controller function\n    delete scratchpad.handleMarkersChanged;\n  };\n\n  // Called whenever a marker is added to the program\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.handleMarkersChanged( currentMarkers );\n  };\n\n  // Called whenever a marker is removed from the program\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.handleMarkersChanged( currentMarkers );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Toggle', canvas.width / 2, canvas.height / 2 - 10);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.simple-demos.1993.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/simple-demos/programs/1993/debugInfo",
  "claimUrl": "/api/spaces/simple-demos/programs/1993/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
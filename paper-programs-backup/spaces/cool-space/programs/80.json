{
  "number": 80,
  "originalCode": "// Bounds\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const leftTopBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 0.33, 0.33 )\n      );\n      phet.paperLand.addModelComponent( 'leftTopBounds', leftTopBounds );\n    \n\n      const centerTopBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.33, 0, 0.66, 0.33 )\n      );\n      phet.paperLand.addModelComponent( 'centerTopBounds', centerTopBounds );\n    \n\n      const rightTopBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.66, 0, 1, 0.33 )\n      );\n      phet.paperLand.addModelComponent( 'rightTopBounds', rightTopBounds );\n    \n\n      const leftCenterBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0.33, 0.33, 0.66 )\n      );\n      phet.paperLand.addModelComponent( 'leftCenterBounds', leftCenterBounds );\n    \n\n      const centerBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.33, 0.33, 0.66, 0.66 )\n      );\n      phet.paperLand.addModelComponent( 'centerBounds', centerBounds );\n    \n\n      const rightCenterBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.66, 0.33, 1, 0.66 )\n      );\n      phet.paperLand.addModelComponent( 'rightCenterBounds', rightCenterBounds );\n    \n\n      const leftBottomBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0.66, 0.33, 1 )\n      );\n      phet.paperLand.addModelComponent( 'leftBottomBounds', leftBottomBounds );\n    \n\n      const centerBottomBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.33, 0.66, 0.66, 1 )\n      );\n      phet.paperLand.addModelComponent( 'centerBottomBounds', centerBottomBounds );\n    \n\n      const rightBottomBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.66, 0.66, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'rightBottomBounds', rightBottomBounds );\n    \n\n\n      // Create a shape with kite.\n      const leftTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const leftTopViewPath = new phet.scenery.Path( leftTopViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( leftTopViewPath );\n      scratchpad.leftTopViewPath = leftTopViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.leftTopViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'leftTopBounds' ], ( leftTopBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const leftTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.leftTopViewPath.setShape( leftTopViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.leftTopViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        leftTopViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        leftTopViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        leftTopViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        leftTopViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        leftTopViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        leftTopViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        leftTopViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        leftTopViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        leftTopViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        leftTopViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const leftTopViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( leftTopViewPath.localBounds.width || 1 ) / ( leftTopViewPath.localBounds.height || 1 );\n\n        const scaleX = leftTopViewPathViewBounds.width / ( leftTopViewPath.localBounds.width || 1 );\n        const scaleY = leftTopViewPathViewBounds.height / ( leftTopViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          leftTopViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          leftTopViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        leftTopViewPath.center = leftTopViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          leftTopViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          leftTopViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          leftTopViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          leftTopViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          leftTopViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          leftTopViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( leftTopBounds );\nsetFill( 'rgba(255, 0, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const centerTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const centerTopViewPath = new phet.scenery.Path( centerTopViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( centerTopViewPath );\n      scratchpad.centerTopViewPath = centerTopViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.centerTopViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'centerTopBounds' ], ( centerTopBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const centerTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.centerTopViewPath.setShape( centerTopViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.centerTopViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        centerTopViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        centerTopViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        centerTopViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        centerTopViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        centerTopViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        centerTopViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        centerTopViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        centerTopViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        centerTopViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        centerTopViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const centerTopViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( centerTopViewPath.localBounds.width || 1 ) / ( centerTopViewPath.localBounds.height || 1 );\n\n        const scaleX = centerTopViewPathViewBounds.width / ( centerTopViewPath.localBounds.width || 1 );\n        const scaleY = centerTopViewPathViewBounds.height / ( centerTopViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          centerTopViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          centerTopViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        centerTopViewPath.center = centerTopViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          centerTopViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          centerTopViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          centerTopViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          centerTopViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          centerTopViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          centerTopViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( centerTopBounds );\nsetFill( 'rgba(0, 0, 255, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const rightTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const rightTopViewPath = new phet.scenery.Path( rightTopViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( rightTopViewPath );\n      scratchpad.rightTopViewPath = rightTopViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.rightTopViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'rightTopBounds' ], ( rightTopBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const rightTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.rightTopViewPath.setShape( rightTopViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.rightTopViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        rightTopViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        rightTopViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        rightTopViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        rightTopViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        rightTopViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        rightTopViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        rightTopViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        rightTopViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        rightTopViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        rightTopViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const rightTopViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( rightTopViewPath.localBounds.width || 1 ) / ( rightTopViewPath.localBounds.height || 1 );\n\n        const scaleX = rightTopViewPathViewBounds.width / ( rightTopViewPath.localBounds.width || 1 );\n        const scaleY = rightTopViewPathViewBounds.height / ( rightTopViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          rightTopViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          rightTopViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        rightTopViewPath.center = rightTopViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          rightTopViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          rightTopViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          rightTopViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          rightTopViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          rightTopViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          rightTopViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( rightTopBounds );\nsetFill( 'rgba(0, 128, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const leftCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const leftCenterViewPath = new phet.scenery.Path( leftCenterViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( leftCenterViewPath );\n      scratchpad.leftCenterViewPath = leftCenterViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.leftCenterViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'leftCenterBounds' ], ( leftCenterBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const leftCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.leftCenterViewPath.setShape( leftCenterViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.leftCenterViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        leftCenterViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        leftCenterViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        leftCenterViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        leftCenterViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        leftCenterViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        leftCenterViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        leftCenterViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        leftCenterViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        leftCenterViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        leftCenterViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const leftCenterViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( leftCenterViewPath.localBounds.width || 1 ) / ( leftCenterViewPath.localBounds.height || 1 );\n\n        const scaleX = leftCenterViewPathViewBounds.width / ( leftCenterViewPath.localBounds.width || 1 );\n        const scaleY = leftCenterViewPathViewBounds.height / ( leftCenterViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          leftCenterViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          leftCenterViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        leftCenterViewPath.center = leftCenterViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          leftCenterViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          leftCenterViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          leftCenterViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          leftCenterViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          leftCenterViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          leftCenterViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( leftCenterBounds );\nsetFill( 'rgba(255, 255, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const centerViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const centerViewPath = new phet.scenery.Path( centerViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( centerViewPath );\n      scratchpad.centerViewPath = centerViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.centerViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'centerBounds' ], ( centerBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const centerViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.centerViewPath.setShape( centerViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.centerViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        centerViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        centerViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        centerViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        centerViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        centerViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        centerViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        centerViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        centerViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        centerViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        centerViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const centerViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( centerViewPath.localBounds.width || 1 ) / ( centerViewPath.localBounds.height || 1 );\n\n        const scaleX = centerViewPathViewBounds.width / ( centerViewPath.localBounds.width || 1 );\n        const scaleY = centerViewPathViewBounds.height / ( centerViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          centerViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          centerViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        centerViewPath.center = centerViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          centerViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          centerViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          centerViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          centerViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          centerViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          centerViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( centerBounds );\nsetFill( 'rgba(128, 0, 128, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const rightCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const rightCenterViewPath = new phet.scenery.Path( rightCenterViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( rightCenterViewPath );\n      scratchpad.rightCenterViewPath = rightCenterViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.rightCenterViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'rightCenterBounds' ], ( rightCenterBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const rightCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.rightCenterViewPath.setShape( rightCenterViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.rightCenterViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        rightCenterViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        rightCenterViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        rightCenterViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        rightCenterViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        rightCenterViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        rightCenterViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        rightCenterViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        rightCenterViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        rightCenterViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        rightCenterViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const rightCenterViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( rightCenterViewPath.localBounds.width || 1 ) / ( rightCenterViewPath.localBounds.height || 1 );\n\n        const scaleX = rightCenterViewPathViewBounds.width / ( rightCenterViewPath.localBounds.width || 1 );\n        const scaleY = rightCenterViewPathViewBounds.height / ( rightCenterViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          rightCenterViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          rightCenterViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        rightCenterViewPath.center = rightCenterViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          rightCenterViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          rightCenterViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          rightCenterViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          rightCenterViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          rightCenterViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          rightCenterViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( rightCenterBounds );\nsetFill( 'rgba(255, 165, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const leftBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const leftBottomViewPath = new phet.scenery.Path( leftBottomViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( leftBottomViewPath );\n      scratchpad.leftBottomViewPath = leftBottomViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.leftBottomViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'leftBottomBounds' ], ( leftBottomBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const leftBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.leftBottomViewPath.setShape( leftBottomViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.leftBottomViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        leftBottomViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        leftBottomViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        leftBottomViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        leftBottomViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        leftBottomViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        leftBottomViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        leftBottomViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        leftBottomViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        leftBottomViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        leftBottomViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const leftBottomViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( leftBottomViewPath.localBounds.width || 1 ) / ( leftBottomViewPath.localBounds.height || 1 );\n\n        const scaleX = leftBottomViewPathViewBounds.width / ( leftBottomViewPath.localBounds.width || 1 );\n        const scaleY = leftBottomViewPathViewBounds.height / ( leftBottomViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          leftBottomViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          leftBottomViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        leftBottomViewPath.center = leftBottomViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          leftBottomViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          leftBottomViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          leftBottomViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          leftBottomViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          leftBottomViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          leftBottomViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( leftBottomBounds );\nsetFill( 'rgba(255, 192, 203, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const centerBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const centerBottomViewPath = new phet.scenery.Path( centerBottomViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( centerBottomViewPath );\n      scratchpad.centerBottomViewPath = centerBottomViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.centerBottomViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'centerBottomBounds' ], ( centerBottomBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const centerBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.centerBottomViewPath.setShape( centerBottomViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.centerBottomViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        centerBottomViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        centerBottomViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        centerBottomViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        centerBottomViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        centerBottomViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        centerBottomViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        centerBottomViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        centerBottomViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        centerBottomViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        centerBottomViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const centerBottomViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( centerBottomViewPath.localBounds.width || 1 ) / ( centerBottomViewPath.localBounds.height || 1 );\n\n        const scaleX = centerBottomViewPathViewBounds.width / ( centerBottomViewPath.localBounds.width || 1 );\n        const scaleY = centerBottomViewPathViewBounds.height / ( centerBottomViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          centerBottomViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          centerBottomViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        centerBottomViewPath.center = centerBottomViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          centerBottomViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          centerBottomViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          centerBottomViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          centerBottomViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          centerBottomViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          centerBottomViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( centerBottomBounds );\nsetFill( 'rgba(165, 42, 42, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const rightBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const rightBottomViewPath = new phet.scenery.Path( rightBottomViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( rightBottomViewPath );\n      scratchpad.rightBottomViewPath = rightBottomViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.rightBottomViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'rightBottomBounds' ], ( rightBottomBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const rightBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.rightBottomViewPath.setShape( rightBottomViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.rightBottomViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        rightBottomViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        rightBottomViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        rightBottomViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        rightBottomViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        rightBottomViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        rightBottomViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        rightBottomViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        rightBottomViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        rightBottomViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        rightBottomViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const rightBottomViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( rightBottomViewPath.localBounds.width || 1 ) / ( rightBottomViewPath.localBounds.height || 1 );\n\n        const scaleX = rightBottomViewPathViewBounds.width / ( rightBottomViewPath.localBounds.width || 1 );\n        const scaleY = rightBottomViewPathViewBounds.height / ( rightBottomViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          rightBottomViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          rightBottomViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        rightBottomViewPath.center = rightBottomViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          rightBottomViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          rightBottomViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          rightBottomViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          rightBottomViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          rightBottomViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          rightBottomViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( rightBottomBounds );\nsetFill( 'rgba(128, 128, 128, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'leftTopBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerTopBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rightTopBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'leftCenterBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rightCenterBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'leftBottomBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerBottomBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rightBottomBounds' );\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.leftTopViewPath );\n      delete scratchpad.leftTopViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'leftTopBounds' ], scratchpad.leftTopViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.leftTopViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.centerTopViewPath );\n      delete scratchpad.centerTopViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'centerTopBounds' ], scratchpad.centerTopViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.centerTopViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.rightTopViewPath );\n      delete scratchpad.rightTopViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'rightTopBounds' ], scratchpad.rightTopViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.rightTopViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.leftCenterViewPath );\n      delete scratchpad.leftCenterViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'leftCenterBounds' ], scratchpad.leftCenterViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.leftCenterViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.centerViewPath );\n      delete scratchpad.centerViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'centerBounds' ], scratchpad.centerViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.centerViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.rightCenterViewPath );\n      delete scratchpad.rightCenterViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'rightCenterBounds' ], scratchpad.rightCenterViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.rightCenterViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.leftBottomViewPath );\n      delete scratchpad.leftBottomViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'leftBottomBounds' ], scratchpad.leftBottomViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.leftBottomViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.centerBottomViewPath );\n      delete scratchpad.centerBottomViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'centerBottomBounds' ], scratchpad.centerBottomViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.centerBottomViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.rightBottomViewPath );\n      delete scratchpad.rightBottomViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'rightBottomBounds' ], scratchpad.rightBottomViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.rightBottomViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Bounds', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Bounds\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const leftTopBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 0.33, 0.33 )\n      );\n      phet.paperLand.addModelComponent( 'leftTopBounds', leftTopBounds );\n    \n\n      const centerTopBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.33, 0, 0.66, 0.33 )\n      );\n      phet.paperLand.addModelComponent( 'centerTopBounds', centerTopBounds );\n    \n\n      const rightTopBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.66, 0, 1, 0.33 )\n      );\n      phet.paperLand.addModelComponent( 'rightTopBounds', rightTopBounds );\n    \n\n      const leftCenterBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0.33, 0.33, 0.66 )\n      );\n      phet.paperLand.addModelComponent( 'leftCenterBounds', leftCenterBounds );\n    \n\n      const centerBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.33, 0.33, 0.66, 0.66 )\n      );\n      phet.paperLand.addModelComponent( 'centerBounds', centerBounds );\n    \n\n      const rightCenterBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.66, 0.33, 1, 0.66 )\n      );\n      phet.paperLand.addModelComponent( 'rightCenterBounds', rightCenterBounds );\n    \n\n      const leftBottomBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0.66, 0.33, 1 )\n      );\n      phet.paperLand.addModelComponent( 'leftBottomBounds', leftBottomBounds );\n    \n\n      const centerBottomBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.33, 0.66, 0.66, 1 )\n      );\n      phet.paperLand.addModelComponent( 'centerBottomBounds', centerBottomBounds );\n    \n\n      const rightBottomBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0.66, 0.66, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'rightBottomBounds', rightBottomBounds );\n    \n\n\n      // Create a shape with kite.\n      const leftTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const leftTopViewPath = new phet.scenery.Path( leftTopViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( leftTopViewPath );\n      scratchpad.leftTopViewPath = leftTopViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.leftTopViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'leftTopBounds' ], ( leftTopBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const leftTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.leftTopViewPath.setShape( leftTopViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.leftTopViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        leftTopViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        leftTopViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        leftTopViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        leftTopViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        leftTopViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        leftTopViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        leftTopViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        leftTopViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        leftTopViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        leftTopViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const leftTopViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( leftTopViewPath.localBounds.width || 1 ) / ( leftTopViewPath.localBounds.height || 1 );\n\n        const scaleX = leftTopViewPathViewBounds.width / ( leftTopViewPath.localBounds.width || 1 );\n        const scaleY = leftTopViewPathViewBounds.height / ( leftTopViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          leftTopViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          leftTopViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        leftTopViewPath.center = leftTopViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          leftTopViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          leftTopViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          leftTopViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          leftTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          leftTopViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          leftTopViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          leftTopViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( leftTopBounds );\nsetFill( 'rgba(255, 0, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const centerTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const centerTopViewPath = new phet.scenery.Path( centerTopViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( centerTopViewPath );\n      scratchpad.centerTopViewPath = centerTopViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.centerTopViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'centerTopBounds' ], ( centerTopBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const centerTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.centerTopViewPath.setShape( centerTopViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.centerTopViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        centerTopViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        centerTopViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        centerTopViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        centerTopViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        centerTopViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        centerTopViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        centerTopViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        centerTopViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        centerTopViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        centerTopViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const centerTopViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( centerTopViewPath.localBounds.width || 1 ) / ( centerTopViewPath.localBounds.height || 1 );\n\n        const scaleX = centerTopViewPathViewBounds.width / ( centerTopViewPath.localBounds.width || 1 );\n        const scaleY = centerTopViewPathViewBounds.height / ( centerTopViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          centerTopViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          centerTopViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        centerTopViewPath.center = centerTopViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          centerTopViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          centerTopViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          centerTopViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          centerTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          centerTopViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          centerTopViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          centerTopViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( centerTopBounds );\nsetFill( 'rgba(0, 0, 255, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const rightTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const rightTopViewPath = new phet.scenery.Path( rightTopViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( rightTopViewPath );\n      scratchpad.rightTopViewPath = rightTopViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.rightTopViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'rightTopBounds' ], ( rightTopBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const rightTopViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.rightTopViewPath.setShape( rightTopViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.rightTopViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        rightTopViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        rightTopViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        rightTopViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        rightTopViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        rightTopViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        rightTopViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        rightTopViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        rightTopViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        rightTopViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        rightTopViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const rightTopViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( rightTopViewPath.localBounds.width || 1 ) / ( rightTopViewPath.localBounds.height || 1 );\n\n        const scaleX = rightTopViewPathViewBounds.width / ( rightTopViewPath.localBounds.width || 1 );\n        const scaleY = rightTopViewPathViewBounds.height / ( rightTopViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          rightTopViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          rightTopViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        rightTopViewPath.center = rightTopViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          rightTopViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          rightTopViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          rightTopViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          rightTopViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          rightTopViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          rightTopViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          rightTopViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( rightTopBounds );\nsetFill( 'rgba(0, 128, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const leftCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const leftCenterViewPath = new phet.scenery.Path( leftCenterViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( leftCenterViewPath );\n      scratchpad.leftCenterViewPath = leftCenterViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.leftCenterViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'leftCenterBounds' ], ( leftCenterBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const leftCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.leftCenterViewPath.setShape( leftCenterViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.leftCenterViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        leftCenterViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        leftCenterViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        leftCenterViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        leftCenterViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        leftCenterViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        leftCenterViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        leftCenterViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        leftCenterViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        leftCenterViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        leftCenterViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const leftCenterViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( leftCenterViewPath.localBounds.width || 1 ) / ( leftCenterViewPath.localBounds.height || 1 );\n\n        const scaleX = leftCenterViewPathViewBounds.width / ( leftCenterViewPath.localBounds.width || 1 );\n        const scaleY = leftCenterViewPathViewBounds.height / ( leftCenterViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          leftCenterViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          leftCenterViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        leftCenterViewPath.center = leftCenterViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          leftCenterViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          leftCenterViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          leftCenterViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          leftCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          leftCenterViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          leftCenterViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          leftCenterViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( leftCenterBounds );\nsetFill( 'rgba(255, 255, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const centerViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const centerViewPath = new phet.scenery.Path( centerViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( centerViewPath );\n      scratchpad.centerViewPath = centerViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.centerViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'centerBounds' ], ( centerBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const centerViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.centerViewPath.setShape( centerViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.centerViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        centerViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        centerViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        centerViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        centerViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        centerViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        centerViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        centerViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        centerViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        centerViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        centerViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const centerViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( centerViewPath.localBounds.width || 1 ) / ( centerViewPath.localBounds.height || 1 );\n\n        const scaleX = centerViewPathViewBounds.width / ( centerViewPath.localBounds.width || 1 );\n        const scaleY = centerViewPathViewBounds.height / ( centerViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          centerViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          centerViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        centerViewPath.center = centerViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          centerViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          centerViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          centerViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          centerViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          centerViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          centerViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          centerViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( centerBounds );\nsetFill( 'rgba(128, 0, 128, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const rightCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const rightCenterViewPath = new phet.scenery.Path( rightCenterViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( rightCenterViewPath );\n      scratchpad.rightCenterViewPath = rightCenterViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.rightCenterViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'rightCenterBounds' ], ( rightCenterBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const rightCenterViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.rightCenterViewPath.setShape( rightCenterViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.rightCenterViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        rightCenterViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        rightCenterViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        rightCenterViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        rightCenterViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        rightCenterViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        rightCenterViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        rightCenterViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        rightCenterViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        rightCenterViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        rightCenterViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const rightCenterViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( rightCenterViewPath.localBounds.width || 1 ) / ( rightCenterViewPath.localBounds.height || 1 );\n\n        const scaleX = rightCenterViewPathViewBounds.width / ( rightCenterViewPath.localBounds.width || 1 );\n        const scaleY = rightCenterViewPathViewBounds.height / ( rightCenterViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          rightCenterViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          rightCenterViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        rightCenterViewPath.center = rightCenterViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          rightCenterViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          rightCenterViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          rightCenterViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          rightCenterViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          rightCenterViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          rightCenterViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          rightCenterViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( rightCenterBounds );\nsetFill( 'rgba(255, 165, 0, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const leftBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const leftBottomViewPath = new phet.scenery.Path( leftBottomViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( leftBottomViewPath );\n      scratchpad.leftBottomViewPath = leftBottomViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.leftBottomViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'leftBottomBounds' ], ( leftBottomBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const leftBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.leftBottomViewPath.setShape( leftBottomViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.leftBottomViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        leftBottomViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        leftBottomViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        leftBottomViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        leftBottomViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        leftBottomViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        leftBottomViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        leftBottomViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        leftBottomViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        leftBottomViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        leftBottomViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const leftBottomViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( leftBottomViewPath.localBounds.width || 1 ) / ( leftBottomViewPath.localBounds.height || 1 );\n\n        const scaleX = leftBottomViewPathViewBounds.width / ( leftBottomViewPath.localBounds.width || 1 );\n        const scaleY = leftBottomViewPathViewBounds.height / ( leftBottomViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          leftBottomViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          leftBottomViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        leftBottomViewPath.center = leftBottomViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          leftBottomViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          leftBottomViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          leftBottomViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          leftBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          leftBottomViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          leftBottomViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          leftBottomViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( leftBottomBounds );\nsetFill( 'rgba(255, 192, 203, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const centerBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const centerBottomViewPath = new phet.scenery.Path( centerBottomViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( centerBottomViewPath );\n      scratchpad.centerBottomViewPath = centerBottomViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.centerBottomViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'centerBottomBounds' ], ( centerBottomBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const centerBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.centerBottomViewPath.setShape( centerBottomViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.centerBottomViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        centerBottomViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        centerBottomViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        centerBottomViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        centerBottomViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        centerBottomViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        centerBottomViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        centerBottomViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        centerBottomViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        centerBottomViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        centerBottomViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const centerBottomViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( centerBottomViewPath.localBounds.width || 1 ) / ( centerBottomViewPath.localBounds.height || 1 );\n\n        const scaleX = centerBottomViewPathViewBounds.width / ( centerBottomViewPath.localBounds.width || 1 );\n        const scaleY = centerBottomViewPathViewBounds.height / ( centerBottomViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          centerBottomViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          centerBottomViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        centerBottomViewPath.center = centerBottomViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          centerBottomViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          centerBottomViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          centerBottomViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          centerBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          centerBottomViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          centerBottomViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          centerBottomViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( centerBottomBounds );\nsetFill( 'rgba(165, 42, 42, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const rightBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const rightBottomViewPath = new phet.scenery.Path( rightBottomViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( rightBottomViewPath );\n      scratchpad.rightBottomViewPath = rightBottomViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.rightBottomViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'rightBottomBounds' ], ( rightBottomBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const rightBottomViewShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.rightBottomViewPath.setShape( rightBottomViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.rightBottomViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        rightBottomViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        rightBottomViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        rightBottomViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        rightBottomViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        rightBottomViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        rightBottomViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        rightBottomViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        rightBottomViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        rightBottomViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        rightBottomViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const rightBottomViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( rightBottomViewPath.localBounds.width || 1 ) / ( rightBottomViewPath.localBounds.height || 1 );\n\n        const scaleX = rightBottomViewPathViewBounds.width / ( rightBottomViewPath.localBounds.width || 1 );\n        const scaleY = rightBottomViewPathViewBounds.height / ( rightBottomViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          rightBottomViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          rightBottomViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        rightBottomViewPath.center = rightBottomViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          rightBottomViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          rightBottomViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          rightBottomViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          rightBottomViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          rightBottomViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          rightBottomViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          rightBottomViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( rightBottomBounds );\nsetFill( 'rgba(128, 128, 128, 0.5)' );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'leftTopBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerTopBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rightTopBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'leftCenterBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rightCenterBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'leftBottomBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerBottomBounds' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'rightBottomBounds' );\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.leftTopViewPath );\n      delete scratchpad.leftTopViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'leftTopBounds' ], scratchpad.leftTopViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.leftTopViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.centerTopViewPath );\n      delete scratchpad.centerTopViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'centerTopBounds' ], scratchpad.centerTopViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.centerTopViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.rightTopViewPath );\n      delete scratchpad.rightTopViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'rightTopBounds' ], scratchpad.rightTopViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.rightTopViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.leftCenterViewPath );\n      delete scratchpad.leftCenterViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'leftCenterBounds' ], scratchpad.leftCenterViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.leftCenterViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.centerViewPath );\n      delete scratchpad.centerViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'centerBounds' ], scratchpad.centerViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.centerViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.rightCenterViewPath );\n      delete scratchpad.rightCenterViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'rightCenterBounds' ], scratchpad.rightCenterViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.rightCenterViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.leftBottomViewPath );\n      delete scratchpad.leftBottomViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'leftBottomBounds' ], scratchpad.leftBottomViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.leftBottomViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.centerBottomViewPath );\n      delete scratchpad.centerBottomViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'centerBottomBounds' ], scratchpad.centerBottomViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.centerBottomViewPathMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.rightBottomViewPath );\n      delete scratchpad.rightBottomViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'rightBottomBounds' ], scratchpad.rightBottomViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.rightBottomViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Bounds', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.cool-space.80.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/cool-space/programs/80/debugInfo",
  "claimUrl": "/api/spaces/cool-space/programs/80/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
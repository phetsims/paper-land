{
  "number": 1146,
  "originalCode": "// Movable Cupcake\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const cupcakePosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'cupcakePosition', cupcakePosition );\n    \n\n      const cupcakeRotation = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 6.28 )\n      });\n      phet.paperLand.addModelComponent( 'cupcakeRotation', cupcakeRotation );\n    \n\n      const cupcakeScale = new phet.axon.NumberProperty( 1, {\n        range: new phet.dot.Range( 0.1, 2 )\n      });\n      phet.paperLand.addModelComponent( 'cupcakeScale', cupcakeScale );\n    \n\n      // DerivedProperties are actually implemented with Multilink for now because paper-land has a nice abstraction\n      // for it.\n      const cupcakeBounds = new phet.axon.Property( null );\n      scratchpad.cupcakeBoundsDerivedPropertyObserverId = phet.paperLand.addModelPropertyMultilink( [ 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'cupcakePosition' ], ( leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, cupcakePosition ) => {\n        const derivationFunction = () => {\n        \n          // should return a value based on the dependencies\n          if ( leftTopBounds.containsPoint( cupcakePosition ) ) {\n    return leftTopBounds;\n}\nelse if ( centerTopBounds.containsPoint( cupcakePosition ) ) {\n    return centerTopBounds;\n}\nelse if ( rightTopBounds.containsPoint( cupcakePosition ) ) {\n    return rightTopBounds;\n}\nelse if ( leftCenterBounds.containsPoint( cupcakePosition ) ) {\n    return leftCenterBounds;\n}\nelse if ( centerBounds.containsPoint( cupcakePosition ) ) {\n    return centerBounds;\n}\nelse if ( rightCenterBounds.containsPoint( cupcakePosition ) ) {\n    return rightCenterBounds;\n}\nelse if ( leftBottomBounds.containsPoint( cupcakePosition ) ) {\n    return leftBottomBounds;\n}\nelse if ( centerBottomBounds.containsPoint( cupcakePosition ) ) {\n    return centerBottomBounds;\n}\nelse if ( rightBottomBounds.containsPoint( cupcakePosition ) ) {\n    return rightBottomBounds;\n}\n\n        };\n        cupcakeBounds.value = derivationFunction();\n      } );\n      phet.paperLand.addModelComponent( 'cupcakeBounds', cupcakeBounds );\n    \n\n      // Create an image and add it to the view.\n      let cupcakeImageImageElement = document.createElement( 'img' );\n      cupcakeImageImageElement.src = 'media/images/frosted.png';\n      const cupcakeImageImage = new phet.scenery.Image( cupcakeImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const cupcakeImageImageLoadProperty = new phet.axon.Property( 0 );\n      cupcakeImageImageElement.addEventListener( 'load', () => { cupcakeImageImageLoadProperty.value = cupcakeImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( cupcakeImageImage );\n      scratchpad.cupcakeImageImage = cupcakeImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.cupcakeImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'cupcakePosition', 'cupcakeRotation', 'cupcakeScale' ], async ( cupcakePosition, cupcakeRotation, cupcakeScale ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        cupcakeImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        cupcakeImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        cupcakeImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        cupcakeImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        cupcakeImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        cupcakeImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        cupcakeImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        cupcakeImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        cupcakeImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        cupcakeImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const cupcakeImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( cupcakeImageImage.localBounds.width || 1 ) / ( cupcakeImageImage.localBounds.height || 1 );\n\n        const scaleX = cupcakeImageImageViewBounds.width / ( cupcakeImageImage.localBounds.width || 1 );\n        const scaleY = cupcakeImageImageViewBounds.height / ( cupcakeImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          cupcakeImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          cupcakeImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        cupcakeImageImage.center = cupcakeImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( cupcakeImageImage.image ) {\n              const startIndex = cupcakeImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = cupcakeImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const cupcakeImageImageImageElement = document.createElement( 'img' );\n              cupcakeImageImageImageElement.src = newImageName;\n              cupcakeImageImage.image = cupcakeImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              cupcakeImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        // Sets the image scale to from the model component for scale\nsetScale( cupcakeScale );\n\n// Sets the rotation from the model component\nsetRotation( cupcakeRotation );\n\n// Sets the image center to match the model component for image position\nsetCenterX( cupcakePosition.x );\nsetCenterY( cupcakePosition.y );\n\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, cupcakeImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cupcakePosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cupcakeRotation' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cupcakeScale' );\n    \n\n\n      // remove the multilink updating the value    \n      phet.paperLand.removeModelPropertyMultilink( [ 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'cupcakePosition' ], scratchpad.cupcakeBoundsDerivedPropertyObserverId );\n      delete scratchpad.cupcakeBoundsDerivedPropertyObserverId;\n      \n      // remove the derived Property from the model\n      phet.paperLand.removeModelComponent( 'cupcakeBounds' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.cupcakeImageImage );\n      delete scratchpad.cupcakeImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'cupcakePosition', 'cupcakeRotation', 'cupcakeScale' ], scratchpad.cupcakeImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.cupcakeImageImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty81 = phet.paperLand.getModelComponent( 'cupcakePosition' );\n    if ( modelProperty81 ) {\n      modelProperty81.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Movable Cupcake', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Movable Cupcake\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const cupcakePosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'cupcakePosition', cupcakePosition );\n    \n\n      const cupcakeRotation = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 6.28 )\n      });\n      phet.paperLand.addModelComponent( 'cupcakeRotation', cupcakeRotation );\n    \n\n      const cupcakeScale = new phet.axon.NumberProperty( 1, {\n        range: new phet.dot.Range( 0.1, 2 )\n      });\n      phet.paperLand.addModelComponent( 'cupcakeScale', cupcakeScale );\n    \n\n      // DerivedProperties are actually implemented with Multilink for now because paper-land has a nice abstraction\n      // for it.\n      const cupcakeBounds = new phet.axon.Property( null );\n      scratchpad.cupcakeBoundsDerivedPropertyObserverId = phet.paperLand.addModelPropertyMultilink( [ 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'cupcakePosition' ], ( leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, cupcakePosition ) => {\n        const derivationFunction = () => {\n        \n          // should return a value based on the dependencies\n          if ( leftTopBounds.containsPoint( cupcakePosition ) ) {\n    return leftTopBounds;\n}\nelse if ( centerTopBounds.containsPoint( cupcakePosition ) ) {\n    return centerTopBounds;\n}\nelse if ( rightTopBounds.containsPoint( cupcakePosition ) ) {\n    return rightTopBounds;\n}\nelse if ( leftCenterBounds.containsPoint( cupcakePosition ) ) {\n    return leftCenterBounds;\n}\nelse if ( centerBounds.containsPoint( cupcakePosition ) ) {\n    return centerBounds;\n}\nelse if ( rightCenterBounds.containsPoint( cupcakePosition ) ) {\n    return rightCenterBounds;\n}\nelse if ( leftBottomBounds.containsPoint( cupcakePosition ) ) {\n    return leftBottomBounds;\n}\nelse if ( centerBottomBounds.containsPoint( cupcakePosition ) ) {\n    return centerBottomBounds;\n}\nelse if ( rightBottomBounds.containsPoint( cupcakePosition ) ) {\n    return rightBottomBounds;\n}\n\n        };\n        cupcakeBounds.value = derivationFunction();\n      } );\n      phet.paperLand.addModelComponent( 'cupcakeBounds', cupcakeBounds );\n    \n\n      // Create an image and add it to the view.\n      let cupcakeImageImageElement = document.createElement( 'img' );\n      cupcakeImageImageElement.src = 'media/images/frosted.png';\n      const cupcakeImageImage = new phet.scenery.Image( cupcakeImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const cupcakeImageImageLoadProperty = new phet.axon.Property( 0 );\n      cupcakeImageImageElement.addEventListener( 'load', () => { cupcakeImageImageLoadProperty.value = cupcakeImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( cupcakeImageImage );\n      scratchpad.cupcakeImageImage = cupcakeImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.cupcakeImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'cupcakePosition', 'cupcakeRotation', 'cupcakeScale' ], async ( cupcakePosition, cupcakeRotation, cupcakeScale ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        cupcakeImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        cupcakeImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        cupcakeImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        cupcakeImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        cupcakeImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        cupcakeImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        cupcakeImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        cupcakeImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        cupcakeImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        cupcakeImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const cupcakeImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( cupcakeImageImage.localBounds.width || 1 ) / ( cupcakeImageImage.localBounds.height || 1 );\n\n        const scaleX = cupcakeImageImageViewBounds.width / ( cupcakeImageImage.localBounds.width || 1 );\n        const scaleY = cupcakeImageImageViewBounds.height / ( cupcakeImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          cupcakeImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          cupcakeImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        cupcakeImageImage.center = cupcakeImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( cupcakeImageImage.image ) {\n              const startIndex = cupcakeImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = cupcakeImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const cupcakeImageImageImageElement = document.createElement( 'img' );\n              cupcakeImageImageImageElement.src = newImageName;\n              cupcakeImageImage.image = cupcakeImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              cupcakeImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        // Sets the image scale to from the model component for scale\nsetScale( cupcakeScale );\n\n// Sets the rotation from the model component\nsetRotation( cupcakeRotation );\n\n// Sets the image center to match the model component for image position\nsetCenterX( cupcakePosition.x );\nsetCenterY( cupcakePosition.y );\n\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, cupcakeImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cupcakePosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cupcakeRotation' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cupcakeScale' );\n    \n\n\n      // remove the multilink updating the value    \n      phet.paperLand.removeModelPropertyMultilink( [ 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'cupcakePosition' ], scratchpad.cupcakeBoundsDerivedPropertyObserverId );\n      delete scratchpad.cupcakeBoundsDerivedPropertyObserverId;\n      \n      // remove the derived Property from the model\n      phet.paperLand.removeModelComponent( 'cupcakeBounds' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.cupcakeImageImage );\n      delete scratchpad.cupcakeImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'cupcakePosition', 'cupcakeRotation', 'cupcakeScale' ], scratchpad.cupcakeImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.cupcakeImageImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty81 = phet.paperLand.getModelComponent( 'cupcakePosition' );\n    if ( modelProperty81 ) {\n      modelProperty81.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Movable Cupcake', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.cool-space.1146.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/cool-space/programs/1146/debugInfo",
  "claimUrl": "/api/spaces/cool-space/programs/1146/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
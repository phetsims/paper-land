{
  "number": 558,
  "originalCode": "// Movable Object\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const position = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'position', position );\n    \n\n      // DerivedProperties are actually implemented with Multilink for now because paper-land has a nice abstraction\n      // for it.\n      const objectBounds = new phet.axon.Property( null );\n      scratchpad.objectBoundsDerivedPropertyObserverId = phet.paperLand.addModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds' ], ( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds ) => {\n        const derivationFunction = () => {\n        \n          // should return a value based on the dependencies\n          if ( leftTopBounds.containsPoint( position ) ) {\n    return leftTopBounds;\n}\nelse if ( centerTopBounds.containsPoint( position ) ) {\n    return centerTopBounds;\n}\nelse if ( rightTopBounds.containsPoint( position ) ) {\n    return rightTopBounds;\n}\nelse if ( leftCenterBounds.containsPoint( position ) ) {\n    return leftCenterBounds;\n}\nelse if ( centerBounds.containsPoint( position ) ) {\n    return centerBounds;\n}\nelse if ( rightCenterBounds.containsPoint( position ) ) {\n    return rightCenterBounds;\n}\nelse if ( leftBottomBounds.containsPoint( position ) ) {\n    return leftBottomBounds;\n}\nelse if ( centerBottomBounds.containsPoint( position ) ) {\n    return centerBottomBounds;\n}\nelse if ( rightBottomBounds.containsPoint( position ) ) {\n    return rightBottomBounds;\n}\nelse {\n    return null;\n}\n\n        };\n        objectBounds.value = derivationFunction();\n      } );\n      phet.paperLand.addModelComponent( 'objectBounds', objectBounds );\n    \n\n      // Speak the description whenever the dependencies change.\n      const objectBoundsDescriptionDescriptionFunction = ( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, objectBounds, cupcakeBounds ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        \n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        objectBoundsDescriptionDescription.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        objectBoundsDescriptionDescription.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        objectBoundsDescriptionDescription.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        objectBoundsDescriptionDescription.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        objectBoundsDescriptionDescription.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        objectBoundsDescriptionDescription.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        objectBoundsDescriptionDescription.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        objectBoundsDescriptionDescription.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        objectBoundsDescriptionDescription.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        objectBoundsDescriptionDescription.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const objectBoundsDescriptionDescriptionViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( objectBoundsDescriptionDescription.localBounds.width || 1 ) / ( objectBoundsDescriptionDescription.localBounds.height || 1 );\n\n        const scaleX = objectBoundsDescriptionDescriptionViewBounds.width / ( objectBoundsDescriptionDescription.localBounds.width || 1 );\n        const scaleY = objectBoundsDescriptionDescriptionViewBounds.height / ( objectBoundsDescriptionDescription.localBounds.height || 1 );\n\n        if ( stretch ) {\n          objectBoundsDescriptionDescription.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          objectBoundsDescriptionDescription.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        objectBoundsDescriptionDescription.center = objectBoundsDescriptionDescriptionViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.objectBoundsDescriptionDescriptionUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.objectBoundsDescriptionDescriptionUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        let objectBoundsDescription = '';\nif ( leftTopBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'left top';\n}\nelse if ( centerTopBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'center top';\n}\nelse if ( rightTopBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'right top'\n}\nelse if ( leftCenterBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'left center'\n}\nelse if ( centerBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'center'\n}\nelse if ( rightCenterBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'right center'\n}\nelse if ( leftBottomBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'left bottom'\n}\nelse if ( centerBottomBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'center bottom'\n}\nelse if ( rightBottomBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'right bottom'\n}\n\nconsole.log( objectBounds );\nif ( objectBounds === cupcakeBounds ) {\n    return objectBoundsDescription + ', you found the cupcake!';\n}\nelse {\n    return objectBoundsDescription;\n}\n      }\n      \n      // a reusable utterance for this description component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.objectBoundsDescriptionDescriptionUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.objectBoundsDescriptionDescriptionMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'objectBounds', 'cupcakeBounds' ], ( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, objectBounds, cupcakeBounds ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const descriptionResult = objectBoundsDescriptionDescriptionFunction( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, objectBounds, cupcakeBounds );\n        if ( descriptionResult && descriptionResult.toString ) {\n          const descriptionString = descriptionResult.toString();\n          if ( descriptionString && descriptionString.length > 0 ) {\n            scratchpad.objectBoundsDescriptionDescriptionUtterance.alert = descriptionString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.objectBoundsDescriptionDescriptionUtterance ); \n          }\n        }\n      }, {\n        lazy: false,\n        otherReferences: [  ]\n      } ); \n    \n\n\n      // Create a shape with kite.\n      const objectViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.1, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const objectViewPath = new phet.scenery.Path( objectViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( objectViewPath );\n      scratchpad.objectViewPath = objectViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.objectViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position' ], ( position ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const objectViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.1, sharedData.displaySize.width ) )\n        scratchpad.objectViewPath.setShape( objectViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.objectViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        objectViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        objectViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        objectViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        objectViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        objectViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        objectViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        objectViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        objectViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        objectViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        objectViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const objectViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( objectViewPath.localBounds.width || 1 ) / ( objectViewPath.localBounds.height || 1 );\n\n        const scaleX = objectViewPathViewBounds.width / ( objectViewPath.localBounds.width || 1 );\n        const scaleY = objectViewPathViewBounds.height / ( objectViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          objectViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          objectViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        objectViewPath.center = objectViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          objectViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          objectViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          objectViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          objectViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          objectViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          objectViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setCenterX( position.x );\nsetCenterY( position.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'position' );\n    \n\n\n      // remove the multilink updating the value    \n      phet.paperLand.removeModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds' ], scratchpad.objectBoundsDerivedPropertyObserverId );\n      delete scratchpad.objectBoundsDerivedPropertyObserverId;\n      \n      // remove the derived Property from the model\n      phet.paperLand.removeModelComponent( 'objectBounds' );\n    \n\n      // Remove the description multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'objectBounds', 'cupcakeBounds' ], scratchpad.objectBoundsDescriptionDescriptionMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.objectBoundsDescriptionDescriptionMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.objectBoundsDescriptionDescriptionUtterance;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.objectViewPath );\n      delete scratchpad.objectViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'position' ], scratchpad.objectViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.objectViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty80 = phet.paperLand.getModelComponent( 'position' );\n    if ( modelProperty80 ) {\n      modelProperty80.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Movable Object', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Movable Object\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const position = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'position', position );\n    \n\n      // DerivedProperties are actually implemented with Multilink for now because paper-land has a nice abstraction\n      // for it.\n      const objectBounds = new phet.axon.Property( null );\n      scratchpad.objectBoundsDerivedPropertyObserverId = phet.paperLand.addModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds' ], ( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds ) => {\n        const derivationFunction = () => {\n        \n          // should return a value based on the dependencies\n          if ( leftTopBounds.containsPoint( position ) ) {\n    return leftTopBounds;\n}\nelse if ( centerTopBounds.containsPoint( position ) ) {\n    return centerTopBounds;\n}\nelse if ( rightTopBounds.containsPoint( position ) ) {\n    return rightTopBounds;\n}\nelse if ( leftCenterBounds.containsPoint( position ) ) {\n    return leftCenterBounds;\n}\nelse if ( centerBounds.containsPoint( position ) ) {\n    return centerBounds;\n}\nelse if ( rightCenterBounds.containsPoint( position ) ) {\n    return rightCenterBounds;\n}\nelse if ( leftBottomBounds.containsPoint( position ) ) {\n    return leftBottomBounds;\n}\nelse if ( centerBottomBounds.containsPoint( position ) ) {\n    return centerBottomBounds;\n}\nelse if ( rightBottomBounds.containsPoint( position ) ) {\n    return rightBottomBounds;\n}\nelse {\n    return null;\n}\n\n        };\n        objectBounds.value = derivationFunction();\n      } );\n      phet.paperLand.addModelComponent( 'objectBounds', objectBounds );\n    \n\n      // Speak the description whenever the dependencies change.\n      const objectBoundsDescriptionDescriptionFunction = ( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, objectBounds, cupcakeBounds ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        \n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        objectBoundsDescriptionDescription.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        objectBoundsDescriptionDescription.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        objectBoundsDescriptionDescription.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        objectBoundsDescriptionDescription.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        objectBoundsDescriptionDescription.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        objectBoundsDescriptionDescription.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        objectBoundsDescriptionDescription.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        objectBoundsDescriptionDescription.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        objectBoundsDescriptionDescription.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        objectBoundsDescriptionDescription.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const objectBoundsDescriptionDescriptionViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( objectBoundsDescriptionDescription.localBounds.width || 1 ) / ( objectBoundsDescriptionDescription.localBounds.height || 1 );\n\n        const scaleX = objectBoundsDescriptionDescriptionViewBounds.width / ( objectBoundsDescriptionDescription.localBounds.width || 1 );\n        const scaleY = objectBoundsDescriptionDescriptionViewBounds.height / ( objectBoundsDescriptionDescription.localBounds.height || 1 );\n\n        if ( stretch ) {\n          objectBoundsDescriptionDescription.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          objectBoundsDescriptionDescription.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        objectBoundsDescriptionDescription.center = objectBoundsDescriptionDescriptionViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.objectBoundsDescriptionDescriptionUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.objectBoundsDescriptionDescriptionUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        let objectBoundsDescription = '';\nif ( leftTopBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'left top';\n}\nelse if ( centerTopBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'center top';\n}\nelse if ( rightTopBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'right top'\n}\nelse if ( leftCenterBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'left center'\n}\nelse if ( centerBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'center'\n}\nelse if ( rightCenterBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'right center'\n}\nelse if ( leftBottomBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'left bottom'\n}\nelse if ( centerBottomBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'center bottom'\n}\nelse if ( rightBottomBounds.containsPoint( position ) ) {\n    objectBoundsDescription = 'right bottom'\n}\n\nconsole.log( objectBounds );\nif ( objectBounds === cupcakeBounds ) {\n    return objectBoundsDescription + ', you found the cupcake!';\n}\nelse {\n    return objectBoundsDescription;\n}\n      }\n      \n      // a reusable utterance for this description component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.objectBoundsDescriptionDescriptionUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.objectBoundsDescriptionDescriptionMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'objectBounds', 'cupcakeBounds' ], ( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, objectBounds, cupcakeBounds ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const descriptionResult = objectBoundsDescriptionDescriptionFunction( position, leftTopBounds, centerTopBounds, rightTopBounds, leftCenterBounds, centerBounds, rightCenterBounds, leftBottomBounds, centerBottomBounds, rightBottomBounds, objectBounds, cupcakeBounds );\n        if ( descriptionResult && descriptionResult.toString ) {\n          const descriptionString = descriptionResult.toString();\n          if ( descriptionString && descriptionString.length > 0 ) {\n            scratchpad.objectBoundsDescriptionDescriptionUtterance.alert = descriptionString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.objectBoundsDescriptionDescriptionUtterance ); \n          }\n        }\n      }, {\n        lazy: false,\n        otherReferences: [  ]\n      } ); \n    \n\n\n      // Create a shape with kite.\n      const objectViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.1, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const objectViewPath = new phet.scenery.Path( objectViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( objectViewPath );\n      scratchpad.objectViewPath = objectViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.objectViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'position' ], ( position ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const objectViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.1, sharedData.displaySize.width ) )\n        scratchpad.objectViewPath.setShape( objectViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.objectViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        objectViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        objectViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        objectViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        objectViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        objectViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        objectViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        objectViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        objectViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        objectViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        objectViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const objectViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( objectViewPath.localBounds.width || 1 ) / ( objectViewPath.localBounds.height || 1 );\n\n        const scaleX = objectViewPathViewBounds.width / ( objectViewPath.localBounds.width || 1 );\n        const scaleY = objectViewPathViewBounds.height / ( objectViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          objectViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          objectViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        objectViewPath.center = objectViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          objectViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          objectViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          objectViewPath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          objectViewPath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          objectViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          objectViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          objectViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setCenterX( position.x );\nsetCenterY( position.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'position' );\n    \n\n\n      // remove the multilink updating the value    \n      phet.paperLand.removeModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds' ], scratchpad.objectBoundsDerivedPropertyObserverId );\n      delete scratchpad.objectBoundsDerivedPropertyObserverId;\n      \n      // remove the derived Property from the model\n      phet.paperLand.removeModelComponent( 'objectBounds' );\n    \n\n      // Remove the description multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'position', 'leftTopBounds', 'centerTopBounds', 'rightTopBounds', 'leftCenterBounds', 'centerBounds', 'rightCenterBounds', 'leftBottomBounds', 'centerBottomBounds', 'rightBottomBounds', 'objectBounds', 'cupcakeBounds' ], scratchpad.objectBoundsDescriptionDescriptionMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.objectBoundsDescriptionDescriptionMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.objectBoundsDescriptionDescriptionUtterance;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.objectViewPath );\n      delete scratchpad.objectViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'position' ], scratchpad.objectViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.objectViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty80 = phet.paperLand.getModelComponent( 'position' );\n    if ( modelProperty80 ) {\n      modelProperty80.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Movable Object', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.cool-space.558.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/cool-space/programs/558/debugInfo",
  "claimUrl": "/api/spaces/cool-space/programs/558/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
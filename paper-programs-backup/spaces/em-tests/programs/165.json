{
  "number": 165,
  "originalCode": "// Anchor\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const anchorPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'anchorPosition', anchorPosition );\n    \n\n\n      // Create a shape with kite.\n      const anchorCircleShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 20, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const anchorCirclePath = new phet.scenery.Path( anchorCircleShape, {\n        fill: '#007BFF',\n        stroke: '#001F3F',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( anchorCirclePath );\n      scratchpad.anchorCirclePath = anchorCirclePath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.anchorCirclePathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'anchorPosition' ], ( anchorPosition ) => {\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        anchorCirclePath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        anchorCirclePath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        anchorCirclePath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        anchorCirclePath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        anchorCirclePath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        anchorCirclePath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        anchorCirclePath.visible = visible;\n      };\n      \n      const setRotation = ( rotation ) => {\n        anchorCirclePath.rotation = rotation;\n      };\n\n        const setStroke = ( color ) => {\n          anchorCirclePath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          anchorCirclePath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          anchorCirclePath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          // x1 = newX1;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX1 not implemented' );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          // y1 = newY1;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY1 not implemented' );\n        };\n\n        const setX2 = ( newX2 ) => {\n          // x2 = newX2;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX2 not implemented' );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          // y2 = newY2;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY2 not implemented' );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          anchorCirclePath.radius = phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          anchorCirclePath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        setCenterX( anchorPosition.x );\nsetCenterY( anchorPosition.y );\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'anchorPosition' );\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.anchorCirclePath );\n      delete scratchpad.anchorCirclePath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'anchorPosition' ], scratchpad.anchorCirclePathMultilinkId );\n      delete scratchpad.anchorCirclePathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty0 = phet.paperLand.getModelComponent( 'anchorPosition' );\n    if ( modelProperty0 ) {\n      modelProperty0.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Anchor', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Anchor\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const anchorPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'anchorPosition', anchorPosition );\n    \n\n\n      // Create a shape with kite.\n      const anchorCircleShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 20, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const anchorCirclePath = new phet.scenery.Path( anchorCircleShape, {\n        fill: '#007BFF',\n        stroke: '#001F3F',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( anchorCirclePath );\n      scratchpad.anchorCirclePath = anchorCirclePath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.anchorCirclePathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'anchorPosition' ], ( anchorPosition ) => {\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        anchorCirclePath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        anchorCirclePath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        anchorCirclePath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        anchorCirclePath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        anchorCirclePath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        anchorCirclePath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        anchorCirclePath.visible = visible;\n      };\n      \n      const setRotation = ( rotation ) => {\n        anchorCirclePath.rotation = rotation;\n      };\n\n        const setStroke = ( color ) => {\n          anchorCirclePath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          anchorCirclePath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          anchorCirclePath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          // x1 = newX1;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX1 not implemented' );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          // y1 = newY1;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY1 not implemented' );\n        };\n\n        const setX2 = ( newX2 ) => {\n          // x2 = newX2;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX2 not implemented' );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          // y2 = newY2;\n          // anchorCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY2 not implemented' );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          anchorCirclePath.radius = phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          anchorCirclePath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        setCenterX( anchorPosition.x );\nsetCenterY( anchorPosition.y );\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'anchorPosition' );\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.anchorCirclePath );\n      delete scratchpad.anchorCirclePath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'anchorPosition' ], scratchpad.anchorCirclePathMultilinkId );\n      delete scratchpad.anchorCirclePathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty0 = phet.paperLand.getModelComponent( 'anchorPosition' );\n    if ( modelProperty0 ) {\n      modelProperty0.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Anchor', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.em-tests.165.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/em-tests/programs/165/debugInfo",
  "claimUrl": "/api/spaces/em-tests/programs/165/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
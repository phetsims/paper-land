{
  "number": 286,
  "originalCode": "// AE Program 1\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isWinterComponent = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isWinterComponent', isWinterComponent );\n    \n\n      const isSummerComponent = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isSummerComponent', isSummerComponent );\n    \n\n      const seasonPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'seasonPosition', seasonPosition );\n    \n\n      const currentSeason = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 4 )\n      });\n      phet.paperLand.addModelComponent( 'currentSeason', currentSeason );\n    \n\n      const seasonChangeSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/d-tone.mp3' );\n      const seasonChangeSoundSoundClip = new phet.tambo.SoundClip( seasonChangeSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( seasonChangeSoundSoundClip );\n      \n      let seasonChangeSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds\n      let seasonChangeSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n\n      // Play the sound when any dependencies change value.\n      scratchpad.seasonChangeSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isWinterComponent' ], ( isWinterComponent ) => {\n        // in a local scope, define the functions that the user can use to manipulate the sound\n        const setOutputLevel = ( level ) => {\n        \n          // As a safety measure, don't let the user set a level below zero and above 2.\n          const outputLevel = Math.max( 0, Math.min( 2, level ) );\n          seasonChangeSoundSoundClip.outputLevel = outputLevel;\n        };\n        const setPlaybackRate = ( rate ) => {\n        \n          // As a safety measure, the playback rate cannot go below zero.\n          const playbackRate = Math.max( 0, rate );\n          seasonChangeSoundSoundClip.setPlaybackRate( playbackRate );\n        };\n        \n        // a function the user can call to play the sound\n        const play = () => {\n        \n          // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n          // can only be played at a limited interval for safety.\n          if ( ( !seasonChangeSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - seasonChangeSoundLastPlayTime > 0.25 ) {\n            seasonChangeSoundSoundClip.play();\n            seasonChangeSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n            \n            // Set a timer to turn off the sound when the value stops changing.\n            if ( seasonChangeSoundStopSoundTimeout ){\n              window.clearTimeout( seasonChangeSoundStopSoundTimeout );\n            }\n            \n            // only stop if looping\n            if ( false ) {\n              seasonChangeSoundStopSoundTimeout = window.setTimeout( () => {\n                seasonChangeSoundSoundClip.stop();\n              }, 5000 );\n            }  \n          }\n        };\n        \n        const stop = () => {\n          // Set a timer to turn off the sound when the value stops changing.\n          if ( seasonChangeSoundStopSoundTimeout ){\n            window.clearTimeout( seasonChangeSoundStopSoundTimeout );\n          }\n          seasonChangeSoundSoundClip.stop();\n        };\n        \n        if ( true ) {\n          play();\n        }\n      \n        if ( isWinterComponent ) {\n    play();\n    phet.paperLand.console.log('whisker twitch', isWinterComponent);\n}\n            \n      } );       \n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.seasonChangeSoundSoundClip = seasonChangeSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let seasonViewImageElement = document.createElement( 'img' );\n      seasonViewImageElement.src = 'media/images/hotairballoon.png';\n      const seasonViewImage = new phet.scenery.Image( seasonViewImageElement );\n      \n      sharedData.scene.addChild( seasonViewImage );\n      scratchpad.seasonViewImage = seasonViewImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.seasonViewImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'seasonPosition' ], ( seasonPosition ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        seasonViewImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        seasonViewImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        seasonViewImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        seasonViewImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        seasonViewImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        seasonViewImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        seasonViewImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        seasonViewImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        seasonViewImage.rotation = rotation;\n      };\n\n        const setImage = imageName => {\n          let seasonViewImageImageElement = document.createElement( 'img' );\n          seasonViewImageImageElement.src = 'media/images/' + imageName;\n          seasonViewImage.image = seasonViewImageImageElement; \n        };\n      \n      \n        //setCenter( new phet.dot.Vector2( helloPosition.x, helloPosition.y ));\nsetCenterX(seasonPosition.x);\nsetCenterY(seasonPosition.y);\n      } );\n    \n\n      // Create an image and add it to the view.\n      let summerViewImageElement = document.createElement( 'img' );\n      summerViewImageElement.src = 'media/images/submarine.png';\n      const summerViewImage = new phet.scenery.Image( summerViewImageElement );\n      \n      sharedData.scene.addChild( summerViewImage );\n      scratchpad.summerViewImage = summerViewImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.summerViewImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isSummerComponent' ], ( isSummerComponent ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        summerViewImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        summerViewImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        summerViewImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        summerViewImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        summerViewImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        summerViewImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        summerViewImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        summerViewImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        summerViewImage.rotation = rotation;\n      };\n\n        const setImage = imageName => {\n          let summerViewImageImageElement = document.createElement( 'img' );\n          summerViewImageImageElement.src = 'media/images/' + imageName;\n          summerViewImage.image = summerViewImageImageElement; \n        };\n      \n      \n        setCenterX(seasonPosition.x);\nsetCenterY(seasonPosition.y);\nsetVisible(true);\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isWinterComponent' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isSummerComponent' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'seasonPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'currentSeason' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.seasonChangeSoundSoundClip );\n      delete scratchpad.seasonChangeSoundSoundClip;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'isWinterComponent' ], scratchpad.seasonChangeSoundSoundMultilinkId );\n      delete scratchpad.seasonChangeSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.seasonViewImage );\n      delete scratchpad.seasonViewImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'seasonPosition' ], scratchpad.seasonViewImageMultilinkId );\n      delete scratchpad.seasonViewImageMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.summerViewImage );\n      delete scratchpad.summerViewImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'isSummerComponent' ], scratchpad.summerViewImageMultilinkId );\n      delete scratchpad.summerViewImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty0 = phet.paperLand.getModelComponent( 'seasonPosition' );\n    if ( modelProperty0 ) {\n      modelProperty0.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty13 = phet.paperLand.getModelComponent( 'isWinterComponent' );\n    if ( modelProperty13 ) {\n      modelProperty13.value = otherPaperNumber === 10;\n    }\n\n    const modelProperty15 = phet.paperLand.getModelComponent( 'isSummerComponent' );\n    if ( modelProperty15 ) {\n      modelProperty15.value = true;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty18 = phet.paperLand.getModelComponent( 'isWinterComponent' );\n    if ( modelProperty18 ) {\n      modelProperty18.value = otherPaperNumber === 10 ? false : modelProperty18.value;\n    }\n\n    const modelProperty20 = phet.paperLand.getModelComponent( 'isSummerComponent' );\n    if ( modelProperty20 ) {\n      modelProperty20.value = false;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('AE Program 1', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// AE Program 1\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isWinterComponent = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isWinterComponent', isWinterComponent );\n    \n\n      const isSummerComponent = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isSummerComponent', isSummerComponent );\n    \n\n      const seasonPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'seasonPosition', seasonPosition );\n    \n\n      const currentSeason = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 4 )\n      });\n      phet.paperLand.addModelComponent( 'currentSeason', currentSeason );\n    \n\n      const seasonChangeSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/d-tone.mp3' );\n      const seasonChangeSoundSoundClip = new phet.tambo.SoundClip( seasonChangeSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( seasonChangeSoundSoundClip );\n      \n      let seasonChangeSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds\n      let seasonChangeSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n\n      // Play the sound when any dependencies change value.\n      scratchpad.seasonChangeSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isWinterComponent' ], ( isWinterComponent ) => {\n        // in a local scope, define the functions that the user can use to manipulate the sound\n        const setOutputLevel = ( level ) => {\n        \n          // As a safety measure, don't let the user set a level below zero and above 2.\n          const outputLevel = Math.max( 0, Math.min( 2, level ) );\n          seasonChangeSoundSoundClip.outputLevel = outputLevel;\n        };\n        const setPlaybackRate = ( rate ) => {\n        \n          // As a safety measure, the playback rate cannot go below zero.\n          const playbackRate = Math.max( 0, rate );\n          seasonChangeSoundSoundClip.setPlaybackRate( playbackRate );\n        };\n        \n        // a function the user can call to play the sound\n        const play = () => {\n        \n          // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n          // can only be played at a limited interval for safety.\n          if ( ( !seasonChangeSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - seasonChangeSoundLastPlayTime > 0.25 ) {\n            seasonChangeSoundSoundClip.play();\n            seasonChangeSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n            \n            // Set a timer to turn off the sound when the value stops changing.\n            if ( seasonChangeSoundStopSoundTimeout ){\n              window.clearTimeout( seasonChangeSoundStopSoundTimeout );\n            }\n            \n            // only stop if looping\n            if ( false ) {\n              seasonChangeSoundStopSoundTimeout = window.setTimeout( () => {\n                seasonChangeSoundSoundClip.stop();\n              }, 5000 );\n            }  \n          }\n        };\n        \n        const stop = () => {\n          // Set a timer to turn off the sound when the value stops changing.\n          if ( seasonChangeSoundStopSoundTimeout ){\n            window.clearTimeout( seasonChangeSoundStopSoundTimeout );\n          }\n          seasonChangeSoundSoundClip.stop();\n        };\n        \n        if ( true ) {\n          play();\n        }\n      \n        if ( isWinterComponent ) {\n    play();\n    phet.paperLand.console.log('whisker twitch', isWinterComponent);\n}\n            \n      } );       \n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.seasonChangeSoundSoundClip = seasonChangeSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let seasonViewImageElement = document.createElement( 'img' );\n      seasonViewImageElement.src = 'media/images/hotairballoon.png';\n      const seasonViewImage = new phet.scenery.Image( seasonViewImageElement );\n      \n      sharedData.scene.addChild( seasonViewImage );\n      scratchpad.seasonViewImage = seasonViewImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.seasonViewImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'seasonPosition' ], ( seasonPosition ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        seasonViewImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        seasonViewImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        seasonViewImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        seasonViewImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        seasonViewImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        seasonViewImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        seasonViewImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        seasonViewImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        seasonViewImage.rotation = rotation;\n      };\n\n        const setImage = imageName => {\n          let seasonViewImageImageElement = document.createElement( 'img' );\n          seasonViewImageImageElement.src = 'media/images/' + imageName;\n          seasonViewImage.image = seasonViewImageImageElement; \n        };\n      \n      \n        //setCenter( new phet.dot.Vector2( helloPosition.x, helloPosition.y ));\nsetCenterX(seasonPosition.x);\nsetCenterY(seasonPosition.y);\n      } );\n    \n\n      // Create an image and add it to the view.\n      let summerViewImageElement = document.createElement( 'img' );\n      summerViewImageElement.src = 'media/images/submarine.png';\n      const summerViewImage = new phet.scenery.Image( summerViewImageElement );\n      \n      sharedData.scene.addChild( summerViewImage );\n      scratchpad.summerViewImage = summerViewImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.summerViewImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isSummerComponent' ], ( isSummerComponent ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        summerViewImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        summerViewImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        summerViewImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        summerViewImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        summerViewImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        summerViewImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        summerViewImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        summerViewImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        summerViewImage.rotation = rotation;\n      };\n\n        const setImage = imageName => {\n          let summerViewImageImageElement = document.createElement( 'img' );\n          summerViewImageImageElement.src = 'media/images/' + imageName;\n          summerViewImage.image = summerViewImageImageElement; \n        };\n      \n      \n        setCenterX(seasonPosition.x);\nsetCenterY(seasonPosition.y);\nsetVisible(true);\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isWinterComponent' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isSummerComponent' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'seasonPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'currentSeason' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.seasonChangeSoundSoundClip );\n      delete scratchpad.seasonChangeSoundSoundClip;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'isWinterComponent' ], scratchpad.seasonChangeSoundSoundMultilinkId );\n      delete scratchpad.seasonChangeSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.seasonViewImage );\n      delete scratchpad.seasonViewImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'seasonPosition' ], scratchpad.seasonViewImageMultilinkId );\n      delete scratchpad.seasonViewImageMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.summerViewImage );\n      delete scratchpad.summerViewImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'isSummerComponent' ], scratchpad.summerViewImageMultilinkId );\n      delete scratchpad.summerViewImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty0 = phet.paperLand.getModelComponent( 'seasonPosition' );\n    if ( modelProperty0 ) {\n      modelProperty0.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty13 = phet.paperLand.getModelComponent( 'isWinterComponent' );\n    if ( modelProperty13 ) {\n      modelProperty13.value = otherPaperNumber === 10;\n    }\n\n    const modelProperty15 = phet.paperLand.getModelComponent( 'isSummerComponent' );\n    if ( modelProperty15 ) {\n      modelProperty15.value = true;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty18 = phet.paperLand.getModelComponent( 'isWinterComponent' );\n    if ( modelProperty18 ) {\n      modelProperty18.value = otherPaperNumber === 10 ? false : modelProperty18.value;\n    }\n\n    const modelProperty20 = phet.paperLand.getModelComponent( 'isSummerComponent' );\n    if ( modelProperty20 ) {\n      modelProperty20.value = false;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('AE Program 1', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ohms-law-demo.286.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ohms-law-demo/programs/286/debugInfo",
  "claimUrl": "/api/spaces/ohms-law-demo/programs/286/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
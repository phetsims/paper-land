{
  "number": 4,
  "originalCode": "// Sound C\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOnC = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOnC', markerIsOnC );\n    \n\n      const simonCTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'simonCTrigger', simonCTrigger );\n    \n\n      const cPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'cPosition', cPosition );\n    \n\n      const cSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/g-tone.mp3' );\n      const cSoundSoundClip = new phet.tambo.SoundClip( cSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( cSoundSoundClip );\n      scratchpad.cSoundWrappedAudioBuffer = cSoundWrappedAudioBuffer;\n      \n      let cSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let cSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.cSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.cSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC' ], ( playersTurn, markerIsOnC ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              cSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              cSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !cSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - cSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !cSoundSoundClip.isPlaying ) {\n                  cSoundSoundClip.play();\n                }\n                cSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( cSoundStopSoundTimeout ){\n                  window.clearTimeout( cSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  cSoundStopSoundTimeout = window.setTimeout( () => {\n                    cSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( cSoundStopSoundTimeout ){\n                window.clearTimeout( cSoundStopSoundTimeout );\n              }\n              cSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( playersTurn && markerIsOnC ) {\n\n    // It is the player's turn and they put a marker on this paper - play the tone.\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.cSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.cSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.cSoundSoundClip = cSoundSoundClip;\n    \n\n      const simonCSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/g-tone.mp3' );\n      const simonCSoundSoundClip = new phet.tambo.SoundClip( simonCSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( simonCSoundSoundClip );\n      scratchpad.simonCSoundWrappedAudioBuffer = simonCSoundWrappedAudioBuffer;\n      \n      let simonCSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let simonCSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.simonCSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.simonCSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonCTrigger' ], ( simonCTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              simonCSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              simonCSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !simonCSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - simonCSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !simonCSoundSoundClip.isPlaying ) {\n                  simonCSoundSoundClip.play();\n                }\n                simonCSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( simonCSoundStopSoundTimeout ){\n                  window.clearTimeout( simonCSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  simonCSoundStopSoundTimeout = window.setTimeout( () => {\n                    simonCSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( simonCSoundStopSoundTimeout ){\n                window.clearTimeout( simonCSoundStopSoundTimeout );\n              }\n              simonCSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( simonCTrigger ) {\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.simonCSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.simonCSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.simonCSoundSoundClip = simonCSoundSoundClip;\n    \n\n\n      // Create a shape with kite.\n      const cViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const cViewPath = new phet.scenery.Path( cViewShape, {\n        fill: 'orange',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n        centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( cViewPath );\n      scratchpad.cViewPath = cViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.cViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC', 'simonCTrigger', 'cPosition' ], ( playersTurn, markerIsOnC, simonCTrigger, cPosition ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const cViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n        scratchpad.cViewPath.setShape( cViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.cViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n          centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        cViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        cViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        cViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        cViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        cViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        cViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        cViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        cViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        cViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        cViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const cViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( cViewPath.localBounds.width || 1 ) / ( cViewPath.localBounds.height || 1 );\n\n        const scaleX = cViewPathViewBounds.width / ( cViewPath.localBounds.width || 1 );\n        const scaleY = cViewPathViewBounds.height / ( cViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          cViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          cViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        cViewPath.center = cViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          cViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          cViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          cViewPath.fill = color;\n        };\n        \n        // for a line - Beware that the x/y variables are declared via the ShapeCodeFunctions!\n        const setX1 = ( newX1 ) => {\n          cView_x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          cView_y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          cView_x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          cView_y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          cViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          cViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          cViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        if ( ( playersTurn && markerIsOnC ) || simonCTrigger ) {\n    setFill( 'red' );\n    setRadius( 0.15 );\n}\nelse {\n    setFill( 'purple' );\n    setRadius( 0.05 );\n}\n\nsetStroke( 'black' );\n\nsetCenterX( cPosition.x );\nsetCenterY( cPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOnC' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'simonCTrigger' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cPosition' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.cSoundSoundClip );\n      delete scratchpad.cSoundSoundClip;\n      \n      scratchpad.cSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.cSoundWrappedAudioBufferListener );\n      delete scratchpad.cSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC' ], scratchpad.cSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.cSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.simonCSoundSoundClip );\n      delete scratchpad.simonCSoundSoundClip;\n      \n      scratchpad.simonCSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.simonCSoundWrappedAudioBufferListener );\n      delete scratchpad.simonCSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'simonCTrigger' ], scratchpad.simonCSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.simonCSoundSoundMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.cViewPath );\n      delete scratchpad.cViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC', 'simonCTrigger', 'cPosition' ], scratchpad.cViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.cViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty890 = phet.paperLand.getModelComponent( 'cPosition' );\n    if ( modelProperty890 ) {\n      modelProperty890.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty893 = phet.paperLand.getModelComponent( 'markerIsOnC' );\n    if ( modelProperty893 ) {\n      modelProperty893.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty896 = phet.paperLand.getModelComponent( 'markerIsOnC' );\n    if ( modelProperty896 ) {\n      modelProperty896.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound C', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Sound C\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOnC = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOnC', markerIsOnC );\n    \n\n      const simonCTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'simonCTrigger', simonCTrigger );\n    \n\n      const cPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'cPosition', cPosition );\n    \n\n      const cSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/g-tone.mp3' );\n      const cSoundSoundClip = new phet.tambo.SoundClip( cSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( cSoundSoundClip );\n      scratchpad.cSoundWrappedAudioBuffer = cSoundWrappedAudioBuffer;\n      \n      let cSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let cSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.cSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.cSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC' ], ( playersTurn, markerIsOnC ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              cSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              cSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !cSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - cSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !cSoundSoundClip.isPlaying ) {\n                  cSoundSoundClip.play();\n                }\n                cSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( cSoundStopSoundTimeout ){\n                  window.clearTimeout( cSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  cSoundStopSoundTimeout = window.setTimeout( () => {\n                    cSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( cSoundStopSoundTimeout ){\n                window.clearTimeout( cSoundStopSoundTimeout );\n              }\n              cSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( playersTurn && markerIsOnC ) {\n\n    // It is the player's turn and they put a marker on this paper - play the tone.\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.cSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.cSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.cSoundSoundClip = cSoundSoundClip;\n    \n\n      const simonCSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/g-tone.mp3' );\n      const simonCSoundSoundClip = new phet.tambo.SoundClip( simonCSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( simonCSoundSoundClip );\n      scratchpad.simonCSoundWrappedAudioBuffer = simonCSoundWrappedAudioBuffer;\n      \n      let simonCSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let simonCSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.simonCSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.simonCSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonCTrigger' ], ( simonCTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              simonCSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              simonCSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !simonCSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - simonCSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !simonCSoundSoundClip.isPlaying ) {\n                  simonCSoundSoundClip.play();\n                }\n                simonCSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( simonCSoundStopSoundTimeout ){\n                  window.clearTimeout( simonCSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  simonCSoundStopSoundTimeout = window.setTimeout( () => {\n                    simonCSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( simonCSoundStopSoundTimeout ){\n                window.clearTimeout( simonCSoundStopSoundTimeout );\n              }\n              simonCSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( simonCTrigger ) {\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.simonCSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.simonCSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.simonCSoundSoundClip = simonCSoundSoundClip;\n    \n\n\n      // Create a shape with kite.\n      const cViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const cViewPath = new phet.scenery.Path( cViewShape, {\n        fill: 'orange',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n        centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( cViewPath );\n      scratchpad.cViewPath = cViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.cViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC', 'simonCTrigger', 'cPosition' ], ( playersTurn, markerIsOnC, simonCTrigger, cPosition ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const cViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n        scratchpad.cViewPath.setShape( cViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.cViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n          centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        cViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        cViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        cViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        cViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        cViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        cViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        cViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        cViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        cViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        cViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const cViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( cViewPath.localBounds.width || 1 ) / ( cViewPath.localBounds.height || 1 );\n\n        const scaleX = cViewPathViewBounds.width / ( cViewPath.localBounds.width || 1 );\n        const scaleY = cViewPathViewBounds.height / ( cViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          cViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          cViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        cViewPath.center = cViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          cViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          cViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          cViewPath.fill = color;\n        };\n        \n        // for a line - Beware that the x/y variables are declared via the ShapeCodeFunctions!\n        const setX1 = ( newX1 ) => {\n          cView_x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          cView_y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          cView_x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          cView_y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          cViewPath.shape = phet.kite.Shape.lineSegment( cView_x1, cView_y1, cView_x2, cView_y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          cViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          cViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          cViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        if ( ( playersTurn && markerIsOnC ) || simonCTrigger ) {\n    setFill( 'red' );\n    setRadius( 0.15 );\n}\nelse {\n    setFill( 'purple' );\n    setRadius( 0.05 );\n}\n\nsetStroke( 'black' );\n\nsetCenterX( cPosition.x );\nsetCenterY( cPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOnC' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'simonCTrigger' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'cPosition' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.cSoundSoundClip );\n      delete scratchpad.cSoundSoundClip;\n      \n      scratchpad.cSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.cSoundWrappedAudioBufferListener );\n      delete scratchpad.cSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC' ], scratchpad.cSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.cSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.simonCSoundSoundClip );\n      delete scratchpad.simonCSoundSoundClip;\n      \n      scratchpad.simonCSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.simonCSoundWrappedAudioBufferListener );\n      delete scratchpad.simonCSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'simonCTrigger' ], scratchpad.simonCSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.simonCSoundSoundMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.cViewPath );\n      delete scratchpad.cViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnC', 'simonCTrigger', 'cPosition' ], scratchpad.cViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.cViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty890 = phet.paperLand.getModelComponent( 'cPosition' );\n    if ( modelProperty890 ) {\n      modelProperty890.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty893 = phet.paperLand.getModelComponent( 'markerIsOnC' );\n    if ( modelProperty893 ) {\n      modelProperty893.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty896 = phet.paperLand.getModelComponent( 'markerIsOnC' );\n    if ( modelProperty896 ) {\n      modelProperty896.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound C', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.my-temp-space.4.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/my-temp-space/programs/4/debugInfo",
  "claimUrl": "/api/spaces/my-temp-space/programs/4/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
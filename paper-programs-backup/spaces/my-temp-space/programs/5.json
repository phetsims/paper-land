{
  "number": 5,
  "originalCode": "// Sound D\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOnD = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOnD', markerIsOnD );\n    \n\n      const simonDTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'simonDTrigger', simonDTrigger );\n    \n\n      const dPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'dPosition', dPosition );\n    \n\n      const dSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/c-tone.mp3' );\n      const dSoundSoundClip = new phet.tambo.SoundClip( dSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( dSoundSoundClip );\n      scratchpad.dSoundWrappedAudioBuffer = dSoundWrappedAudioBuffer;\n      \n      let dSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let dSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.dSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.dSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD' ], ( playersTurn, markerIsOnD ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              dSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              dSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !dSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - dSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !dSoundSoundClip.isPlaying ) {\n                  dSoundSoundClip.play();\n                }\n                dSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( dSoundStopSoundTimeout ){\n                  window.clearTimeout( dSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  dSoundStopSoundTimeout = window.setTimeout( () => {\n                    dSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( dSoundStopSoundTimeout ){\n                window.clearTimeout( dSoundStopSoundTimeout );\n              }\n              dSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( playersTurn && markerIsOnD ) {\n\n    // It is the player's turn and they put a marker on this paper - play the tone.\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.dSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.dSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.dSoundSoundClip = dSoundSoundClip;\n    \n\n      const simonDSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/c-tone.mp3' );\n      const simonDSoundSoundClip = new phet.tambo.SoundClip( simonDSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( simonDSoundSoundClip );\n      scratchpad.simonDSoundWrappedAudioBuffer = simonDSoundWrappedAudioBuffer;\n      \n      let simonDSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let simonDSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.simonDSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.simonDSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonDTrigger' ], ( simonDTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              simonDSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              simonDSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !simonDSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - simonDSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !simonDSoundSoundClip.isPlaying ) {\n                  simonDSoundSoundClip.play();\n                }\n                simonDSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( simonDSoundStopSoundTimeout ){\n                  window.clearTimeout( simonDSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  simonDSoundStopSoundTimeout = window.setTimeout( () => {\n                    simonDSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( simonDSoundStopSoundTimeout ){\n                window.clearTimeout( simonDSoundStopSoundTimeout );\n              }\n              simonDSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( simonDTrigger ) {\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.simonDSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.simonDSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.simonDSoundSoundClip = simonDSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let dImageImageElement = document.createElement( 'img' );\n      dImageImageElement.src = 'media/images/uploads/plate.png';\n      const dImageImage = new phet.scenery.Image( dImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const dImageImageLoadProperty = new phet.axon.Property( 0 );\n      dImageImageElement.addEventListener( 'load', () => { dImageImageLoadProperty.value = dImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( dImageImage );\n      scratchpad.dImageImage = dImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.dImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD', 'simonDTrigger', 'dPosition' ], async ( playersTurn, markerIsOnD, simonDTrigger, dPosition ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        dImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        dImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        dImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        dImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        dImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        dImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        dImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        dImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        dImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        dImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const dImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( dImageImage.localBounds.width || 1 ) / ( dImageImage.localBounds.height || 1 );\n\n        const scaleX = dImageImageViewBounds.width / ( dImageImage.localBounds.width || 1 );\n        const scaleY = dImageImageViewBounds.height / ( dImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          dImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          dImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        dImageImage.center = dImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( dImageImage.image ) {\n              const startIndex = dImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = dImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const dImageImageImageElement = document.createElement( 'img' );\n              dImageImageImageElement.src = newImageName;\n              dImageImage.image = dImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              dImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        if ( ( playersTurn && markerIsOnD ) || simonDTrigger ) {\n    await setImage( 'uploads/garfield.png' );\n}\nelse {\n    await setImage( 'uploads/plate.png' );\n}\n\n\nsetCenterX( dPosition.x );\nsetCenterY( dPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, dImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      // Speak whenever the dependencies change.\n      const dSpeechSpeechFunction = ( simonDTrigger ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        \n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        dSpeechSpeech.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        dSpeechSpeech.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        dSpeechSpeech.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        dSpeechSpeech.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        dSpeechSpeech.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        dSpeechSpeech.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        dSpeechSpeech.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        dSpeechSpeech.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        dSpeechSpeech.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        dSpeechSpeech.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const dSpeechSpeechViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( dSpeechSpeech.localBounds.width || 1 ) / ( dSpeechSpeech.localBounds.height || 1 );\n\n        const scaleX = dSpeechSpeechViewBounds.width / ( dSpeechSpeech.localBounds.width || 1 );\n        const scaleY = dSpeechSpeechViewBounds.height / ( dSpeechSpeech.localBounds.height || 1 );\n\n        if ( stretch ) {\n          dSpeechSpeech.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          dSpeechSpeech.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        dSpeechSpeech.center = dSpeechSpeechViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.dSpeechSpeechUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.dSpeechSpeechUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        if ( simonDTrigger ) {\n    return 'Down.'\n}\n      }\n      \n      // a reusable utterance for this speech component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.dSpeechSpeechUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.dSpeechSpeechMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonDTrigger' ], ( simonDTrigger ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const speechResult = dSpeechSpeechFunction( simonDTrigger );\n        if ( speechResult && speechResult.toString ) {\n          const speechString = speechResult.toString();\n          if ( speechString && speechString.length > 0 ) {\n            scratchpad.dSpeechSpeechUtterance.alert = speechString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.dSpeechSpeechUtterance ); \n          }\n        }\n      }, {\n        lazy: false,\n        otherReferences: [  ]\n      } ); \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOnD' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'simonDTrigger' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'dPosition' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.dSoundSoundClip );\n      delete scratchpad.dSoundSoundClip;\n      \n      scratchpad.dSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.dSoundWrappedAudioBufferListener );\n      delete scratchpad.dSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD' ], scratchpad.dSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.dSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.simonDSoundSoundClip );\n      delete scratchpad.simonDSoundSoundClip;\n      \n      scratchpad.simonDSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.simonDSoundWrappedAudioBufferListener );\n      delete scratchpad.simonDSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'simonDTrigger' ], scratchpad.simonDSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.simonDSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.dImageImage );\n      delete scratchpad.dImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD', 'simonDTrigger', 'dPosition' ], scratchpad.dImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.dImageImageMultilinkId;\n    \n\n      // Remove the Speech multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'simonDTrigger' ], scratchpad.dSpeechSpeechMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.dSpeechSpeechMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.dSpeechSpeechUtterance;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty901 = phet.paperLand.getModelComponent( 'dPosition' );\n    if ( modelProperty901 ) {\n      modelProperty901.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty904 = phet.paperLand.getModelComponent( 'markerIsOnD' );\n    if ( modelProperty904 ) {\n      modelProperty904.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty907 = phet.paperLand.getModelComponent( 'markerIsOnD' );\n    if ( modelProperty907 ) {\n      modelProperty907.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound D', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Sound D\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOnD = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOnD', markerIsOnD );\n    \n\n      const simonDTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'simonDTrigger', simonDTrigger );\n    \n\n      const dPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'dPosition', dPosition );\n    \n\n      const dSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/c-tone.mp3' );\n      const dSoundSoundClip = new phet.tambo.SoundClip( dSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( dSoundSoundClip );\n      scratchpad.dSoundWrappedAudioBuffer = dSoundWrappedAudioBuffer;\n      \n      let dSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let dSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.dSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.dSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD' ], ( playersTurn, markerIsOnD ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              dSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              dSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !dSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - dSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !dSoundSoundClip.isPlaying ) {\n                  dSoundSoundClip.play();\n                }\n                dSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( dSoundStopSoundTimeout ){\n                  window.clearTimeout( dSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  dSoundStopSoundTimeout = window.setTimeout( () => {\n                    dSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( dSoundStopSoundTimeout ){\n                window.clearTimeout( dSoundStopSoundTimeout );\n              }\n              dSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( playersTurn && markerIsOnD ) {\n\n    // It is the player's turn and they put a marker on this paper - play the tone.\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.dSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.dSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.dSoundSoundClip = dSoundSoundClip;\n    \n\n      const simonDSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/c-tone.mp3' );\n      const simonDSoundSoundClip = new phet.tambo.SoundClip( simonDSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( simonDSoundSoundClip );\n      scratchpad.simonDSoundWrappedAudioBuffer = simonDSoundWrappedAudioBuffer;\n      \n      let simonDSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let simonDSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.simonDSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.simonDSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonDTrigger' ], ( simonDTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              simonDSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              simonDSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !simonDSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - simonDSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !simonDSoundSoundClip.isPlaying ) {\n                  simonDSoundSoundClip.play();\n                }\n                simonDSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( simonDSoundStopSoundTimeout ){\n                  window.clearTimeout( simonDSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  simonDSoundStopSoundTimeout = window.setTimeout( () => {\n                    simonDSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( simonDSoundStopSoundTimeout ){\n                window.clearTimeout( simonDSoundStopSoundTimeout );\n              }\n              simonDSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( simonDTrigger ) {\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.simonDSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.simonDSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.simonDSoundSoundClip = simonDSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let dImageImageElement = document.createElement( 'img' );\n      dImageImageElement.src = 'media/images/uploads/plate.png';\n      const dImageImage = new phet.scenery.Image( dImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const dImageImageLoadProperty = new phet.axon.Property( 0 );\n      dImageImageElement.addEventListener( 'load', () => { dImageImageLoadProperty.value = dImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( dImageImage );\n      scratchpad.dImageImage = dImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.dImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD', 'simonDTrigger', 'dPosition' ], async ( playersTurn, markerIsOnD, simonDTrigger, dPosition ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        dImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        dImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        dImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        dImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        dImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        dImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        dImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        dImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        dImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        dImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const dImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( dImageImage.localBounds.width || 1 ) / ( dImageImage.localBounds.height || 1 );\n\n        const scaleX = dImageImageViewBounds.width / ( dImageImage.localBounds.width || 1 );\n        const scaleY = dImageImageViewBounds.height / ( dImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          dImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          dImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        dImageImage.center = dImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( dImageImage.image ) {\n              const startIndex = dImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = dImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const dImageImageImageElement = document.createElement( 'img' );\n              dImageImageImageElement.src = newImageName;\n              dImageImage.image = dImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              dImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        if ( ( playersTurn && markerIsOnD ) || simonDTrigger ) {\n    await setImage( 'uploads/garfield.png' );\n}\nelse {\n    await setImage( 'uploads/plate.png' );\n}\n\n\nsetCenterX( dPosition.x );\nsetCenterY( dPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, dImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      // Speak whenever the dependencies change.\n      const dSpeechSpeechFunction = ( simonDTrigger ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        \n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        dSpeechSpeech.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        dSpeechSpeech.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        dSpeechSpeech.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        dSpeechSpeech.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        dSpeechSpeech.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        dSpeechSpeech.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        dSpeechSpeech.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        dSpeechSpeech.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        dSpeechSpeech.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        dSpeechSpeech.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const dSpeechSpeechViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( dSpeechSpeech.localBounds.width || 1 ) / ( dSpeechSpeech.localBounds.height || 1 );\n\n        const scaleX = dSpeechSpeechViewBounds.width / ( dSpeechSpeech.localBounds.width || 1 );\n        const scaleY = dSpeechSpeechViewBounds.height / ( dSpeechSpeech.localBounds.height || 1 );\n\n        if ( stretch ) {\n          dSpeechSpeech.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          dSpeechSpeech.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        dSpeechSpeech.center = dSpeechSpeechViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.dSpeechSpeechUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.dSpeechSpeechUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        if ( simonDTrigger ) {\n    return 'Down.'\n}\n      }\n      \n      // a reusable utterance for this speech component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.dSpeechSpeechUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.dSpeechSpeechMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonDTrigger' ], ( simonDTrigger ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const speechResult = dSpeechSpeechFunction( simonDTrigger );\n        if ( speechResult && speechResult.toString ) {\n          const speechString = speechResult.toString();\n          if ( speechString && speechString.length > 0 ) {\n            scratchpad.dSpeechSpeechUtterance.alert = speechString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.dSpeechSpeechUtterance ); \n          }\n        }\n      }, {\n        lazy: false,\n        otherReferences: [  ]\n      } ); \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOnD' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'simonDTrigger' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'dPosition' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.dSoundSoundClip );\n      delete scratchpad.dSoundSoundClip;\n      \n      scratchpad.dSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.dSoundWrappedAudioBufferListener );\n      delete scratchpad.dSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD' ], scratchpad.dSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.dSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.simonDSoundSoundClip );\n      delete scratchpad.simonDSoundSoundClip;\n      \n      scratchpad.simonDSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.simonDSoundWrappedAudioBufferListener );\n      delete scratchpad.simonDSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'simonDTrigger' ], scratchpad.simonDSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.simonDSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.dImageImage );\n      delete scratchpad.dImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnD', 'simonDTrigger', 'dPosition' ], scratchpad.dImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.dImageImageMultilinkId;\n    \n\n      // Remove the Speech multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'simonDTrigger' ], scratchpad.dSpeechSpeechMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.dSpeechSpeechMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.dSpeechSpeechUtterance;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty901 = phet.paperLand.getModelComponent( 'dPosition' );\n    if ( modelProperty901 ) {\n      modelProperty901.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty904 = phet.paperLand.getModelComponent( 'markerIsOnD' );\n    if ( modelProperty904 ) {\n      modelProperty904.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty907 = phet.paperLand.getModelComponent( 'markerIsOnD' );\n    if ( modelProperty907 ) {\n      modelProperty907.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound D', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.my-temp-space.5.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/my-temp-space/programs/5/debugInfo",
  "claimUrl": "/api/spaces/my-temp-space/programs/5/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
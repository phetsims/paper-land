{
  "number": 3,
  "originalCode": "// Sound B\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOnB = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOnB', markerIsOnB );\n    \n\n      const simonBTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'simonBTrigger', simonBTrigger );\n    \n\n      const bPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'bPosition', bPosition );\n    \n\n      const bSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/b-tone.mp3' );\n      const bSoundSoundClip = new phet.tambo.SoundClip( bSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( bSoundSoundClip );\n      scratchpad.bSoundWrappedAudioBuffer = bSoundWrappedAudioBuffer;\n      \n      let bSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let bSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.bSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.bSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB' ], ( playersTurn, markerIsOnB ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              bSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              bSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !bSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - bSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !bSoundSoundClip.isPlaying ) {\n                  bSoundSoundClip.play();\n                }\n                bSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( bSoundStopSoundTimeout ){\n                  window.clearTimeout( bSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  bSoundStopSoundTimeout = window.setTimeout( () => {\n                    bSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( bSoundStopSoundTimeout ){\n                window.clearTimeout( bSoundStopSoundTimeout );\n              }\n              bSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( playersTurn && markerIsOnB ) {\n\n    // It is the player's turn and they put a marker on this paper - play the tone.\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.bSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.bSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.bSoundSoundClip = bSoundSoundClip;\n    \n\n      const simonBSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/b-tone.mp3' );\n      const simonBSoundSoundClip = new phet.tambo.SoundClip( simonBSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( simonBSoundSoundClip );\n      scratchpad.simonBSoundWrappedAudioBuffer = simonBSoundWrappedAudioBuffer;\n      \n      let simonBSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let simonBSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.simonBSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.simonBSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonBTrigger' ], ( simonBTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              simonBSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              simonBSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !simonBSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - simonBSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !simonBSoundSoundClip.isPlaying ) {\n                  simonBSoundSoundClip.play();\n                }\n                simonBSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( simonBSoundStopSoundTimeout ){\n                  window.clearTimeout( simonBSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  simonBSoundStopSoundTimeout = window.setTimeout( () => {\n                    simonBSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( simonBSoundStopSoundTimeout ){\n                window.clearTimeout( simonBSoundStopSoundTimeout );\n              }\n              simonBSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( simonBTrigger ) {\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.simonBSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.simonBSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.simonBSoundSoundClip = simonBSoundSoundClip;\n    \n\n\n      // Create a shape with kite.\n      const bViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const bViewPath = new phet.scenery.Path( bViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n        centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( bViewPath );\n      scratchpad.bViewPath = bViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.bViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB', 'simonBTrigger', 'bPosition' ], ( playersTurn, markerIsOnB, simonBTrigger, bPosition ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const bViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n        scratchpad.bViewPath.setShape( bViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.bViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n          centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        bViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        bViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        bViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        bViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        bViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        bViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        bViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        bViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        bViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        bViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const bViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( bViewPath.localBounds.width || 1 ) / ( bViewPath.localBounds.height || 1 );\n\n        const scaleX = bViewPathViewBounds.width / ( bViewPath.localBounds.width || 1 );\n        const scaleY = bViewPathViewBounds.height / ( bViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          bViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          bViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        bViewPath.center = bViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          bViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          bViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          bViewPath.fill = color;\n        };\n        \n        // for a line - Beware that the x/y variables are declared via the ShapeCodeFunctions!\n        const setX1 = ( newX1 ) => {\n          bView_x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          bView_y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          bView_x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          bView_y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          bViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          bViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          bViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        if ( ( playersTurn && markerIsOnB ) || simonBTrigger ) {\n    setFill( 'blue' );\n    setRadius( 0.15 );\n}\nelse {\n    setFill( 'purple' );\n    setRadius( 0.05 );\n}\n\nsetStroke( 'black' );\n\nsetCenterX( bPosition.x );\nsetCenterY( bPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOnB' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'simonBTrigger' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'bPosition' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.bSoundSoundClip );\n      delete scratchpad.bSoundSoundClip;\n      \n      scratchpad.bSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.bSoundWrappedAudioBufferListener );\n      delete scratchpad.bSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB' ], scratchpad.bSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.bSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.simonBSoundSoundClip );\n      delete scratchpad.simonBSoundSoundClip;\n      \n      scratchpad.simonBSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.simonBSoundWrappedAudioBufferListener );\n      delete scratchpad.simonBSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'simonBTrigger' ], scratchpad.simonBSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.simonBSoundSoundMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.bViewPath );\n      delete scratchpad.bViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB', 'simonBTrigger', 'bPosition' ], scratchpad.bViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.bViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty879 = phet.paperLand.getModelComponent( 'bPosition' );\n    if ( modelProperty879 ) {\n      modelProperty879.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty882 = phet.paperLand.getModelComponent( 'markerIsOnB' );\n    if ( modelProperty882 ) {\n      modelProperty882.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty885 = phet.paperLand.getModelComponent( 'markerIsOnB' );\n    if ( modelProperty885 ) {\n      modelProperty885.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound B', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Sound B\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOnB = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOnB', markerIsOnB );\n    \n\n      const simonBTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'simonBTrigger', simonBTrigger );\n    \n\n      const bPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'bPosition', bPosition );\n    \n\n      const bSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/b-tone.mp3' );\n      const bSoundSoundClip = new phet.tambo.SoundClip( bSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( bSoundSoundClip );\n      scratchpad.bSoundWrappedAudioBuffer = bSoundWrappedAudioBuffer;\n      \n      let bSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let bSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.bSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.bSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB' ], ( playersTurn, markerIsOnB ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              bSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              bSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !bSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - bSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !bSoundSoundClip.isPlaying ) {\n                  bSoundSoundClip.play();\n                }\n                bSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( bSoundStopSoundTimeout ){\n                  window.clearTimeout( bSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  bSoundStopSoundTimeout = window.setTimeout( () => {\n                    bSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( bSoundStopSoundTimeout ){\n                window.clearTimeout( bSoundStopSoundTimeout );\n              }\n              bSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( playersTurn && markerIsOnB ) {\n\n    // It is the player's turn and they put a marker on this paper - play the tone.\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.bSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.bSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.bSoundSoundClip = bSoundSoundClip;\n    \n\n      const simonBSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/b-tone.mp3' );\n      const simonBSoundSoundClip = new phet.tambo.SoundClip( simonBSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( simonBSoundSoundClip );\n      scratchpad.simonBSoundWrappedAudioBuffer = simonBSoundWrappedAudioBuffer;\n      \n      let simonBSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let simonBSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.simonBSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.simonBSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'simonBTrigger' ], ( simonBTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              simonBSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              simonBSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !simonBSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - simonBSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !simonBSoundSoundClip.isPlaying ) {\n                  simonBSoundSoundClip.play();\n                }\n                simonBSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( simonBSoundStopSoundTimeout ){\n                  window.clearTimeout( simonBSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  simonBSoundStopSoundTimeout = window.setTimeout( () => {\n                    simonBSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( simonBSoundStopSoundTimeout ){\n                window.clearTimeout( simonBSoundStopSoundTimeout );\n              }\n              simonBSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( simonBTrigger ) {\n    stop();\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.simonBSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.simonBSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.simonBSoundSoundClip = simonBSoundSoundClip;\n    \n\n\n      // Create a shape with kite.\n      const bViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const bViewPath = new phet.scenery.Path( bViewShape, {\n        fill: 'lightblue',\n        stroke: 'red',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n        centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( bViewPath );\n      scratchpad.bViewPath = bViewPath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.bViewPathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB', 'simonBTrigger', 'bPosition' ], ( playersTurn, markerIsOnB, simonBTrigger, bPosition ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const bViewShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 0.05, sharedData.displaySize.width ) )\n        scratchpad.bViewPath.setShape( bViewShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.bViewPath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ) : 0.5,\n          centerY: ('model' === 'model' && 0.5) ? phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height) : 0.5,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        bViewPath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        bViewPath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        bViewPath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        bViewPath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        bViewPath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        bViewPath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        bViewPath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        bViewPath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        bViewPath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        bViewPath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const bViewPathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( bViewPath.localBounds.width || 1 ) / ( bViewPath.localBounds.height || 1 );\n\n        const scaleX = bViewPathViewBounds.width / ( bViewPath.localBounds.width || 1 );\n        const scaleY = bViewPathViewBounds.height / ( bViewPath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          bViewPath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          bViewPath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        bViewPath.center = bViewPathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          bViewPath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          bViewPath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          bViewPath.fill = color;\n        };\n        \n        // for a line - Beware that the x/y variables are declared via the ShapeCodeFunctions!\n        const setX1 = ( newX1 ) => {\n          bView_x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          bView_y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          bView_x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          bView_y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          bViewPath.shape = phet.kite.Shape.lineSegment( bView_x1, bView_y1, bView_x2, bView_y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          bViewPath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          bViewPath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          bViewPath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        if ( ( playersTurn && markerIsOnB ) || simonBTrigger ) {\n    setFill( 'blue' );\n    setRadius( 0.15 );\n}\nelse {\n    setFill( 'purple' );\n    setRadius( 0.05 );\n}\n\nsetStroke( 'black' );\n\nsetCenterX( bPosition.x );\nsetCenterY( bPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOnB' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'simonBTrigger' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'bPosition' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.bSoundSoundClip );\n      delete scratchpad.bSoundSoundClip;\n      \n      scratchpad.bSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.bSoundWrappedAudioBufferListener );\n      delete scratchpad.bSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB' ], scratchpad.bSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.bSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.simonBSoundSoundClip );\n      delete scratchpad.simonBSoundSoundClip;\n      \n      scratchpad.simonBSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.simonBSoundWrappedAudioBufferListener );\n      delete scratchpad.simonBSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'simonBTrigger' ], scratchpad.simonBSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.simonBSoundSoundMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.bViewPath );\n      delete scratchpad.bViewPath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'playersTurn', 'markerIsOnB', 'simonBTrigger', 'bPosition' ], scratchpad.bViewPathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.bViewPathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty879 = phet.paperLand.getModelComponent( 'bPosition' );\n    if ( modelProperty879 ) {\n      modelProperty879.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty882 = phet.paperLand.getModelComponent( 'markerIsOnB' );\n    if ( modelProperty882 ) {\n      modelProperty882.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty885 = phet.paperLand.getModelComponent( 'markerIsOnB' );\n    if ( modelProperty885 ) {\n      modelProperty885.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound B', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.my-temp-space.3.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/my-temp-space/programs/3/debugInfo",
  "claimUrl": "/api/spaces/my-temp-space/programs/3/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
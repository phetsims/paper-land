{
  "number": 1,
  "originalCode": "// Model Data\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const voltageValue = new phet.axon.NumberProperty( 4.5, {\n        range: new phet.dot.Range( 0.1, 9.0 )\n      });\n      phet.paperLand.addModelComponent( 'voltageValue', voltageValue );\n    \n\n      const resistanceValue = new phet.axon.NumberProperty( 500, {\n        range: new phet.dot.Range( 10, 1000 )\n      });\n      phet.paperLand.addModelComponent( 'resistanceValue', resistanceValue );\n    \n\n      const currentValue = new phet.axon.NumberProperty( 0.009, {\n        range: new phet.dot.Range( 0.0001, 0.9 )\n      });\n      phet.paperLand.addModelComponent( 'currentValue', currentValue );\n    \n\n      scratchpad.calculateCurrentLinkMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'voltageValue', 'resistanceValue' ], ( voltageValue, resistanceValue ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'currentValue' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const currentValue = phet.paperLand.getModelComponent( 'currentValue' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setCurrentValue = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'currentValue' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          setCurrentValue( (1000 * voltageValue) / (resistanceValue) );\n// returns milliamps   \n        }\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'voltageValue' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'resistanceValue' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'currentValue' );\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'voltageValue', 'resistanceValue' ], scratchpad.calculateCurrentLinkMultilinkId );\n      delete scratchpad.calculateCurrentLinkMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Model Data', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Model Data\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const voltageValue = new phet.axon.NumberProperty( 4.5, {\n        range: new phet.dot.Range( 0.1, 9.0 )\n      });\n      phet.paperLand.addModelComponent( 'voltageValue', voltageValue );\n    \n\n      const resistanceValue = new phet.axon.NumberProperty( 500, {\n        range: new phet.dot.Range( 10, 1000 )\n      });\n      phet.paperLand.addModelComponent( 'resistanceValue', resistanceValue );\n    \n\n      const currentValue = new phet.axon.NumberProperty( 0.009, {\n        range: new phet.dot.Range( 0.0001, 0.9 )\n      });\n      phet.paperLand.addModelComponent( 'currentValue', currentValue );\n    \n\n      scratchpad.calculateCurrentLinkMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'voltageValue', 'resistanceValue' ], ( voltageValue, resistanceValue ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'currentValue' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const currentValue = phet.paperLand.getModelComponent( 'currentValue' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setCurrentValue = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'currentValue' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          setCurrentValue( (1000 * voltageValue) / (resistanceValue) );\n// returns milliamps   \n        }\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'voltageValue' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'resistanceValue' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'currentValue' );\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'voltageValue', 'resistanceValue' ], scratchpad.calculateCurrentLinkMultilinkId );\n      delete scratchpad.calculateCurrentLinkMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Model Data', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.voicing-response-patterns.1.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/voicing-response-patterns/programs/1/debugInfo",
  "claimUrl": "/api/spaces/voicing-response-patterns/programs/1/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
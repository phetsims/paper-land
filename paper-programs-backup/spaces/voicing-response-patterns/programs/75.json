{
  "number": 75,
  "originalCode": "// Slider - Snappy Qualitative\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isFocused2 = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isFocused2', isFocused2 );\n    \n\n      const value2 = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'value2', value2 );\n    \n\n      const roundedRegionValue = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'roundedRegionValue', roundedRegionValue );\n    \n\n      scratchpad.roundTheNumberLinkMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'value2' ], ( value2 ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'roundedRegionValue' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const roundedRegionValue = phet.paperLand.getModelComponent( 'roundedRegionValue' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setRoundedRegionValue = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'roundedRegionValue' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          setRoundedRegionValue(Math.floor(value2));\n\nphet.paperLand.console.log(`${value2} to ${roundedRegionValue}`);   \n        }\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isFocused2' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'value2' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'roundedRegionValue' );\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'value2' ], scratchpad.roundTheNumberLinkMultilinkId );\n      delete scratchpad.roundTheNumberLinkMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty198 = phet.paperLand.getModelComponent( 'value2' );\n    if ( modelProperty198 ) {\n      modelProperty198.value = modelProperty198.range.min + ( 1 - phet.paperLand.utils.getProgramCenter( points ).y ) * ( modelProperty198.range.max - modelProperty198.range.min );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty206 = phet.paperLand.getModelComponent( 'isFocused2' );\n    if ( modelProperty206 ) {\n      modelProperty206.value = otherPaperNumber === 20;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty209 = phet.paperLand.getModelComponent( 'isFocused2' );\n    if ( modelProperty209 ) {\n      modelProperty209.value = otherPaperNumber === 20 ? false : modelProperty209.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Slider - Snappy Qualitative', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Slider - Snappy Qualitative\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isFocused2 = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isFocused2', isFocused2 );\n    \n\n      const value2 = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'value2', value2 );\n    \n\n      const roundedRegionValue = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'roundedRegionValue', roundedRegionValue );\n    \n\n      scratchpad.roundTheNumberLinkMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'value2' ], ( value2 ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'roundedRegionValue' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const roundedRegionValue = phet.paperLand.getModelComponent( 'roundedRegionValue' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setRoundedRegionValue = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'roundedRegionValue' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          setRoundedRegionValue(Math.floor(value2));\n\nphet.paperLand.console.log(`${value2} to ${roundedRegionValue}`);   \n        }\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isFocused2' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'value2' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'roundedRegionValue' );\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'value2' ], scratchpad.roundTheNumberLinkMultilinkId );\n      delete scratchpad.roundTheNumberLinkMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty198 = phet.paperLand.getModelComponent( 'value2' );\n    if ( modelProperty198 ) {\n      modelProperty198.value = modelProperty198.range.min + ( 1 - phet.paperLand.utils.getProgramCenter( points ).y ) * ( modelProperty198.range.max - modelProperty198.range.min );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty206 = phet.paperLand.getModelComponent( 'isFocused2' );\n    if ( modelProperty206 ) {\n      modelProperty206.value = otherPaperNumber === 20;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty209 = phet.paperLand.getModelComponent( 'isFocused2' );\n    if ( modelProperty209 ) {\n      modelProperty209.value = otherPaperNumber === 20 ? false : modelProperty209.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Slider - Snappy Qualitative', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.voicing-response-patterns.75.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/voicing-response-patterns/programs/75/debugInfo",
  "claimUrl": "/api/spaces/voicing-response-patterns/programs/75/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
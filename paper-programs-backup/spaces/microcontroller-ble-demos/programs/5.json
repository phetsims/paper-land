{
  "number": 5,
  "originalCode": "// Hopping Frog\n// Keywords: microbit, button\n// Description: When triggered, buttonPressed boolean triggers an image change to animate a hopping frog (pair with BLE Button program).\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const buttonPressed = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'buttonPressed', buttonPressed );\n    \n\n      // Create a background rectangle and add it to the view.\n      const blueBackgroundBackgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n        fill: '#AFEEEE'\n      } );\n      \n      // If there are no dependencies for the background, add it to the view immediately. Otherwise, we will add it\n      // once all dependencies are available.\n      if ( [  ].length === 0 ) {\n        sharedData.scene.addChild( blueBackgroundBackgroundRectangle );\n        blueBackgroundBackgroundRectangle.moveToBack();\n      }\n      \n      // Assign to the scratchpad so that we can remove it later.\n      scratchpad.blueBackgroundBackgroundRectangle = blueBackgroundBackgroundRectangle;\n  \n      const blueBackgroundBackgroundColorDependencies = [  ];\n\n      // Get a new background color whenever a dependency changes. The control function should return a color string.\n      const blueBackgroundBackgroundFunction = (  ) => {\n      \n        // bring in the references so they are available in the control function\n        \n      \n        \n      }\n      \n      // Update the background rectangle whenever the dependencies change.\n      scratchpad.blueBackgroundBackgroundMultilinkId = phet.paperLand.addModelPropertyMultilink( [  ], (  ) => {\n    \n        const backgroundColorString = blueBackgroundBackgroundFunction(  );\n        \n        // wait to add the background until all dependencies are available (only add this once)\n        if ( scratchpad.blueBackgroundBackgroundRectangle.parents.length === 0 ) {\n          sharedData.scene.addChild( blueBackgroundBackgroundRectangle );\n          blueBackgroundBackgroundRectangle.moveToBack();\n        }\n        \n        // the function may not be implemented\n        if ( backgroundColorString ) {\n          blueBackgroundBackgroundRectangle.fill = backgroundColorString;\n        }\n        \n        blueBackgroundBackgroundRectangle.setRect( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      // Create an image and add it to the view.\n      let hoppingImageImageElement = document.createElement( 'img' );\n      hoppingImageImageElement.src = 'media/images/hopping-frog.gif';\n      const hoppingImageImage = new phet.scenery.Image( hoppingImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const hoppingImageImageLoadProperty = new phet.axon.Property( 0 );\n      hoppingImageImageElement.addEventListener( 'load', () => { hoppingImageImageLoadProperty.value = hoppingImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( hoppingImageImage );\n      scratchpad.hoppingImageImage = hoppingImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.hoppingImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'buttonPressed' ], async ( buttonPressed ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        hoppingImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        hoppingImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        hoppingImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        hoppingImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        hoppingImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        hoppingImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        hoppingImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        hoppingImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        hoppingImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        hoppingImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const hoppingImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( hoppingImageImage.localBounds.width || 1 ) / ( hoppingImageImage.localBounds.height || 1 );\n\n        const scaleX = hoppingImageImageViewBounds.width / ( hoppingImageImage.localBounds.width || 1 );\n        const scaleY = hoppingImageImageViewBounds.height / ( hoppingImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          hoppingImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          hoppingImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        hoppingImageImage.center = hoppingImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( hoppingImageImage.image ) {\n              const startIndex = hoppingImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = hoppingImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const hoppingImageImageImageElement = document.createElement( 'img' );\n              hoppingImageImageImageElement.src = newImageName;\n              hoppingImageImage.image = hoppingImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              hoppingImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        // hopping when button is pressed\nsetVisible( buttonPressed );\n\nsetCenterX( 0.5 );\nsetCenterY( 0.5 );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, hoppingImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      // Create an image and add it to the view.\n      let idleImageImageElement = document.createElement( 'img' );\n      idleImageImageElement.src = 'media/images/idle-frog.gif';\n      const idleImageImage = new phet.scenery.Image( idleImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const idleImageImageLoadProperty = new phet.axon.Property( 0 );\n      idleImageImageElement.addEventListener( 'load', () => { idleImageImageLoadProperty.value = idleImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( idleImageImage );\n      scratchpad.idleImageImage = idleImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.idleImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'buttonPressed' ], async ( buttonPressed ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        idleImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        idleImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        idleImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        idleImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        idleImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        idleImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        idleImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        idleImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        idleImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        idleImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const idleImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( idleImageImage.localBounds.width || 1 ) / ( idleImageImage.localBounds.height || 1 );\n\n        const scaleX = idleImageImageViewBounds.width / ( idleImageImage.localBounds.width || 1 );\n        const scaleY = idleImageImageViewBounds.height / ( idleImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          idleImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          idleImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        idleImageImage.center = idleImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( idleImageImage.image ) {\n              const startIndex = idleImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = idleImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const idleImageImageImageElement = document.createElement( 'img' );\n              idleImageImageImageElement.src = newImageName;\n              idleImageImage.image = idleImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              idleImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        // idle when not pressed - boolean is false\nsetVisible( !buttonPressed );\n\nsetCenterX( 0.5 );\nsetCenterY( 0.5 );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, idleImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'buttonPressed' );\n    \n\n      // Remove the background rectangle from the view.\n      sharedData.scene.removeChild( scratchpad.blueBackgroundBackgroundRectangle );\n      delete scratchpad.blueBackgroundBackgroundRectangle;\n      \n      // Remove the multilink if there were any dependencies\n      if ( scratchpad.blueBackgroundBackgroundMultilinkId ) {\n        phet.paperLand.removeModelPropertyMultilink( [  ], scratchpad.blueBackgroundBackgroundMultilinkId, {\n          otherReferences: [  ]\n        } );\n        delete scratchpad.blueBackgroundBackgroundMultilinkId;\n      }\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.hoppingImageImage );\n      delete scratchpad.hoppingImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'buttonPressed' ], scratchpad.hoppingImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.hoppingImageImageMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.idleImageImage );\n      delete scratchpad.idleImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'buttonPressed' ], scratchpad.idleImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.idleImageImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Hopping Frog', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Hopping Frog\n// Keywords: microbit, button\n// Description: When triggered, buttonPressed boolean triggers an image change to animate a hopping frog (pair with BLE Button program).\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const buttonPressed = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'buttonPressed', buttonPressed );\n    \n\n      // Create a background rectangle and add it to the view.\n      const blueBackgroundBackgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n        fill: '#AFEEEE'\n      } );\n      \n      // If there are no dependencies for the background, add it to the view immediately. Otherwise, we will add it\n      // once all dependencies are available.\n      if ( [  ].length === 0 ) {\n        sharedData.scene.addChild( blueBackgroundBackgroundRectangle );\n        blueBackgroundBackgroundRectangle.moveToBack();\n      }\n      \n      // Assign to the scratchpad so that we can remove it later.\n      scratchpad.blueBackgroundBackgroundRectangle = blueBackgroundBackgroundRectangle;\n  \n      const blueBackgroundBackgroundColorDependencies = [  ];\n\n      // Get a new background color whenever a dependency changes. The control function should return a color string.\n      const blueBackgroundBackgroundFunction = (  ) => {\n      \n        // bring in the references so they are available in the control function\n        \n      \n        \n      }\n      \n      // Update the background rectangle whenever the dependencies change.\n      scratchpad.blueBackgroundBackgroundMultilinkId = phet.paperLand.addModelPropertyMultilink( [  ], (  ) => {\n    \n        const backgroundColorString = blueBackgroundBackgroundFunction(  );\n        \n        // wait to add the background until all dependencies are available (only add this once)\n        if ( scratchpad.blueBackgroundBackgroundRectangle.parents.length === 0 ) {\n          sharedData.scene.addChild( blueBackgroundBackgroundRectangle );\n          blueBackgroundBackgroundRectangle.moveToBack();\n        }\n        \n        // the function may not be implemented\n        if ( backgroundColorString ) {\n          blueBackgroundBackgroundRectangle.fill = backgroundColorString;\n        }\n        \n        blueBackgroundBackgroundRectangle.setRect( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      // Create an image and add it to the view.\n      let hoppingImageImageElement = document.createElement( 'img' );\n      hoppingImageImageElement.src = 'media/images/hopping-frog.gif';\n      const hoppingImageImage = new phet.scenery.Image( hoppingImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const hoppingImageImageLoadProperty = new phet.axon.Property( 0 );\n      hoppingImageImageElement.addEventListener( 'load', () => { hoppingImageImageLoadProperty.value = hoppingImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( hoppingImageImage );\n      scratchpad.hoppingImageImage = hoppingImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.hoppingImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'buttonPressed' ], async ( buttonPressed ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        hoppingImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        hoppingImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        hoppingImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        hoppingImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        hoppingImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        hoppingImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        hoppingImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        hoppingImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        hoppingImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        hoppingImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const hoppingImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( hoppingImageImage.localBounds.width || 1 ) / ( hoppingImageImage.localBounds.height || 1 );\n\n        const scaleX = hoppingImageImageViewBounds.width / ( hoppingImageImage.localBounds.width || 1 );\n        const scaleY = hoppingImageImageViewBounds.height / ( hoppingImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          hoppingImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          hoppingImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        hoppingImageImage.center = hoppingImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( hoppingImageImage.image ) {\n              const startIndex = hoppingImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = hoppingImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const hoppingImageImageImageElement = document.createElement( 'img' );\n              hoppingImageImageImageElement.src = newImageName;\n              hoppingImageImage.image = hoppingImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              hoppingImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        // hopping when button is pressed\nsetVisible( buttonPressed );\n\nsetCenterX( 0.5 );\nsetCenterY( 0.5 );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, hoppingImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      // Create an image and add it to the view.\n      let idleImageImageElement = document.createElement( 'img' );\n      idleImageImageElement.src = 'media/images/idle-frog.gif';\n      const idleImageImage = new phet.scenery.Image( idleImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const idleImageImageLoadProperty = new phet.axon.Property( 0 );\n      idleImageImageElement.addEventListener( 'load', () => { idleImageImageLoadProperty.value = idleImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( idleImageImage );\n      scratchpad.idleImageImage = idleImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.idleImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'buttonPressed' ], async ( buttonPressed ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        idleImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        idleImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        idleImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        idleImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        idleImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        idleImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        idleImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        idleImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        idleImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        idleImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const idleImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( idleImageImage.localBounds.width || 1 ) / ( idleImageImage.localBounds.height || 1 );\n\n        const scaleX = idleImageImageViewBounds.width / ( idleImageImage.localBounds.width || 1 );\n        const scaleY = idleImageImageViewBounds.height / ( idleImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          idleImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          idleImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        idleImageImage.center = idleImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( idleImageImage.image ) {\n              const startIndex = idleImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = idleImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const idleImageImageImageElement = document.createElement( 'img' );\n              idleImageImageImageElement.src = newImageName;\n              idleImageImage.image = idleImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              idleImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        // idle when not pressed - boolean is false\nsetVisible( !buttonPressed );\n\nsetCenterX( 0.5 );\nsetCenterY( 0.5 );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, idleImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'buttonPressed' );\n    \n\n      // Remove the background rectangle from the view.\n      sharedData.scene.removeChild( scratchpad.blueBackgroundBackgroundRectangle );\n      delete scratchpad.blueBackgroundBackgroundRectangle;\n      \n      // Remove the multilink if there were any dependencies\n      if ( scratchpad.blueBackgroundBackgroundMultilinkId ) {\n        phet.paperLand.removeModelPropertyMultilink( [  ], scratchpad.blueBackgroundBackgroundMultilinkId, {\n          otherReferences: [  ]\n        } );\n        delete scratchpad.blueBackgroundBackgroundMultilinkId;\n      }\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.hoppingImageImage );\n      delete scratchpad.hoppingImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'buttonPressed' ], scratchpad.hoppingImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.hoppingImageImageMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.idleImageImage );\n      delete scratchpad.idleImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'buttonPressed' ], scratchpad.idleImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.idleImageImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Hopping Frog', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.microcontroller-ble-demos.5.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/microcontroller-ble-demos/programs/5/debugInfo",
  "claimUrl": "/api/spaces/microcontroller-ble-demos/programs/5/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
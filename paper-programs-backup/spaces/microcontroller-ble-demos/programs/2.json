{
  "number": 2,
  "originalCode": "// LED Text Emoji by Rotation\n// Keywords: \n// Description: A simple program to send a happy or sad face as LED Text to the micro:bit by rotating the paper program.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const paperRotated = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'paperRotated', paperRotated );\n    \n\n    \n      if ( true ) {\n        \n        // Writing to a characteristic, in this case we are controlling the device from the paper playground model.\n        // We can set up a mulilink that will write to the characteristic when the dependency properties change.\n        scratchpad.bleFaceControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'paperRotated' ], ( paperRotated ) => {\n        \n          // references to each model components that will just be read from (not part of the multilink) - since\n          // they are not part of the multilink, they may not exist yet\n          if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n            \n            const writeToCharacteristic = _newCharacteristicValue => {\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( 'e95dd91d-251d-470a-a062-fa1922dfa9a8', 'e95d93ee-251d-470a-a062-fa1922dfa9a8', _newCharacteristicValue );\n            };\n            \n            const writeStringToCharacteristic = ( _newCharacteristicValueString, _startDelim = '$', _endDelim = '|' ) => {\n            \n              // wrap the string in delimiters for the device\n              const _wrappedString = _startDelim + _newCharacteristicValueString + _endDelim;\n              \n              // encode as UTF-8 Uint8Array\n              const _encodedValue = new TextEncoder().encode( _wrappedString );\n            \n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( 'e95dd91d-251d-470a-a062-fa1922dfa9a8', 'e95d93ee-251d-470a-a062-fa1922dfa9a8', _encodedValue );\n            };\n            \n            // _matrix is a 5x5 2D array of 1s and 0s, corresponding to the LED matrix\n            const writeMatrixToCharacteristic = ( _matrix ) => {\n              const _ledMatrix = new Int8Array(5);\n              const _buffer = [\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0']\n              ]\n              for (var i = 0; i < 5; i++) {\n                for (var j = 0; j < 5; j++) {\n                  _buffer[i][7-j] = _matrix[i][4 - j]\n                }\n              }\n              for (var i = 0; i < 5; i++) {\n                const _string = _buffer[i].join(\"\");\n                _ledMatrix[i]=parseInt(_string,2)\n              }\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( 'e95dd91d-251d-470a-a062-fa1922dfa9a8', 'e95d93ee-251d-470a-a062-fa1922dfa9a8', _ledMatrix );\n            };\n            \n            // the code block that the user wrote to change controlled Properties\n            // micro:bit LED Text expects a UTF8 string.\n// Create an encoder and encode. Do not use writeStringToCharacteristic()\n// as this will add delimiters to your string.\n\nconst encoder = new TextEncoder();\n\nconst faceString = paperRotated ? ':)' : ':(';\nwriteToCharacteristic( encoder.encode( faceString ) );\n\nconsole.log( `sent data: ${faceString}` );\n          }\n        } );\n      }\n      else {\n      \n        // Reading from the characteristic, in this case we are controlling other model components\n        phet.paperLand.boardBluetoothServers.addCharacteristicListener(\n          'e95dd91d-251d-470a-a062-fa1922dfa9a8',\n          'e95d93ee-251d-470a-a062-fa1922dfa9a8',\n          deviceValue => {\n          \n            if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n              // Make available as a string for easy reading\n              const _textDecoder = new TextDecoder('utf-8'); // Default is utf-8, which is typical for UART text data\n              const deviceValueString = _textDecoder.decode(deviceValue);\n            \n              // references to each model component controlled by this listener\n              \n            \n              // the functions create in the local scope to manipulate the controlled components\n              \n              \n              // the function that that the user wrote\n              // micro:bit LED Text expects a UTF8 string.\n// Create an encoder and encode. Do not use writeStringToCharacteristic()\n// as this will add delimiters to your string.\n\nconst encoder = new TextEncoder();\n\nconst faceString = paperRotated ? ':)' : ':(';\nwriteToCharacteristic( encoder.encode( faceString ) );\n\nconsole.log( `sent data: ${faceString}` ); \n            }\n         \n          }\n        )\n        .then( addedListener => {\n          scratchpad.characteristicListener = addedListener;\n        } )\n        .catch( error => {\n          phet.paperLand.console.error( error );\n        } );\n      }\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'paperRotated' );\n    \n\n     phet.paperLand.console.log( 'Removing a BLE component' );\n     phet.paperLand.boardBluetoothServers.removeCharacteristicListener(\n       'e95dd91d-251d-470a-a062-fa1922dfa9a8',\n       'e95d93ee-251d-470a-a062-fa1922dfa9a8',\n       scratchpad.characteristicListener\n     ).catch( error => {\n       phet.paperLand.console.error( error );\n     } );\n     \n     if ( scratchpad.bleFaceControllerMultilinkId ) {\n       phet.paperLand.removeModelPropertyMultilink( [ 'paperRotated' ], scratchpad.bleFaceControllerMultilinkId );\n       delete scratchpad.bleFaceControllerMultilinkId;\n     }\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty150 = phet.paperLand.getModelComponent( 'paperRotated' );\n    if ( modelProperty150 ) {\n      modelProperty150.value = phet.paperLand.utils.getNormalizedProgramRotation( points ) > 0.25 && phet.paperLand.utils.getNormalizedProgramRotation( points ) < 0.75;\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('LED Text Emoji by Rotation', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// LED Text Emoji by Rotation\n// Keywords: \n// Description: A simple program to send a happy or sad face as LED Text to the micro:bit by rotating the paper program.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const paperRotated = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'paperRotated', paperRotated );\n    \n\n    \n      if ( true ) {\n        \n        // Writing to a characteristic, in this case we are controlling the device from the paper playground model.\n        // We can set up a mulilink that will write to the characteristic when the dependency properties change.\n        scratchpad.bleFaceControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'paperRotated' ], ( paperRotated ) => {\n        \n          // references to each model components that will just be read from (not part of the multilink) - since\n          // they are not part of the multilink, they may not exist yet\n          if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n            \n            const writeToCharacteristic = _newCharacteristicValue => {\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( 'e95dd91d-251d-470a-a062-fa1922dfa9a8', 'e95d93ee-251d-470a-a062-fa1922dfa9a8', _newCharacteristicValue );\n            };\n            \n            const writeStringToCharacteristic = ( _newCharacteristicValueString, _startDelim = '$', _endDelim = '|' ) => {\n            \n              // wrap the string in delimiters for the device\n              const _wrappedString = _startDelim + _newCharacteristicValueString + _endDelim;\n              \n              // encode as UTF-8 Uint8Array\n              const _encodedValue = new TextEncoder().encode( _wrappedString );\n            \n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( 'e95dd91d-251d-470a-a062-fa1922dfa9a8', 'e95d93ee-251d-470a-a062-fa1922dfa9a8', _encodedValue );\n            };\n            \n            // _matrix is a 5x5 2D array of 1s and 0s, corresponding to the LED matrix\n            const writeMatrixToCharacteristic = ( _matrix ) => {\n              const _ledMatrix = new Int8Array(5);\n              const _buffer = [\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0'],\n                ['0', '0', '0', '0', '0', '0', '0', '0']\n              ]\n              for (var i = 0; i < 5; i++) {\n                for (var j = 0; j < 5; j++) {\n                  _buffer[i][7-j] = _matrix[i][4 - j]\n                }\n              }\n              for (var i = 0; i < 5; i++) {\n                const _string = _buffer[i].join(\"\");\n                _ledMatrix[i]=parseInt(_string,2)\n              }\n              phet.paperLand.boardBluetoothServers.writeToCharacteristic( 'e95dd91d-251d-470a-a062-fa1922dfa9a8', 'e95d93ee-251d-470a-a062-fa1922dfa9a8', _ledMatrix );\n            };\n            \n            // the code block that the user wrote to change controlled Properties\n            // micro:bit LED Text expects a UTF8 string.\n// Create an encoder and encode. Do not use writeStringToCharacteristic()\n// as this will add delimiters to your string.\n\nconst encoder = new TextEncoder();\n\nconst faceString = paperRotated ? ':)' : ':(';\nwriteToCharacteristic( encoder.encode( faceString ) );\n\nconsole.log( `sent data: ${faceString}` );\n          }\n        } );\n      }\n      else {\n      \n        // Reading from the characteristic, in this case we are controlling other model components\n        phet.paperLand.boardBluetoothServers.addCharacteristicListener(\n          'e95dd91d-251d-470a-a062-fa1922dfa9a8',\n          'e95d93ee-251d-470a-a062-fa1922dfa9a8',\n          deviceValue => {\n          \n            if ( phet.paperLand.hasAllModelComponents( [  ] ) ) {\n            \n              // Make available as a string for easy reading\n              const _textDecoder = new TextDecoder('utf-8'); // Default is utf-8, which is typical for UART text data\n              const deviceValueString = _textDecoder.decode(deviceValue);\n            \n              // references to each model component controlled by this listener\n              \n            \n              // the functions create in the local scope to manipulate the controlled components\n              \n              \n              // the function that that the user wrote\n              // micro:bit LED Text expects a UTF8 string.\n// Create an encoder and encode. Do not use writeStringToCharacteristic()\n// as this will add delimiters to your string.\n\nconst encoder = new TextEncoder();\n\nconst faceString = paperRotated ? ':)' : ':(';\nwriteToCharacteristic( encoder.encode( faceString ) );\n\nconsole.log( `sent data: ${faceString}` ); \n            }\n         \n          }\n        )\n        .then( addedListener => {\n          scratchpad.characteristicListener = addedListener;\n        } )\n        .catch( error => {\n          phet.paperLand.console.error( error );\n        } );\n      }\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'paperRotated' );\n    \n\n     phet.paperLand.console.log( 'Removing a BLE component' );\n     phet.paperLand.boardBluetoothServers.removeCharacteristicListener(\n       'e95dd91d-251d-470a-a062-fa1922dfa9a8',\n       'e95d93ee-251d-470a-a062-fa1922dfa9a8',\n       scratchpad.characteristicListener\n     ).catch( error => {\n       phet.paperLand.console.error( error );\n     } );\n     \n     if ( scratchpad.bleFaceControllerMultilinkId ) {\n       phet.paperLand.removeModelPropertyMultilink( [ 'paperRotated' ], scratchpad.bleFaceControllerMultilinkId );\n       delete scratchpad.bleFaceControllerMultilinkId;\n     }\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty150 = phet.paperLand.getModelComponent( 'paperRotated' );\n    if ( modelProperty150 ) {\n      modelProperty150.value = phet.paperLand.utils.getNormalizedProgramRotation( points ) > 0.25 && phet.paperLand.utils.getNormalizedProgramRotation( points ) < 0.75;\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('LED Text Emoji by Rotation', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.microcontroller-ble-demos.2.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/microcontroller-ble-demos/programs/2/debugInfo",
  "claimUrl": "/api/spaces/microcontroller-ble-demos/programs/2/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 1870,
  "originalCode": "// Bob\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const bobPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'bobPosition', bobPosition );\n    \n\n      const period = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'period', period );\n    \n\n      const length = new phet.axon.NumberProperty( 300, {\n        range: new phet.dot.Range( 0, 500 )\n      });\n      phet.paperLand.addModelComponent( 'length', length );\n    \n\n      const bobSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/c-tone.mp3' );\n      const bobSoundSoundClip = new phet.tambo.SoundClip( bobSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( bobSoundSoundClip );\n      \n      let bobSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds\n      let bobSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n\n      // Play the sound when any dependencies change value.\n      scratchpad.bobSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'anchorPosition', 'bobPosition', 'period', 'length' ], ( anchorPosition, bobPosition, period, length ) => {\n        // in a local scope, define the functions that the user can use to manipulate the sound\n        const setOutputLevel = ( level ) => {\n        \n          // As a safety measure, don't let the user set a level below zero and above 2.\n          const outputLevel = Math.max( 0, Math.min( 2, level ) );\n          bobSoundSoundClip.outputLevel = outputLevel;\n        };\n        const setPlaybackRate = ( rate ) => {\n        \n          // As a safety measure, the playback rate cannot go below zero.\n          const playbackRate = Math.max( 0, rate );\n          bobSoundSoundClip.setPlaybackRate( playbackRate );\n        };\n        \n        // a function the user can call to play the sound\n        const play = () => {\n        \n          // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n          // can only be played at a limited interval for safety.\n          if ( ( !bobSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - bobSoundLastPlayTime > 0.25 ) {\n            bobSoundSoundClip.play();\n            bobSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n            \n            // Set a timer to turn off the sound when the value stops changing.\n            if ( bobSoundStopSoundTimeout ){\n              window.clearTimeout( bobSoundStopSoundTimeout );\n            }\n            \n            // only stop if looping\n            if ( false ) {\n              bobSoundStopSoundTimeout = window.setTimeout( () => {\n                bobSoundSoundClip.stop();\n              }, 5000 );\n            }  \n          }\n        };\n        \n        const stop = () => {\n          // Set a timer to turn off the sound when the value stops changing.\n          if ( bobSoundStopSoundTimeout ){\n            window.clearTimeout( bobSoundStopSoundTimeout );\n          }\n          bobSoundSoundClip.stop();\n        };\n        \n        if ( true ) {\n          play();\n        }\n      \n          var lowestPoint = anchorPosition.y + length; // Calculate the lowest point\n  var range = 2; // Define a small range around the lowest point\n\n  if (Math.abs(bobPosition.y - lowestPoint) <= range) { // Check if bob is within the range of the lowest point\n    setPlaybackRate(1);\n    setOutputLevel(1);\n    play();\n  }\n            \n      } );       \n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.bobSoundSoundClip = bobSoundSoundClip;\n    \n\n\n      // Create a shape with kite.\n      const bobCircleShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 50, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const bobCirclePath = new phet.scenery.Path( bobCircleShape, {\n        fill: '#007BFF',\n        stroke: '#001F3F',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( bobCirclePath );\n      scratchpad.bobCirclePath = bobCirclePath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.bobCirclePathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'bobPosition' ], ( bobPosition ) => {\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        bobCirclePath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        bobCirclePath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        bobCirclePath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        bobCirclePath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        bobCirclePath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        bobCirclePath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        bobCirclePath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        bobCirclePath.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        bobCirclePath.rotation = rotation;\n      };\n\n        const setStroke = ( color ) => {\n          bobCirclePath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          bobCirclePath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          bobCirclePath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          // x1 = newX1;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX1 not implemented' );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          // y1 = newY1;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY1 not implemented' );\n        };\n\n        const setX2 = ( newX2 ) => {\n          // x2 = newX2;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX2 not implemented' );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          // y2 = newY2;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY2 not implemented' );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          bobCirclePath.radius = phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          bobCirclePath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        setCenterX( bobPosition.x );\nsetCenterY( bobPosition.y );\n      } );\n    \n\n      const bobControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'anchorPosition', 'bobPosition', 'period', 'length' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const anchorPosition = phet.paperLand.getModelComponent( 'anchorPosition' ).value;\nconst bobPosition = phet.paperLand.getModelComponent( 'bobPosition' ).value;\nconst period = phet.paperLand.getModelComponent( 'period' ).value;\nconst length = phet.paperLand.getModelComponent( 'length' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setAnchorPosition = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'anchorPosition' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setBobPosition = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'bobPosition' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPeriod = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'period' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setLength = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'length' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            // Calculate the angle of the pendulum\n  const angle = Math.sin((2 * Math.PI / period) * elapsedTime);\n\n  // Calculate the new position of the bob\n  const newX = anchorPosition.x + length * Math.sin(angle);\n  const newY = anchorPosition.y + length * Math.cos(angle);\n\n  // Update the position of the bob\n  setBobPosition(new phet.dot.Vector2(newX, newY)); \n        }\n      };\n      scratchpad.bobControllerAnimationListener = bobControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( bobControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'bobPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'period' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'length' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.bobSoundSoundClip );\n      delete scratchpad.bobSoundSoundClip;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'anchorPosition', 'bobPosition', 'period', 'length' ], scratchpad.bobSoundSoundMultilinkId );\n      delete scratchpad.bobSoundSoundMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.bobCirclePath );\n      delete scratchpad.bobCirclePath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'bobPosition' ], scratchpad.bobCirclePathMultilinkId );\n      delete scratchpad.bobCirclePathMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.bobControllerAnimationListener );\n      delete scratchpad.bobControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Bob', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Bob\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const bobPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'bobPosition', bobPosition );\n    \n\n      const period = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'period', period );\n    \n\n      const length = new phet.axon.NumberProperty( 300, {\n        range: new phet.dot.Range( 0, 500 )\n      });\n      phet.paperLand.addModelComponent( 'length', length );\n    \n\n      const bobSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/c-tone.mp3' );\n      const bobSoundSoundClip = new phet.tambo.SoundClip( bobSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( bobSoundSoundClip );\n      \n      let bobSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds\n      let bobSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n\n      // Play the sound when any dependencies change value.\n      scratchpad.bobSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'anchorPosition', 'bobPosition', 'period', 'length' ], ( anchorPosition, bobPosition, period, length ) => {\n        // in a local scope, define the functions that the user can use to manipulate the sound\n        const setOutputLevel = ( level ) => {\n        \n          // As a safety measure, don't let the user set a level below zero and above 2.\n          const outputLevel = Math.max( 0, Math.min( 2, level ) );\n          bobSoundSoundClip.outputLevel = outputLevel;\n        };\n        const setPlaybackRate = ( rate ) => {\n        \n          // As a safety measure, the playback rate cannot go below zero.\n          const playbackRate = Math.max( 0, rate );\n          bobSoundSoundClip.setPlaybackRate( playbackRate );\n        };\n        \n        // a function the user can call to play the sound\n        const play = () => {\n        \n          // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n          // can only be played at a limited interval for safety.\n          if ( ( !bobSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - bobSoundLastPlayTime > 0.25 ) {\n            bobSoundSoundClip.play();\n            bobSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n            \n            // Set a timer to turn off the sound when the value stops changing.\n            if ( bobSoundStopSoundTimeout ){\n              window.clearTimeout( bobSoundStopSoundTimeout );\n            }\n            \n            // only stop if looping\n            if ( false ) {\n              bobSoundStopSoundTimeout = window.setTimeout( () => {\n                bobSoundSoundClip.stop();\n              }, 5000 );\n            }  \n          }\n        };\n        \n        const stop = () => {\n          // Set a timer to turn off the sound when the value stops changing.\n          if ( bobSoundStopSoundTimeout ){\n            window.clearTimeout( bobSoundStopSoundTimeout );\n          }\n          bobSoundSoundClip.stop();\n        };\n        \n        if ( true ) {\n          play();\n        }\n      \n          var lowestPoint = anchorPosition.y + length; // Calculate the lowest point\n  var range = 2; // Define a small range around the lowest point\n\n  if (Math.abs(bobPosition.y - lowestPoint) <= range) { // Check if bob is within the range of the lowest point\n    setPlaybackRate(1);\n    setOutputLevel(1);\n    play();\n  }\n            \n      } );       \n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.bobSoundSoundClip = bobSoundSoundClip;\n    \n\n\n      // Create a shape with kite.\n      const bobCircleShape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( 50, sharedData.displaySize.width ) )\n      \n      // create a path for the shape\n      const bobCirclePath = new phet.scenery.Path( bobCircleShape, {\n        fill: '#007BFF',\n        stroke: '#001F3F',\n        lineWidth: 1,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( bobCirclePath );\n      scratchpad.bobCirclePath = bobCirclePath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.bobCirclePathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'bobPosition' ], ( bobPosition ) => {\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        bobCirclePath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        bobCirclePath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        bobCirclePath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        bobCirclePath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        bobCirclePath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        bobCirclePath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        bobCirclePath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        bobCirclePath.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        bobCirclePath.rotation = rotation;\n      };\n\n        const setStroke = ( color ) => {\n          bobCirclePath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          bobCirclePath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          bobCirclePath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          // x1 = newX1;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX1 not implemented' );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          // y1 = newY1;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY1 not implemented' );\n        };\n\n        const setX2 = ( newX2 ) => {\n          // x2 = newX2;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setX2 not implemented' );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          // y2 = newY2;\n          // bobCirclePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n          phet.paperLand.console.warn( 'setY2 not implemented' );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          bobCirclePath.radius = phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          bobCirclePath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        setCenterX( bobPosition.x );\nsetCenterY( bobPosition.y );\n      } );\n    \n\n      const bobControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'anchorPosition', 'bobPosition', 'period', 'length' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const anchorPosition = phet.paperLand.getModelComponent( 'anchorPosition' ).value;\nconst bobPosition = phet.paperLand.getModelComponent( 'bobPosition' ).value;\nconst period = phet.paperLand.getModelComponent( 'period' ).value;\nconst length = phet.paperLand.getModelComponent( 'length' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setAnchorPosition = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'anchorPosition' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setBobPosition = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'bobPosition' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPeriod = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'period' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setLength = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'length' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            // Calculate the angle of the pendulum\n  const angle = Math.sin((2 * Math.PI / period) * elapsedTime);\n\n  // Calculate the new position of the bob\n  const newX = anchorPosition.x + length * Math.sin(angle);\n  const newY = anchorPosition.y + length * Math.cos(angle);\n\n  // Update the position of the bob\n  setBobPosition(new phet.dot.Vector2(newX, newY)); \n        }\n      };\n      scratchpad.bobControllerAnimationListener = bobControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( bobControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'bobPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'period' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'length' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.bobSoundSoundClip );\n      delete scratchpad.bobSoundSoundClip;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'anchorPosition', 'bobPosition', 'period', 'length' ], scratchpad.bobSoundSoundMultilinkId );\n      delete scratchpad.bobSoundSoundMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.bobCirclePath );\n      delete scratchpad.bobCirclePath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'bobPosition' ], scratchpad.bobCirclePathMultilinkId );\n      delete scratchpad.bobCirclePathMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.bobControllerAnimationListener );\n      delete scratchpad.bobControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Bob', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.tetraminus-space.1870.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/tetraminus-space/programs/1870/debugInfo",
  "claimUrl": "/api/spaces/tetraminus-space/programs/1870/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
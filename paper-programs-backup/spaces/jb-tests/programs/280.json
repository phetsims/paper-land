{
  "number": 280,
  "originalCode": "// Add PhET Checkbox - 1-2-3-4-5-6\n// Keywords: checkbox, view, simple, phet\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    console.log( `onProgramAdded called for ppn ${paperProgramNumber}`);\n\n    // Create a checkbox and add it to the scene.\n    const checkBoxLabelText = 'CHECK this out!'\n    const fontSize = 16;\n    const checkboxLabel = new phet.scenery.Text( checkBoxLabelText, {\n      font: new phet.sceneryPhet.PhetFont( fontSize )\n    } );\n    const booleanProperty = new phet.axon.BooleanProperty( false );\n    const checkbox = new phet.sun.Checkbox( booleanProperty, checkboxLabel );\n    sharedData.scene.addChild( checkbox );\n    scratchpad.checkbox = checkbox;\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    console.log( `onProgramChangedPosition called for ppn ${paperProgramNumber}`);\n\n    if ( scratchpad.checkbox ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.checkbox.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.checkbox.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    console.log( `onProgramRemoved called for ppn ${paperProgramNumber}`);\n    if ( scratchpad.checkbox ){\n      sharedData.scene.removeChild( scratchpad.checkbox );\n      scratchpad.checkbox = null;\n    }\n    else{\n      alert( 'Error: Checkbox node not found in scratchpad data.' );\n    }\n  };\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add some text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('Checkbox', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n",
  "currentCode": "// Add PhET Checkbox - 1-2-3-4-5-6\n// Keywords: checkbox, view, simple, phet\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    console.log( `onProgramAdded called for ppn ${paperProgramNumber}`);\n\n    // Create a checkbox and add it to the scene.\n    const checkBoxLabelText = 'CHECK this out!'\n    const fontSize = 16;\n    const checkboxLabel = new phet.scenery.Text( checkBoxLabelText, {\n      font: new phet.sceneryPhet.PhetFont( fontSize )\n    } );\n    const booleanProperty = new phet.axon.BooleanProperty( false );\n    const checkbox = new phet.sun.Checkbox( booleanProperty, checkboxLabel );\n    sharedData.scene.addChild( checkbox );\n    scratchpad.checkbox = checkbox;\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    console.log( `onProgramChangedPosition called for ppn ${paperProgramNumber}`);\n\n    if ( scratchpad.checkbox ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.checkbox.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.checkbox.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    console.log( `onProgramRemoved called for ppn ${paperProgramNumber}`);\n    if ( scratchpad.checkbox ){\n      sharedData.scene.removeChild( scratchpad.checkbox );\n      scratchpad.checkbox = null;\n    }\n    else{\n      alert( 'Error: Checkbox node not found in scratchpad data.' );\n    }\n  };\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add some text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('Checkbox', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.jb-tests.280.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/jb-tests/programs/280/debugInfo",
  "claimUrl": "/api/spaces/jb-tests/programs/280/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
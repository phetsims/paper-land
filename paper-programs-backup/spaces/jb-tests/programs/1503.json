{
  "number": 1503,
  "originalCode": "// Altitude: Image Y-Position mapped to Altitude - Copy\n// Keywords: altitude, image, asset, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //----------------------------------------------------------------------\n    // Template Variables\n    //----------------------------------------------------------------------\n    const propertyName = 'altitudeProperty';\n\n    const imageWidthInPixels = 50; // Must be positive.\n\n    const imageFile = 'girlInAir.png';\n    // const imageFile = 'lunarLander.png';\n    // const imageFile = 'birdInAir.png';\n\n    //----------------------------------------------------------------------\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', `media/images/${imageFile}` );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      minWidth: imageWidthInPixels,\n      maxWidth: imageWidthInPixels\n    } );\n\n    sharedData.scene.addChild( imageNode );\n\n    // This the function to implement to watch the changing Property.\n    const componentListener = value => {\n      const viewAltitude =  sharedData.displaySize.height * ( 1 - value / 100 ); // 100 is the max of the range\n      imageNode.centerY = viewAltitude;\n      imageNode.centerX = sharedData.displaySize.width / 2;\n    }\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink( propertyName, componentListener );\n\n    // assign components to the scratchpad so that they can be removed later\n    scratchpad.propertyName = propertyName;\n    scratchpad.imageNode = imageNode;\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    phet.paperLand.removeModelPropertyLink( propertyName, scratchpad.altitudeListenerId );\n    delete scratchpad.altitudeListenerId;\n\n    sharedData.scene.removeChild( scratchpad.imageNode );\n    delete scratchpad.imageNode;\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// Altitude: Image Y-Position mapped to Altitude - Copy\n// Keywords: altitude, image, asset, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //----------------------------------------------------------------------\n    // Template Variables\n    //----------------------------------------------------------------------\n    const propertyName = 'altitudeProperty';\n\n    const imageWidthInPixels = 50; // Must be positive.\n\n    const imageFile = 'girlInAir.png';\n    // const imageFile = 'lunarLander.png';\n    // const imageFile = 'birdInAir.png';\n\n    //----------------------------------------------------------------------\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    const imageElement = document.createElement( 'img' );\n    imageElement.setAttribute( 'src', `media/images/${imageFile}` );\n    const imageNode = new phet.scenery.Image( imageElement, {\n      minWidth: imageWidthInPixels,\n      maxWidth: imageWidthInPixels\n    } );\n\n    sharedData.scene.addChild( imageNode );\n\n    // This the function to implement to watch the changing Property.\n    const componentListener = value => {\n      const viewAltitude =  sharedData.displaySize.height * ( 1 - value / 100 ); // 100 is the max of the range\n      imageNode.centerY = viewAltitude;\n      imageNode.centerX = sharedData.displaySize.width / 2;\n    }\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink( propertyName, componentListener );\n\n    // assign components to the scratchpad so that they can be removed later\n    scratchpad.propertyName = propertyName;\n    scratchpad.imageNode = imageNode;\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    phet.paperLand.removeModelPropertyLink( propertyName, scratchpad.altitudeListenerId );\n    delete scratchpad.altitudeListenerId;\n\n    sharedData.scene.removeChild( scratchpad.imageNode );\n    delete scratchpad.imageNode;\n  }\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.jb-tests.1503.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/jb-tests/programs/1503/debugInfo",
  "claimUrl": "/api/spaces/jb-tests/programs/1503/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
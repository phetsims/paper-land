{
  "number": 1735,
  "originalCode": "// addModelObserver - observer - Copy\n// Keywords: test\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Create view components (graphics, Voicing, sound, anything)\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    scratchpad.propertyListener = value => console.log( value );\n    const handleAttach = property => property.link( scratchpad.propertyListener );\n    const handleDetach = property => property.unlink( scratchpad.propertyListener );\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'testModelProperty', handleAttach, handleDetach );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, scratchPad, sharedData ) => {\n    \n    // Behavior that changes with paper position here.\n  };\n\n  // This is tear down code that removes the programs when phyical papers are removed \n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelObserver( 'testModelProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n\n    delete scratchpad.propertyListener;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Create', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('ohmsLawModel', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "currentCode": "// addModelObserver - observer - Copy\n// Keywords: test\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Create view components (graphics, Voicing, sound, anything)\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    scratchpad.propertyListener = value => console.log( value );\n    const handleAttach = property => property.link( scratchpad.propertyListener );\n    const handleDetach = property => property.unlink( scratchpad.propertyListener );\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'testModelProperty', handleAttach, handleDetach );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, scratchPad, sharedData ) => {\n    \n    // Behavior that changes with paper position here.\n  };\n\n  // This is tear down code that removes the programs when phyical papers are removed \n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelObserver( 'testModelProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n\n    delete scratchpad.propertyListener;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Create', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('ohmsLawModel', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.jb-tests.1735.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/jb-tests/programs/1735/debugInfo",
  "claimUrl": "/api/spaces/jb-tests/programs/1735/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
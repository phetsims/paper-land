{
  "number": 2038,
  "originalCode": "// Altitude: Background Color Change\n// Keywords: altitude, background color\n// ------------------------------- //\n// Required Programs (dependencies): Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description: Changes the background color to white when altitude is above half its range.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = (paperProgramNumber, scratchpad, sharedData) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    const backgroundColor = sharedData.canvas.style.backgroundColor;\n    const aboveHalfRangeColor = 'white';\n    const propertyName = 'altitudeProperty';\n    const halfRangeValue = model.get(propertyName).range.max / 2;\n\n    const updateBackgroundColor = (newAltitude) => {\n      sharedData.canvas.style.backgroundColor = newAltitude > halfRangeValue ? aboveHalfRangeColor : backgroundColor;\n    };\n\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink(propertyName, updateBackgroundColor);\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = (paperProgramNumber, positionPoints, scratchpad, sharedData) => {\n    // No need for position change in this program.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = (paperProgramNumber, scratchpad, sharedData) => {\n    // Global model for all programs\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    phet.paperLand.removeModelPropertyLink(propertyName, scratchpad.altitudeListenerId);\n    delete scratchpad.altitudeListenerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  });\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n\n})();\n",
  "currentCode": "// Altitude: Background Color Change\n// Keywords: altitude, background color\n// ------------------------------- //\n// Required Programs (dependencies): Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description: Changes the background color to white when altitude is above half its range.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = (paperProgramNumber, scratchpad, sharedData) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    const backgroundColor = sharedData.canvas.style.backgroundColor;\n    const aboveHalfRangeColor = 'white';\n    const propertyName = 'altitudeProperty';\n    const halfRangeValue = model.get(propertyName).range.max / 2;\n\n    const updateBackgroundColor = (newAltitude) => {\n      sharedData.canvas.style.backgroundColor = newAltitude > halfRangeValue ? aboveHalfRangeColor : backgroundColor;\n    };\n\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink(propertyName, updateBackgroundColor);\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = (paperProgramNumber, positionPoints, scratchpad, sharedData) => {\n    // No need for position change in this program.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = (paperProgramNumber, scratchpad, sharedData) => {\n    // Global model for all programs\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    phet.paperLand.removeModelPropertyLink(propertyName, scratchpad.altitudeListenerId);\n    delete scratchpad.altitudeListenerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  });\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.altitude-demo.2038.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/altitude-demo/programs/2038/debugInfo",
  "claimUrl": "/api/spaces/altitude-demo/programs/2038/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
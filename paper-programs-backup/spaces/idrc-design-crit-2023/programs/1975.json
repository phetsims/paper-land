{
  "number": 1975,
  "originalCode": "// Altitude: Continuous Sound for Altitude Magnitude\n// Keywords: altitude, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const altitudeSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    phet.tambo.soundManager.addSoundGenerator( altitudeSound );\n    scratchpad.altitudeSound = altitudeSound;\n\n    const soundOnWhenIdleTime = 1; // in seconds\n    let stopSoundTimeout = null;\n\n    const soundListener = ( newAltitude ) => {\n\n      if ( !altitudeSound.isPlaying ){\n        altitudeSound.play();\n      }\n\n      // 100 is the maximum of the altitude range - to be more robust, add a direct dependency on the\n      // altitudeProperty with addModelObserver instead of using addModelPropertyLink. Then in handleAttach\n      // you would have a reference to the modelProperty and its range.\n      altitudeSound.setPlaybackRate( 0.5 + newAltitude / 100 * 1.5 );\n\n      // Set a timer to turn off the sound when the altitude is no longer changing.\n      if ( stopSoundTimeout ){\n        window.clearTimeout( stopSoundTimeout );\n      }\n      stopSoundTimeout = window.setTimeout( () => {\n        altitudeSound.stop();\n      }, soundOnWhenIdleTime * 1000 );\n    };\n\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink( 'altitudeProperty', soundListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // stop observing the altitudeProperty\n    phet.paperLand.removeModelPropertyLink( 'altitudeProperty', scratchpad.altitudeListenerId );\n    delete scratchpad.altitudeListenerId;\n\n    // stop sounds and remove\n    scratchpad.altitudeSound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.altitudeSound );\n    delete scratchpad.altitudeSound;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();",
  "currentCode": "// Altitude: Continuous Sound for Altitude Magnitude\n// Keywords: altitude, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const altitudeSound = new phet.tambo.SoundClip( wrappedAudioBuffer, { \n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    phet.tambo.soundManager.addSoundGenerator( altitudeSound );\n    scratchpad.altitudeSound = altitudeSound;\n\n    const soundOnWhenIdleTime = 1; // in seconds\n    let stopSoundTimeout = null;\n\n    const soundListener = ( newAltitude ) => {\n\n      if ( !altitudeSound.isPlaying ){\n        altitudeSound.play();\n      }\n\n      // 100 is the maximum of the altitude range - to be more robust, add a direct dependency on the\n      // altitudeProperty with addModelObserver instead of using addModelPropertyLink. Then in handleAttach\n      // you would have a reference to the modelProperty and its range.\n      altitudeSound.setPlaybackRate( 0.5 + newAltitude / 100 * 1.5 );\n\n      // Set a timer to turn off the sound when the altitude is no longer changing.\n      if ( stopSoundTimeout ){\n        window.clearTimeout( stopSoundTimeout );\n      }\n      stopSoundTimeout = window.setTimeout( () => {\n        altitudeSound.stop();\n      }, soundOnWhenIdleTime * 1000 );\n    };\n\n    scratchpad.altitudeListenerId = phet.paperLand.addModelPropertyLink( 'altitudeProperty', soundListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // stop observing the altitudeProperty\n    phet.paperLand.removeModelPropertyLink( 'altitudeProperty', scratchpad.altitudeListenerId );\n    delete scratchpad.altitudeListenerId;\n\n    // stop sounds and remove\n    scratchpad.altitudeSound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.altitudeSound );\n    delete scratchpad.altitudeSound;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Sound', canvas.width / 2, canvas.height / 2 + 20);\n})();",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.1975.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/1975/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/1975/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
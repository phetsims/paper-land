{
  "number": 222,
  "originalCode": "// Density: Model\n// Keywords: density, model\n// ------------------------------- //\n// Required Programs (dependencies): [none]\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n\n  //-------------------------------------------------------------------\n  // Projector code\n  //-------------------------------------------------------------------\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    const massProperty = new phet.axon.NumberProperty( 5, {\n      range: new phet.dot.Range( 1, 10 )\n    } );\n\n    const volumeProperty = new phet.axon.NumberProperty( 2, {\n      range: new phet.dot.Range( 1, 5 )\n    } );\n\n    // When true, density is directly controlled by another program instead of derived\n    // from mass and volume.\n    const controlDensityDirectlyProperty = new phet.axon.BooleanProperty( false );\n\n    const densityRange = new phet.dot.Range(\n      massProperty.range.min / volumeProperty.range.max, // minimum value from provided ranges\n      massProperty.range.max / volumeProperty.range.min, // maximum value from provided ranges\n    );\n\n    // Manually controlled value for density (ignoring mass and volume)\n    const controlledDensityProperty = new phet.axon.NumberProperty( massProperty.value / volumeProperty.value, {\n      range: densityRange\n    } );\n\n    // Derived by mass, volume, OR whether the density control program is in view.\n    const densityProperty = new phet.axon.DerivedProperty(\n      [ massProperty, volumeProperty, controlDensityDirectlyProperty, controlledDensityProperty ],\n      ( mass, volume, controlDensityDirectly, controlledDensity ) => {\n\n        if ( controlDensityDirectly ) {\n\n          // The program controlling density will have its own value, get it and return.\n          return controlledDensity;\n        }\n        else {\n          return mass / volume;\n        }\n      }\n    )\n\n    phet.paperLand.addModelComponent( 'massProperty', massProperty );\n    phet.paperLand.addModelComponent( 'volumeProperty', volumeProperty );\n    phet.paperLand.addModelComponent( 'controlDensityDirectlyProperty', controlDensityDirectlyProperty );\n    phet.paperLand.addModelComponent( 'controlledDensityProperty', controlledDensityProperty );\n    phet.paperLand.addModelComponent( 'densityProperty', densityProperty );\n    phet.paperLand.addModelComponent( 'densityRange', densityRange );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // removeModelComponent removes from the global model and disposes\n    phet.paperLand.removeModelComponent( 'massProperty' );\n    phet.paperLand.removeModelComponent( 'volumeProperty' );\n    phet.paperLand.removeModelComponent( 'controlDensityDirectlyProperty' );\n    phet.paperLand.removeModelComponent( 'controlledDensityProperty' );\n    phet.paperLand.removeModelComponent( 'densityProperty' );\n    phet.paperLand.removeModelComponent( 'densityRange' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Density', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Model', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Density: Model\n// Keywords: density, model\n// ------------------------------- //\n// Required Programs (dependencies): [none]\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n\n  //-------------------------------------------------------------------\n  // Projector code\n  //-------------------------------------------------------------------\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    const massProperty = new phet.axon.NumberProperty( 5, {\n      range: new phet.dot.Range( 1, 10 )\n    } );\n\n    const volumeProperty = new phet.axon.NumberProperty( 2, {\n      range: new phet.dot.Range( 1, 5 )\n    } );\n\n    // When true, density is directly controlled by another program instead of derived\n    // from mass and volume.\n    const controlDensityDirectlyProperty = new phet.axon.BooleanProperty( false );\n\n    const densityRange = new phet.dot.Range(\n      massProperty.range.min / volumeProperty.range.max, // minimum value from provided ranges\n      massProperty.range.max / volumeProperty.range.min, // maximum value from provided ranges\n    );\n\n    // Manually controlled value for density (ignoring mass and volume)\n    const controlledDensityProperty = new phet.axon.NumberProperty( massProperty.value / volumeProperty.value, {\n      range: densityRange\n    } );\n\n    // Derived by mass, volume, OR whether the density control program is in view.\n    const densityProperty = new phet.axon.DerivedProperty(\n      [ massProperty, volumeProperty, controlDensityDirectlyProperty, controlledDensityProperty ],\n      ( mass, volume, controlDensityDirectly, controlledDensity ) => {\n\n        if ( controlDensityDirectly ) {\n\n          // The program controlling density will have its own value, get it and return.\n          return controlledDensity;\n        }\n        else {\n          return mass / volume;\n        }\n      }\n    )\n\n    phet.paperLand.addModelComponent( 'massProperty', massProperty );\n    phet.paperLand.addModelComponent( 'volumeProperty', volumeProperty );\n    phet.paperLand.addModelComponent( 'controlDensityDirectlyProperty', controlDensityDirectlyProperty );\n    phet.paperLand.addModelComponent( 'controlledDensityProperty', controlledDensityProperty );\n    phet.paperLand.addModelComponent( 'densityProperty', densityProperty );\n    phet.paperLand.addModelComponent( 'densityRange', densityRange );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // removeModelComponent removes from the global model and disposes\n    phet.paperLand.removeModelComponent( 'massProperty' );\n    phet.paperLand.removeModelComponent( 'volumeProperty' );\n    phet.paperLand.removeModelComponent( 'controlDensityDirectlyProperty' );\n    phet.paperLand.removeModelComponent( 'controlledDensityProperty' );\n    phet.paperLand.removeModelComponent( 'densityProperty' );\n    phet.paperLand.removeModelComponent( 'densityRange' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Density', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Model', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.222.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/222/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/222/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
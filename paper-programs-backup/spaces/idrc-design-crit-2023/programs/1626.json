{
  "number": 1626,
  "originalCode": "// Density: Continuous Sound for Density\n// Keywords: density, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies): Density: Model\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts( 'paper.js' );\n\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const densitySound = new phet.tambo.SoundClip( wrappedAudioBuffer, {\n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    phet.tambo.soundManager.addSoundGenerator( densitySound );\n    scratchpad.densitySound = densitySound;\n\n    const soundOnWhenIdleTime = 1; // in seconds\n    let stopSoundTimeout = null;\n\n    const soundListener = newDensity => {\n      if ( sharedData.model.has( 'densityRange' ) ) {\n        const densityRange = sharedData.model.get( 'densityRange' );\n        if ( !densitySound.isPlaying ) {\n          densitySound.play();\n        }\n        densitySound.setPlaybackRate( 0.5 + newDensity / densityRange.max * 1.5 );\n\n        // Set a timer to turn off the sound when the density is no longer changing.\n        if ( stopSoundTimeout ) {\n          window.clearTimeout( stopSoundTimeout );\n        }\n        stopSoundTimeout = window.setTimeout( () => {\n          densitySound.stop();\n        }, soundOnWhenIdleTime * 1000 );\n      }\n    };\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'densityProperty', soundListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the density\n    // based on positionPoints instead of densityProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // remove the sound from tambo and stop it immediately\n    scratchpad.densitySound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.densitySound );\n    delete scratchpad.densitySound;\n\n    // unlink the density listener\n    phet.paperLand.removeModelPropertyLink( 'densityProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Density', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Sound', canvas.width / 2, canvas.height / 2 + 20 );\n} )();",
  "currentCode": "// Density: Continuous Sound for Density\n// Keywords: density, sound, sound generator, view\n// ------------------------------- //\n// Required Programs (dependencies): Density: Model\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts( 'paper.js' );\n\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    const availableSoundFiles = [\n      'stringsLoopMiddleCOscilloscope.mp3',\n      'saturatedSineLoop220Hz.mp3',\n      'loonCall.mp3',\n      'windsLoopC3Oscilloscope.mp3',\n      'chargesInBody.mp3'\n    ];\n\n    // Create and add the sound generator.\n    const wrappedAudioBuffer = createAndLoadWrappedAudioBuffer( `media/sounds/${availableSoundFiles[ 4 ]}` );\n    const densitySound = new phet.tambo.SoundClip( wrappedAudioBuffer, {\n      loop: true,\n      initialOutputLevel: 0.1\n    } );\n\n    phet.tambo.soundManager.addSoundGenerator( densitySound );\n    scratchpad.densitySound = densitySound;\n\n    const soundOnWhenIdleTime = 1; // in seconds\n    let stopSoundTimeout = null;\n\n    const soundListener = newDensity => {\n      if ( sharedData.model.has( 'densityRange' ) ) {\n        const densityRange = sharedData.model.get( 'densityRange' );\n        if ( !densitySound.isPlaying ) {\n          densitySound.play();\n        }\n        densitySound.setPlaybackRate( 0.5 + newDensity / densityRange.max * 1.5 );\n\n        // Set a timer to turn off the sound when the density is no longer changing.\n        if ( stopSoundTimeout ) {\n          window.clearTimeout( stopSoundTimeout );\n        }\n        stopSoundTimeout = window.setTimeout( () => {\n          densitySound.stop();\n        }, soundOnWhenIdleTime * 1000 );\n      }\n    };\n    scratchpad.linkId = phet.paperLand.addModelPropertyLink( 'densityProperty', soundListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the density\n    // based on positionPoints instead of densityProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // remove the sound from tambo and stop it immediately\n    scratchpad.densitySound.stop();\n    phet.tambo.soundManager.removeSoundGenerator( scratchpad.densitySound );\n    delete scratchpad.densitySound;\n\n    // unlink the density listener\n    phet.paperLand.removeModelPropertyLink( 'densityProperty', scratchpad.linkId );\n    delete scratchpad.linkId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Density', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Sound', canvas.width / 2, canvas.height / 2 + 20 );\n} )();",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.1626.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/1626/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/1626/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
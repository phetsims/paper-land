{
  "number": 1654,
  "originalCode": "// Density: Volume Slider\n// Keywords: slider, number, view, density\n// =============================== //\n// Program Dependencies: Density: Model\n// Recommended Programs: A slider to control Volume in the absence of the area \n// control paper (Density: Change Volume with Paper Area)\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Create view components (graphics, Voicing, sound, anything)\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //-------------------------------------------------------------\n    // Template variables\n    //-------------------------------------------------------------\n    const voicingNameResponse = '';\n\n    const sliderKnobColor = 'gold';\n    const sliderTrackColor = 'purple';\n    //-------------------------------------------------------------\n\n    const model = sharedData.model;\n    const scene = sharedData.scene;\n\n    // A function that is called when the volume Property exists or is added to the model\n    const handleModelPropertyExists = volumeProperty => {\n\n      // Range of values for the model and slider.\n      const range = volumeProperty.range;\n\n      // Create your View components here.\n      const slider = new phet.sun.VSlider( volumeProperty, range, {\n\n        // voicing\n        voicingNameResponse: voicingNameResponse,\n\n        // thumb colors\n        thumbFill: sliderKnobColor,\n        trackFillEnabled: sliderTrackColor,\n\n        endDrag: () => {\n          // Code that is run when after an interaction with the slider\n\n        }\n      } );\n\n      // Place the slider - relative to top left of the Board\n      slider.center = new phet.dot.Vector2( 300, 300 );\n\n      // add to the board display\n      scene.addChild( slider );\n\n      // save a reference to the slider so we can remove it later\n      scratchpad.slider = slider;\n    }\n\n    // A function that is called when the volume Property or this program does not exist or is removed from the model\n    const handleModelPropertyRemoved = volumeProperty => {\n      scene.removeChild( scratchpad.slider );\n    };\n\n    // add an observer so the slider is created/destroyed as the volume Property or this program enters/exits the\n    // camera detection\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'volumeProperty', handleModelPropertyExists, handleModelPropertyRemoved );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    const model = sharedData.model;\n\n    // Behavior that changes with paper position here. This example changes the number value with height\n    // of the paper in the camera. Change this if you want to track rotation or something else.\n    if ( model.has( 'volumeProperty' ) ) {\n      const modelProperty = model.get( 'volumeProperty' );\n      const range = modelProperty.range;\n\n      // Set the modelProperty value based on the position of the paper.\n      const paperCenterY = ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n      let constrainedValue = Math.min( range.max, ( 1 - paperCenterY ) * range.max );\n      constrainedValue = Math.max( range.min, constrainedValue );\n      modelProperty.value = constrainedValue;\n    }\n  };\n\n  // This is tear down code that removes the programs when phyical papers are removed \n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelObserver( 'volumeProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Volume', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Slider', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n\n",
  "currentCode": "// Density: Volume Slider\n// Keywords: slider, number, view, density\n// =============================== //\n// Program Dependencies: Density: Model\n// Recommended Programs: A slider to control Volume in the absence of the area \n// control paper (Density: Change Volume with Paper Area)\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Create view components (graphics, Voicing, sound, anything)\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //-------------------------------------------------------------\n    // Template variables\n    //-------------------------------------------------------------\n    const voicingNameResponse = '';\n\n    const sliderKnobColor = 'gold';\n    const sliderTrackColor = 'purple';\n    //-------------------------------------------------------------\n\n    const model = sharedData.model;\n    const scene = sharedData.scene;\n\n    // A function that is called when the volume Property exists or is added to the model\n    const handleModelPropertyExists = volumeProperty => {\n\n      // Range of values for the model and slider.\n      const range = volumeProperty.range;\n\n      // Create your View components here.\n      const slider = new phet.sun.VSlider( volumeProperty, range, {\n\n        // voicing\n        voicingNameResponse: voicingNameResponse,\n\n        // thumb colors\n        thumbFill: sliderKnobColor,\n        trackFillEnabled: sliderTrackColor,\n\n        endDrag: () => {\n          // Code that is run when after an interaction with the slider\n\n        }\n      } );\n\n      // Place the slider - relative to top left of the Board\n      slider.center = new phet.dot.Vector2( 300, 300 );\n\n      // add to the board display\n      scene.addChild( slider );\n\n      // save a reference to the slider so we can remove it later\n      scratchpad.slider = slider;\n    }\n\n    // A function that is called when the volume Property or this program does not exist or is removed from the model\n    const handleModelPropertyRemoved = volumeProperty => {\n      scene.removeChild( scratchpad.slider );\n    };\n\n    // add an observer so the slider is created/destroyed as the volume Property or this program enters/exits the\n    // camera detection\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'volumeProperty', handleModelPropertyExists, handleModelPropertyRemoved );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    const model = sharedData.model;\n\n    // Behavior that changes with paper position here. This example changes the number value with height\n    // of the paper in the camera. Change this if you want to track rotation or something else.\n    if ( model.has( 'volumeProperty' ) ) {\n      const modelProperty = model.get( 'volumeProperty' );\n      const range = modelProperty.range;\n\n      // Set the modelProperty value based on the position of the paper.\n      const paperCenterY = ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n      let constrainedValue = Math.min( range.max, ( 1 - paperCenterY ) * range.max );\n      constrainedValue = Math.max( range.min, constrainedValue );\n      modelProperty.value = constrainedValue;\n    }\n  };\n\n  // This is tear down code that removes the programs when phyical papers are removed \n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelObserver( 'volumeProperty', scratchpad.observerId );\n    delete scratchpad.observerId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Volume', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Slider', canvas.width / 2, canvas.height / 2 + 20 );\n} )();\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.1654.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/1654/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/1654/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 1195,
  "originalCode": "// Altitude: Model\n// Keywords: altitude, model, property\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs: Altitude prefix\n// Program Description: Contains the model properties for Altitude, including range \n// and initial values. You can change whether this paper controls the value directly.\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get( 'number' );\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // -----------------------------------------------------\n    // Template Variables\n    // -----------------------------------------------------\n    // IMPORTANT! Change this to a unique name that identifies this Property.\n    // The name you choose here is how you will refer to this Property in other\n    // programs. \n    const propertyName = 'altitudeProperty';\n\n    // Controls how paper motion changes the value.\n    // 'linear' - value increases linearly as program moves.\n    // 'exponential' - value increases exponentially as program moves.\n    // 'inverse' - The value is set like 1/x as the program moves.\n    // 'none' - The value does NOT change with the program movement.\n    const controlType = 'none';\n\n    // Does the value change when moving the program left/right or up/down? \n    // 'horizontal' - left is min, right is max\n    // 'vertical' - bottom is min, top is max\n    const controlDirection = 'vertical';\n\n    // range for the value as the program moves.\n    const range = new phet.dot.Range( 0, 100 );\n\n    // If true, Text will be drawn to the board to display the value for debugging\n    const showText = true;\n\n    // number of decimal places when representing the value\n    const decimalPlaces = 0;\n\n    // font size for debugging text to see the value on the Board\n    const fontSize = 50;\n\n    // positioning of the debugging text, relative to the top left of the board\n    const textLeft = 50;\n    const textTop = 50;\n\n    // -----------------------------------------------------\n    // Create and add components\n    // -----------------------------------------------------\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Use scene.addChild( someNode ) to draw components in the Board.\n    const scene = sharedData.scene;\n\n    // Create the NumberProperty and add to the board model\n    const valueProperty = new phet.axon.NumberProperty( range.min, {\n      range: range\n    } );\n    phet.paperLand.addModelComponent( propertyName, valueProperty );\n\n    // Print the value to the board for debugging\n    scratchpad.valueText = new phet.scenery.Text( '', {\n      font: new phet.scenery.Font( { size: fontSize } ),\n      leftTop: new phet.dot.Vector2( textLeft, textTop ),\n      visible: showText\n    } );\n    scene.addChild( scratchpad.valueText );\n\n    // update the debugging text when the value changes\n    const valueTextListener = value => {\n      scratchpad.valueText.string = phet.dot.Utils.toFixed( value, decimalPlaces );\n    };\n    scratchpad.textObserverId = phet.paperLand.addModelPropertyLink( propertyName, valueTextListener );\n\n    // Assign template variables to the scratchpad so they can be used in the other program\n    // callbacks but only need to be defined in one place\n    scratchpad.propertyName = propertyName;\n    scratchpad.controlType = controlType;\n    scratchpad.controlDirection = controlDirection;\n    scratchpad.showText = showText;\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    const propertyName = scratchpad.propertyName;\n    const controlType = scratchpad.controlType;\n    const controlDirection = scratchpad.controlDirection;\n\n    if ( controlType === 'none' ) {\n      return;\n    }\n\n    // global model for the board (all )    \n    const model = sharedData.model;\n\n    if ( model.has( propertyName ) ) {\n      const range = model.get( propertyName ).range;\n      const positionDimension = controlDirection === 'horizontal' ? 'x' : 'y';\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      let paperCenterValue = ( positionPoints[ 0 ][ positionDimension ] + positionPoints[ 2 ][ positionDimension ] ) / 2;\n\n      // account for origin being at the top\n      if ( controlDirection === 'vertical' ) {\n        paperCenterValue = 1 - paperCenterValue;\n      }\n\n      let calculatedValue = model.get( propertyName ).value;\n      if ( controlType === 'linear' ) {\n        calculatedValue = paperCenterValue * range.max;\n      }\n      else if ( controlType === 'exponential' ) {\n        calculatedValue = Math.pow( paperCenterValue * Math.sqrt( range.max ), 2 );\n      }\n      else if ( controlType === 'inverse' ) {\n\n        const scaleFactor = 10; // stretches the curve so you can see the behavior in more space\n        calculatedValue = ( 1 / ( paperCenterValue / scaleFactor ) ) - scaleFactor;\n      }\n      else {\n        alert( 'Invalid value for controlType' );\n      }\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( calculatedValue, range.max ), range.min );\n      model.get( propertyName ).value = constrainedValue\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Use scene.removeChild( someNode ) to remove components in the Board.\n    const scene = sharedData.scene;\n\n    // unlink listener that updates debugging Text\n    phet.paperLand.removeModelPropertyLink( propertyName, scratchpad.textObserverId );\n    delete scratchpad.textObserverId;\n\n    // remove the component from the model\n    phet.paperLand.removeModelComponent( propertyName );\n\n    // Remove Text from the view and remove references.\n    scene.removeChild( scratchpad.valueText );\n    delete scratchpad.valueText;\n\n    // delete the other scratchpad items\n    delete scratchpad.controlType;\n    delete scratchpad.controlDirection;\n    delete scratchpad.showText;\n    \n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Altitude', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Model', canvas.width / 2, canvas.height / 2 + 20 );\n} )();",
  "currentCode": "// Altitude: Model\n// Keywords: altitude, model, property\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs: Altitude prefix\n// Program Description: Contains the model properties for Altitude, including range \n// and initial values. You can change whether this paper controls the value directly.\n\nimportScripts( 'paper.js' );\n\n( async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get( 'number' );\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // -----------------------------------------------------\n    // Template Variables\n    // -----------------------------------------------------\n    // IMPORTANT! Change this to a unique name that identifies this Property.\n    // The name you choose here is how you will refer to this Property in other\n    // programs. \n    const propertyName = 'altitudeProperty';\n\n    // Controls how paper motion changes the value.\n    // 'linear' - value increases linearly as program moves.\n    // 'exponential' - value increases exponentially as program moves.\n    // 'inverse' - The value is set like 1/x as the program moves.\n    // 'none' - The value does NOT change with the program movement.\n    const controlType = 'none';\n\n    // Does the value change when moving the program left/right or up/down? \n    // 'horizontal' - left is min, right is max\n    // 'vertical' - bottom is min, top is max\n    const controlDirection = 'vertical';\n\n    // range for the value as the program moves.\n    const range = new phet.dot.Range( 0, 100 );\n\n    // If true, Text will be drawn to the board to display the value for debugging\n    const showText = true;\n\n    // number of decimal places when representing the value\n    const decimalPlaces = 0;\n\n    // font size for debugging text to see the value on the Board\n    const fontSize = 50;\n\n    // positioning of the debugging text, relative to the top left of the board\n    const textLeft = 50;\n    const textTop = 50;\n\n    // -----------------------------------------------------\n    // Create and add components\n    // -----------------------------------------------------\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Use scene.addChild( someNode ) to draw components in the Board.\n    const scene = sharedData.scene;\n\n    // Create the NumberProperty and add to the board model\n    const valueProperty = new phet.axon.NumberProperty( range.min, {\n      range: range\n    } );\n    phet.paperLand.addModelComponent( propertyName, valueProperty );\n\n    // Print the value to the board for debugging\n    scratchpad.valueText = new phet.scenery.Text( '', {\n      font: new phet.scenery.Font( { size: fontSize } ),\n      leftTop: new phet.dot.Vector2( textLeft, textTop ),\n      visible: showText\n    } );\n    scene.addChild( scratchpad.valueText );\n\n    // update the debugging text when the value changes\n    const valueTextListener = value => {\n      scratchpad.valueText.string = phet.dot.Utils.toFixed( value, decimalPlaces );\n    };\n    scratchpad.textObserverId = phet.paperLand.addModelPropertyLink( propertyName, valueTextListener );\n\n    // Assign template variables to the scratchpad so they can be used in the other program\n    // callbacks but only need to be defined in one place\n    scratchpad.propertyName = propertyName;\n    scratchpad.controlType = controlType;\n    scratchpad.controlDirection = controlDirection;\n    scratchpad.showText = showText;\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n    const propertyName = scratchpad.propertyName;\n    const controlType = scratchpad.controlType;\n    const controlDirection = scratchpad.controlDirection;\n\n    if ( controlType === 'none' ) {\n      return;\n    }\n\n    // global model for the board (all )    \n    const model = sharedData.model;\n\n    if ( model.has( propertyName ) ) {\n      const range = model.get( propertyName ).range;\n      const positionDimension = controlDirection === 'horizontal' ? 'x' : 'y';\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      let paperCenterValue = ( positionPoints[ 0 ][ positionDimension ] + positionPoints[ 2 ][ positionDimension ] ) / 2;\n\n      // account for origin being at the top\n      if ( controlDirection === 'vertical' ) {\n        paperCenterValue = 1 - paperCenterValue;\n      }\n\n      let calculatedValue = model.get( propertyName ).value;\n      if ( controlType === 'linear' ) {\n        calculatedValue = paperCenterValue * range.max;\n      }\n      else if ( controlType === 'exponential' ) {\n        calculatedValue = Math.pow( paperCenterValue * Math.sqrt( range.max ), 2 );\n      }\n      else if ( controlType === 'inverse' ) {\n\n        const scaleFactor = 10; // stretches the curve so you can see the behavior in more space\n        calculatedValue = ( 1 / ( paperCenterValue / scaleFactor ) ) - scaleFactor;\n      }\n      else {\n        alert( 'Invalid value for controlType' );\n      }\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( calculatedValue, range.max ), range.min );\n      model.get( propertyName ).value = constrainedValue\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const propertyName = scratchpad.propertyName;\n    delete scratchpad.propertyName;\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Use scene.removeChild( someNode ) to remove components in the Board.\n    const scene = sharedData.scene;\n\n    // unlink listener that updates debugging Text\n    phet.paperLand.removeModelPropertyLink( propertyName, scratchpad.textObserverId );\n    delete scratchpad.textObserverId;\n\n    // remove the component from the model\n    phet.paperLand.removeModelComponent( propertyName );\n\n    // Remove Text from the view and remove references.\n    scene.removeChild( scratchpad.valueText );\n    delete scratchpad.valueText;\n\n    // delete the other scratchpad items\n    delete scratchpad.controlType;\n    delete scratchpad.controlDirection;\n    delete scratchpad.showText;\n    \n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get( 'canvas' );\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext( '2d' );\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText( 'Altitude', canvas.width / 2, canvas.height / 2 - 10 );\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText( 'Model', canvas.width / 2, canvas.height / 2 + 20 );\n} )();",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.1195.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/1195/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/1195/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
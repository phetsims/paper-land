{
  "number": 318,
  "originalCode": "// Density: Change Density w/ Paper Position\n// Keywords: density, model, paperPosition\n// ------------------------------- //\n// Required Programs (dependencies) Density: Model\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Whenever the 'controlsDensityDirectlyProperty' exists in the model, it will be set to \"true\" by this controller.\n    const controllerAttach = component => component.value = true;\n    const controllerDetach = component => component.value = false;\n    scratchpad.controllerId = phet.paperLand.addModelController( 'controlDensityDirectlyProperty', controllerAttach, controllerDetach );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // stop controlling the model Property\n    phet.paperLand.removeModelController( 'controlDensityDirectlyProperty', scratchpad.controllerId );\n    delete scratchpad.controllerId;\n  }\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    if ( model.has( 'controlledDensityProperty' ) ) {\n      const controlledDensityProperty = model.get( 'controlledDensityProperty' );\n      const range = controlledDensityProperty.range;\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      // Graphics coordinate system has 0 at top so subtract from 1 so that 0 is at the bottom.\n      let paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n      const newValue = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( newValue, range.max ), range.min );\n      controlledDensityProperty.value = constrainedValue;\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Density', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Density: Change Density w/ Paper Position\n// Keywords: density, model, paperPosition\n// ------------------------------- //\n// Required Programs (dependencies) Density: Model\n// Recommended Programs: Density prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Whenever the 'controlsDensityDirectlyProperty' exists in the model, it will be set to \"true\" by this controller.\n    const controllerAttach = component => component.value = true;\n    const controllerDetach = component => component.value = false;\n    scratchpad.controllerId = phet.paperLand.addModelController( 'controlDensityDirectlyProperty', controllerAttach, controllerDetach );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // stop controlling the model Property\n    phet.paperLand.removeModelController( 'controlDensityDirectlyProperty', scratchpad.controllerId );\n    delete scratchpad.controllerId;\n  }\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    \n    // Global model for all programs\n    const model = sharedData.model;\n\n    if ( model.has( 'controlledDensityProperty' ) ) {\n      const controlledDensityProperty = model.get( 'controlledDensityProperty' );\n      const range = controlledDensityProperty.range;\n\n      // This is the center in x or y dimensions of the paper, normalized from 0 to 1.\n      // Graphics coordinate system has 0 at top so subtract from 1 so that 0 is at the bottom.\n      let paperCenterY = 1 - ( positionPoints[ 0 ].y + positionPoints[ 2 ].y ) / 2;\n      const newValue = paperCenterY * range.max;\n\n      // make sure value is within the range\n      const constrainedValue = Math.max( Math.min( newValue, range.max ), range.min );\n      controlledDensityProperty.value = constrainedValue;\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Control', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Density', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.318.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/318/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/318/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
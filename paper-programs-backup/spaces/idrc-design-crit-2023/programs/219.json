{
  "number": 219,
  "originalCode": "// Simple: Set Board Background\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: n/a\n// Program Description: Changes color of Board background!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    // const backgroundColor = 'rgb( 0, 100, 100)';\n    const backgroundColor = 'skyblue';\n    \n    \n    //=================================================================================================================\n\n    // Create a background rectangle and add it to the view.\n    const backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      fill: backgroundColor\n    } );\n    sharedData.scene.addChild( backgroundRectangle );\n    backgroundRectangle.moveToBack();\n\n    // Assign to the scratchpad so that we can remove it later.\n    scratchpad.backgroundRectangle = backgroundRectangle;\n  };\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove the background from the view.\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// Simple: Set Board Background\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: n/a\n// Program Description: Changes color of Board background!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    // const backgroundColor = 'rgb( 0, 100, 100)';\n    const backgroundColor = 'skyblue';\n    \n    \n    //=================================================================================================================\n\n    // Create a background rectangle and add it to the view.\n    const backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      fill: backgroundColor\n    } );\n    sharedData.scene.addChild( backgroundRectangle );\n    backgroundRectangle.moveToBack();\n\n    // Assign to the scratchpad so that we can remove it later.\n    scratchpad.backgroundRectangle = backgroundRectangle;\n  };\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove the background from the view.\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.219.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/219/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/219/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
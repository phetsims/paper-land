{
  "number": 978,
  "originalCode": "// Simple: Print Text Node\n// Keywords: simple, view, text\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: Simple: Set board background, Play Test Sound (templates)\n// Program Description: Prints density equation - or anything you want - on the board!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const message = 'Density = Mass/Volume'\n    const textColor = 'purple';\n    const fontSize = 20;\n    \n    //=================================================================================================================\n\n\n    if ( scratchpad.textNode ) {\n      alert( 'There is already a textNode on the scratchpad!' );\n    }\n\n    // Create a Scenery text node.\n    const textNode = new phet.scenery.Text( message, {\n      font: new phet.sceneryPhet.PhetFont( fontSize ),\n      fill: textColor\n    } )\n\n    // Add the node to the scene and the scratchpad.\n    sharedData.scene.addChild( textNode );\n    scratchpad.textNode = textNode;\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    if ( scratchpad.textNode ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.textNode.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.textNode.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    if ( scratchpad.textNode ){\n      sharedData.scene.removeChild( scratchpad.textNode );\n      scratchpad.textNode = null;\n    }\n    else{\n      alert( 'Error: Text node not found in scratchpad data.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw a message on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Show', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Text', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Simple: Print Text Node\n// Keywords: simple, view, text\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: Simple: Set board background, Play Test Sound (templates)\n// Program Description: Prints density equation - or anything you want - on the board!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const message = 'Density = Mass/Volume'\n    const textColor = 'purple';\n    const fontSize = 20;\n    \n    //=================================================================================================================\n\n\n    if ( scratchpad.textNode ) {\n      alert( 'There is already a textNode on the scratchpad!' );\n    }\n\n    // Create a Scenery text node.\n    const textNode = new phet.scenery.Text( message, {\n      font: new phet.sceneryPhet.PhetFont( fontSize ),\n      fill: textColor\n    } )\n\n    // Add the node to the scene and the scratchpad.\n    sharedData.scene.addChild( textNode );\n    scratchpad.textNode = textNode;\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    if ( scratchpad.textNode ){\n\n      // Center the image based on the position of the paper.\n      const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n      const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n      scratchpad.textNode.centerX = paperCenterX * sharedData.displaySize.width;\n      scratchpad.textNode.centerY = paperCenterY * sharedData.displaySize.height;\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    if ( scratchpad.textNode ){\n      sharedData.scene.removeChild( scratchpad.textNode );\n      scratchpad.textNode = null;\n    }\n    else{\n      alert( 'Error: Text node not found in scratchpad data.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw a message on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Show', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Text', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.idrc-design-crit-2023.978.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/idrc-design-crit-2023/programs/978/debugInfo",
  "claimUrl": "/api/spaces/idrc-design-crit-2023/programs/978/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
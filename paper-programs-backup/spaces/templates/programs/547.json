{
  "number": 547,
  "originalCode": "// PhET Checkbox\n// Keywords: \n// Description: A sample checkbox with sound and description.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isEnabled = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isEnabled', isEnabled );\n    \n\n      const isFocused = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isFocused', isFocused );\n    \n\n      const centerPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0.5, 0.5 )\n      );\n      phet.paperLand.addModelComponent( 'centerPosition', centerPosition );\n    \n\n      const fontSize = new phet.axon.NumberProperty( 24, {\n        range: new phet.dot.Range( 0, 48 )\n      });\n      phet.paperLand.addModelComponent( 'fontSize', fontSize );\n    \n\n      const checkboxLabel = new phet.axon.StringProperty( 'Force Values' );\n      phet.paperLand.addModelComponent( 'checkboxLabel', checkboxLabel );\n    \n\n      // Speak the description whenever the dependencies change.\n      const viewDescriptionForceValuesDescriptionFunction = ( isEnabled ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        \n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        viewDescriptionForceValuesDescription.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        viewDescriptionForceValuesDescription.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        viewDescriptionForceValuesDescription.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        viewDescriptionForceValuesDescription.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        viewDescriptionForceValuesDescription.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        viewDescriptionForceValuesDescription.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        viewDescriptionForceValuesDescription.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        viewDescriptionForceValuesDescription.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        viewDescriptionForceValuesDescription.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        viewDescriptionForceValuesDescription.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const viewDescriptionForceValuesDescriptionViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( viewDescriptionForceValuesDescription.localBounds.width || 1 ) / ( viewDescriptionForceValuesDescription.localBounds.height || 1 );\n\n        const scaleX = viewDescriptionForceValuesDescriptionViewBounds.width / ( viewDescriptionForceValuesDescription.localBounds.width || 1 );\n        const scaleY = viewDescriptionForceValuesDescriptionViewBounds.height / ( viewDescriptionForceValuesDescription.localBounds.height || 1 );\n\n        if ( stretch ) {\n          viewDescriptionForceValuesDescription.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          viewDescriptionForceValuesDescription.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        viewDescriptionForceValuesDescription.center = viewDescriptionForceValuesDescriptionViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.viewDescriptionForceValuesDescriptionUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.viewDescriptionForceValuesDescriptionUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        if (isEnabled) {\n  return \"Force values shown in newtons.\";\n} \nelse {\n  return \"Force values hidden.\"\n}\n      }\n      \n      // a reusable utterance for this description component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.viewDescriptionForceValuesDescriptionUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.viewDescriptionForceValuesDescriptionMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isEnabled' ], ( isEnabled ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const descriptionResult = viewDescriptionForceValuesDescriptionFunction( isEnabled );\n        if ( descriptionResult && descriptionResult.toString ) {\n          const descriptionString = descriptionResult.toString();\n          if ( descriptionString && descriptionString.length > 0 ) {\n            scratchpad.viewDescriptionForceValuesDescriptionUtterance.alert = descriptionString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.viewDescriptionForceValuesDescriptionUtterance ); \n          }\n        }\n      }, {\n        lazy: true,\n        otherReferences: [  ]\n      } ); \n    \n\n      // Speak the description whenever the dependencies change.\n      const viewDescriptionForFocusDescriptionFunction = ( isFocused ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        const checkboxLabel = phet.paperLand.getModelComponent('checkboxLabel').value;\n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        viewDescriptionForFocusDescription.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        viewDescriptionForFocusDescription.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        viewDescriptionForFocusDescription.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        viewDescriptionForFocusDescription.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        viewDescriptionForFocusDescription.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        viewDescriptionForFocusDescription.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        viewDescriptionForFocusDescription.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        viewDescriptionForFocusDescription.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        viewDescriptionForFocusDescription.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        viewDescriptionForFocusDescription.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const viewDescriptionForFocusDescriptionViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( viewDescriptionForFocusDescription.localBounds.width || 1 ) / ( viewDescriptionForFocusDescription.localBounds.height || 1 );\n\n        const scaleX = viewDescriptionForFocusDescriptionViewBounds.width / ( viewDescriptionForFocusDescription.localBounds.width || 1 );\n        const scaleY = viewDescriptionForFocusDescriptionViewBounds.height / ( viewDescriptionForFocusDescription.localBounds.height || 1 );\n\n        if ( stretch ) {\n          viewDescriptionForFocusDescription.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          viewDescriptionForFocusDescription.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        viewDescriptionForFocusDescription.center = viewDescriptionForFocusDescriptionViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.viewDescriptionForFocusDescriptionUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.viewDescriptionForFocusDescriptionUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        if (isFocused){\n    return checkboxLabel;\n}\n      }\n      \n      // a reusable utterance for this description component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.viewDescriptionForFocusDescriptionUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.viewDescriptionForFocusDescriptionMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isFocused' ], ( isFocused ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const descriptionResult = viewDescriptionForFocusDescriptionFunction( isFocused );\n        if ( descriptionResult && descriptionResult.toString ) {\n          const descriptionString = descriptionResult.toString();\n          if ( descriptionString && descriptionString.length > 0 ) {\n            scratchpad.viewDescriptionForFocusDescriptionUtterance.alert = descriptionString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.viewDescriptionForFocusDescriptionUtterance ); \n          }\n        }\n      }, {\n        lazy: true,\n        otherReferences: [ 'checkboxLabel' ]\n      } ); \n    \n\n      // Create a background rectangle and add it to the view.\n      const setBackgroundWhiteBackgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n        fill: 'white'\n      } );\n      \n      // If there are no dependencies for the background, add it to the view immediately. Otherwise, we will add it\n      // once all dependencies are available.\n      if ( [  ].length === 0 ) {\n        sharedData.scene.addChild( setBackgroundWhiteBackgroundRectangle );\n        setBackgroundWhiteBackgroundRectangle.moveToBack();\n      }\n      \n      // Assign to the scratchpad so that we can remove it later.\n      scratchpad.setBackgroundWhiteBackgroundRectangle = setBackgroundWhiteBackgroundRectangle;\n  \n      const setBackgroundWhiteBackgroundColorDependencies = [  ];\n\n      // Get a new background color whenever a dependency changes. The control function should return a color string.\n      const setBackgroundWhiteBackgroundFunction = (  ) => {\n      \n        // bring in the references so they are available in the control function\n        \n      \n        \n      }\n      \n      // Update the background rectangle whenever the dependencies change.\n      scratchpad.setBackgroundWhiteBackgroundMultilinkId = phet.paperLand.addModelPropertyMultilink( [  ], (  ) => {\n    \n        const backgroundColorString = setBackgroundWhiteBackgroundFunction(  );\n        \n        // wait to add the background until all dependencies are available (only add this once)\n        if ( scratchpad.setBackgroundWhiteBackgroundRectangle.parents.length === 0 ) {\n          sharedData.scene.addChild( setBackgroundWhiteBackgroundRectangle );\n          setBackgroundWhiteBackgroundRectangle.moveToBack();\n        }\n        \n        // the function may not be implemented\n        if ( backgroundColorString ) {\n          setBackgroundWhiteBackgroundRectangle.fill = backgroundColorString;\n        }\n        \n        setBackgroundWhiteBackgroundRectangle.setRect( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n// Create a checkbox and add it to the scene.\nconst fontSizeA = phet.paperLand.getModelComponent(`fontSize`);\nconst checkboxLabelA = phet.paperLand.getModelComponent(`checkboxLabel`);\nconst isEnabledA = phet.paperLand.getModelComponent(`isEnabled`);\n\nconst checkboxLabelText = new phet.scenery.Text(checkboxLabelA.value, {\n    font: new phet.sceneryPhet.PhetFont(fontSizeA.value)\n});\n\nconst checkbox = new phet.sun.Checkbox(isEnabledA, checkboxLabelText);\nsharedData.scene.addChild(checkbox);\nscratchpad.checkbox = checkbox;\ncheckbox.moveToFront();\n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isEnabled' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isFocused' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'fontSize' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'checkboxLabel' );\n    \n\n      // Remove the description multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'isEnabled' ], scratchpad.viewDescriptionForceValuesDescriptionMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.viewDescriptionForceValuesDescriptionMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.viewDescriptionForceValuesDescriptionUtterance;\n    \n\n      // Remove the description multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'isFocused' ], scratchpad.viewDescriptionForFocusDescriptionMultilinkId, {\n        otherReferences: [ 'checkboxLabel' ]\n       } );\n      delete scratchpad.viewDescriptionForFocusDescriptionMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.viewDescriptionForFocusDescriptionUtterance;\n    \n\n      // Remove the background rectangle from the view.\n      sharedData.scene.removeChild( scratchpad.setBackgroundWhiteBackgroundRectangle );\n      delete scratchpad.setBackgroundWhiteBackgroundRectangle;\n      \n      // Remove the multilink if there were any dependencies\n      if ( scratchpad.setBackgroundWhiteBackgroundMultilinkId ) {\n        phet.paperLand.removeModelPropertyMultilink( [  ], scratchpad.setBackgroundWhiteBackgroundMultilinkId, {\n          otherReferences: [  ]\n        } );\n        delete scratchpad.setBackgroundWhiteBackgroundMultilinkId;\n      }\n    \nif (scratchpad.checkbox) {\n    sharedData.scene.removeChild(scratchpad.checkbox);\n    scratchpad.checkbox = null;\n}\nelse {\n    alert('Error: Checkbox node not found in scratchpad data.');\n}\n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty0 = phet.paperLand.getModelComponent( 'centerPosition' );\n    if ( modelProperty0 ) {\n      modelProperty0.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n\n    const modelProperty3 = phet.paperLand.getModelComponent( 'isFocused' );\n    if ( modelProperty3 ) {\n      modelProperty3.value = phet.paperLand.utils.getNormalizedProgramRotation( points ) > 0.25 && phet.paperLand.utils.getNormalizedProgramRotation( points ) < 0.75;\n    }\nconst centerPosition = phet.paperLand.getModelComponent(`centerPosition`);\nif (scratchpad.checkbox) {\n\n    // Center the image based on the position of the paper.\n    const centerPositionDisplayUnits = phet.paperLand.utils.paperToBoardCoordinates(centerPosition.value, sharedData.displaySize.width, sharedData.displaySize.height);\n    scratchpad.checkbox.centerX = centerPositionDisplayUnits.x;\n    scratchpad.checkbox.centerY = centerPositionDisplayUnits.y;\n}\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty4 = phet.paperLand.getModelComponent( 'isEnabled' );\n    if ( modelProperty4 ) {\n      modelProperty4.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty8 = phet.paperLand.getModelComponent( 'isEnabled' );\n    if ( modelProperty8 ) {\n      modelProperty8.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('PhET Checkbox', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// PhET Checkbox\n// Keywords: \n// Description: A sample checkbox with sound and description.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isEnabled = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isEnabled', isEnabled );\n    \n\n      const isFocused = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isFocused', isFocused );\n    \n\n      const centerPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0.5, 0.5 )\n      );\n      phet.paperLand.addModelComponent( 'centerPosition', centerPosition );\n    \n\n      const fontSize = new phet.axon.NumberProperty( 24, {\n        range: new phet.dot.Range( 0, 48 )\n      });\n      phet.paperLand.addModelComponent( 'fontSize', fontSize );\n    \n\n      const checkboxLabel = new phet.axon.StringProperty( 'Force Values' );\n      phet.paperLand.addModelComponent( 'checkboxLabel', checkboxLabel );\n    \n\n      // Speak the description whenever the dependencies change.\n      const viewDescriptionForceValuesDescriptionFunction = ( isEnabled ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        \n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        viewDescriptionForceValuesDescription.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        viewDescriptionForceValuesDescription.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        viewDescriptionForceValuesDescription.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        viewDescriptionForceValuesDescription.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        viewDescriptionForceValuesDescription.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        viewDescriptionForceValuesDescription.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        viewDescriptionForceValuesDescription.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        viewDescriptionForceValuesDescription.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        viewDescriptionForceValuesDescription.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        viewDescriptionForceValuesDescription.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const viewDescriptionForceValuesDescriptionViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( viewDescriptionForceValuesDescription.localBounds.width || 1 ) / ( viewDescriptionForceValuesDescription.localBounds.height || 1 );\n\n        const scaleX = viewDescriptionForceValuesDescriptionViewBounds.width / ( viewDescriptionForceValuesDescription.localBounds.width || 1 );\n        const scaleY = viewDescriptionForceValuesDescriptionViewBounds.height / ( viewDescriptionForceValuesDescription.localBounds.height || 1 );\n\n        if ( stretch ) {\n          viewDescriptionForceValuesDescription.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          viewDescriptionForceValuesDescription.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        viewDescriptionForceValuesDescription.center = viewDescriptionForceValuesDescriptionViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.viewDescriptionForceValuesDescriptionUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.viewDescriptionForceValuesDescriptionUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        if (isEnabled) {\n  return \"Force values shown in newtons.\";\n} \nelse {\n  return \"Force values hidden.\"\n}\n      }\n      \n      // a reusable utterance for this description component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.viewDescriptionForceValuesDescriptionUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.viewDescriptionForceValuesDescriptionMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isEnabled' ], ( isEnabled ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const descriptionResult = viewDescriptionForceValuesDescriptionFunction( isEnabled );\n        if ( descriptionResult && descriptionResult.toString ) {\n          const descriptionString = descriptionResult.toString();\n          if ( descriptionString && descriptionString.length > 0 ) {\n            scratchpad.viewDescriptionForceValuesDescriptionUtterance.alert = descriptionString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.viewDescriptionForceValuesDescriptionUtterance ); \n          }\n        }\n      }, {\n        lazy: true,\n        otherReferences: [  ]\n      } ); \n    \n\n      // Speak the description whenever the dependencies change.\n      const viewDescriptionForFocusDescriptionFunction = ( isFocused ) => {\n      \n        // get the additional reference constants so they are available in the control function\n        const checkboxLabel = phet.paperLand.getModelComponent('checkboxLabel').value;\n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        viewDescriptionForFocusDescription.centerX = x;\n      };\n      \n      const setCenterY = ( y ) => {\n        viewDescriptionForFocusDescription.centerY = y;\n      };\n      \n      const setLeft = ( left ) => {\n        viewDescriptionForFocusDescription.left = left;\n      };\n      \n      const setTop = ( top ) => {\n        viewDescriptionForFocusDescription.top = top;\n      };\n      \n      const setScale = ( scale ) => {\n        viewDescriptionForFocusDescription.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        viewDescriptionForFocusDescription.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        viewDescriptionForFocusDescription.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        viewDescriptionForFocusDescription.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        viewDescriptionForFocusDescription.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        viewDescriptionForFocusDescription.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const viewDescriptionForFocusDescriptionViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( viewDescriptionForFocusDescription.localBounds.width || 1 ) / ( viewDescriptionForFocusDescription.localBounds.height || 1 );\n\n        const scaleX = viewDescriptionForFocusDescriptionViewBounds.width / ( viewDescriptionForFocusDescription.localBounds.width || 1 );\n        const scaleY = viewDescriptionForFocusDescriptionViewBounds.height / ( viewDescriptionForFocusDescription.localBounds.height || 1 );\n\n        if ( stretch ) {\n          viewDescriptionForFocusDescription.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          viewDescriptionForFocusDescription.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        viewDescriptionForFocusDescription.center = viewDescriptionForFocusDescriptionViewBounds.center;\n      };\n      \n\n      \n        // Stop all speech and clear the queue\n        const interruptSpeech = () => {\n          phet.scenery.voicingUtteranceQueue.cancel();;\n        };\n        \n        // Mute/unmute the utterance queue\n        const setMuted = ( v ) => {\n          phet.scenery.voicingUtteranceQueue.setMuted( v );\n        };\n        \n        // Sets the priority of this utterance in the queue\n        const setPriority = ( v ) => {\n          scratchpad.viewDescriptionForFocusDescriptionUtterance.priorityProperty.value = v;\n        }\n        \n        const setAlertStableDelay = ( v ) => {\n          scratchpad.viewDescriptionForFocusDescriptionUtterance.setAlertStableDelay( v );\n        };\n        \n        const setVoiceRate = ( v ) => {\n          phet.scenery.voicingManager.voiceRateProperty.value = v;\n        };\n        \n        const setVoicePitch = ( v ) => {\n          phet.scenery.voicingManager.voicePitchProperty.value = v;\n        };\n      \n      \n        if (isFocused){\n    return checkboxLabel;\n}\n      }\n      \n      // a reusable utterance for this description component so that only the latest value is spoken - in general\n      // it should not cancel other Utterances in this context but it should cancel itself\n      scratchpad.viewDescriptionForFocusDescriptionUtterance = new phet.utteranceQueue.Utterance( { announcerOptions: { cancelOther: false } } );\n      \n      scratchpad.viewDescriptionForFocusDescriptionMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'isFocused' ], ( isFocused ) => {\n\n        // Make sure there is a string to speak, including converting falsy values and numbers to a string       \n        const descriptionResult = viewDescriptionForFocusDescriptionFunction( isFocused );\n        if ( descriptionResult && descriptionResult.toString ) {\n          const descriptionString = descriptionResult.toString();\n          if ( descriptionString && descriptionString.length > 0 ) {\n            scratchpad.viewDescriptionForFocusDescriptionUtterance.alert = descriptionString;\n            phet.scenery.voicingUtteranceQueue.addToBack( scratchpad.viewDescriptionForFocusDescriptionUtterance ); \n          }\n        }\n      }, {\n        lazy: true,\n        otherReferences: [ 'checkboxLabel' ]\n      } ); \n    \n\n      // Create a background rectangle and add it to the view.\n      const setBackgroundWhiteBackgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n        fill: 'white'\n      } );\n      \n      // If there are no dependencies for the background, add it to the view immediately. Otherwise, we will add it\n      // once all dependencies are available.\n      if ( [  ].length === 0 ) {\n        sharedData.scene.addChild( setBackgroundWhiteBackgroundRectangle );\n        setBackgroundWhiteBackgroundRectangle.moveToBack();\n      }\n      \n      // Assign to the scratchpad so that we can remove it later.\n      scratchpad.setBackgroundWhiteBackgroundRectangle = setBackgroundWhiteBackgroundRectangle;\n  \n      const setBackgroundWhiteBackgroundColorDependencies = [  ];\n\n      // Get a new background color whenever a dependency changes. The control function should return a color string.\n      const setBackgroundWhiteBackgroundFunction = (  ) => {\n      \n        // bring in the references so they are available in the control function\n        \n      \n        \n      }\n      \n      // Update the background rectangle whenever the dependencies change.\n      scratchpad.setBackgroundWhiteBackgroundMultilinkId = phet.paperLand.addModelPropertyMultilink( [  ], (  ) => {\n    \n        const backgroundColorString = setBackgroundWhiteBackgroundFunction(  );\n        \n        // wait to add the background until all dependencies are available (only add this once)\n        if ( scratchpad.setBackgroundWhiteBackgroundRectangle.parents.length === 0 ) {\n          sharedData.scene.addChild( setBackgroundWhiteBackgroundRectangle );\n          setBackgroundWhiteBackgroundRectangle.moveToBack();\n        }\n        \n        // the function may not be implemented\n        if ( backgroundColorString ) {\n          setBackgroundWhiteBackgroundRectangle.fill = backgroundColorString;\n        }\n        \n        setBackgroundWhiteBackgroundRectangle.setRect( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n// Create a checkbox and add it to the scene.\nconst fontSizeA = phet.paperLand.getModelComponent(`fontSize`);\nconst checkboxLabelA = phet.paperLand.getModelComponent(`checkboxLabel`);\nconst isEnabledA = phet.paperLand.getModelComponent(`isEnabled`);\n\nconst checkboxLabelText = new phet.scenery.Text(checkboxLabelA.value, {\n    font: new phet.sceneryPhet.PhetFont(fontSizeA.value)\n});\n\nconst checkbox = new phet.sun.Checkbox(isEnabledA, checkboxLabelText);\nsharedData.scene.addChild(checkbox);\nscratchpad.checkbox = checkbox;\ncheckbox.moveToFront();\n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isEnabled' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isFocused' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'centerPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'fontSize' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'checkboxLabel' );\n    \n\n      // Remove the description multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'isEnabled' ], scratchpad.viewDescriptionForceValuesDescriptionMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.viewDescriptionForceValuesDescriptionMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.viewDescriptionForceValuesDescriptionUtterance;\n    \n\n      // Remove the description multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'isFocused' ], scratchpad.viewDescriptionForFocusDescriptionMultilinkId, {\n        otherReferences: [ 'checkboxLabel' ]\n       } );\n      delete scratchpad.viewDescriptionForFocusDescriptionMultilinkId;\n      \n      // Remove the utterance\n      delete scratchpad.viewDescriptionForFocusDescriptionUtterance;\n    \n\n      // Remove the background rectangle from the view.\n      sharedData.scene.removeChild( scratchpad.setBackgroundWhiteBackgroundRectangle );\n      delete scratchpad.setBackgroundWhiteBackgroundRectangle;\n      \n      // Remove the multilink if there were any dependencies\n      if ( scratchpad.setBackgroundWhiteBackgroundMultilinkId ) {\n        phet.paperLand.removeModelPropertyMultilink( [  ], scratchpad.setBackgroundWhiteBackgroundMultilinkId, {\n          otherReferences: [  ]\n        } );\n        delete scratchpad.setBackgroundWhiteBackgroundMultilinkId;\n      }\n    \nif (scratchpad.checkbox) {\n    sharedData.scene.removeChild(scratchpad.checkbox);\n    scratchpad.checkbox = null;\n}\nelse {\n    alert('Error: Checkbox node not found in scratchpad data.');\n}\n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty0 = phet.paperLand.getModelComponent( 'centerPosition' );\n    if ( modelProperty0 ) {\n      modelProperty0.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n\n    const modelProperty3 = phet.paperLand.getModelComponent( 'isFocused' );\n    if ( modelProperty3 ) {\n      modelProperty3.value = phet.paperLand.utils.getNormalizedProgramRotation( points ) > 0.25 && phet.paperLand.utils.getNormalizedProgramRotation( points ) < 0.75;\n    }\nconst centerPosition = phet.paperLand.getModelComponent(`centerPosition`);\nif (scratchpad.checkbox) {\n\n    // Center the image based on the position of the paper.\n    const centerPositionDisplayUnits = phet.paperLand.utils.paperToBoardCoordinates(centerPosition.value, sharedData.displaySize.width, sharedData.displaySize.height);\n    scratchpad.checkbox.centerX = centerPositionDisplayUnits.x;\n    scratchpad.checkbox.centerY = centerPositionDisplayUnits.y;\n}\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty4 = phet.paperLand.getModelComponent( 'isEnabled' );\n    if ( modelProperty4 ) {\n      modelProperty4.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty8 = phet.paperLand.getModelComponent( 'isEnabled' );\n    if ( modelProperty8 ) {\n      modelProperty8.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('PhET Checkbox', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.templates.547.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/templates/programs/547/debugInfo",
  "claimUrl": "/api/spaces/templates/programs/547/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
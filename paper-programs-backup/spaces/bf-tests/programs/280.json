{
  "number": 280,
  "originalCode": "// Sound 2\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOn_Copy1 = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOn_Copy1', markerIsOn_Copy1 );\n    \n\n      const soundPlaybackRate_Copy1 = new phet.axon.NumberProperty( 1, {\n        range: new phet.dot.Range( 1, 3 )\n      });\n      phet.paperLand.addModelComponent( 'soundPlaybackRate_Copy1', soundPlaybackRate_Copy1 );\n    \n\n      const soundOutputLevel_Copy1 = new phet.axon.NumberProperty( 0.7, {\n        range: new phet.dot.Range( 0, 1 )\n      });\n      phet.paperLand.addModelComponent( 'soundOutputLevel_Copy1', soundOutputLevel_Copy1 );\n    \n\n      const paperBounds_Copy1 = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'paperBounds_Copy1', paperBounds_Copy1 );\n    \n\n      // The array item can be created when all entry data and the array itself are available in the model.\n      scratchpad.sound1Parameters_Copy1ItemObserverId = phet.paperLand.addMultiModelObserver(\n        [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ],\n        ( soundPlaybackRate_Copy1, soundOutputLevel_Copy1, reportValuesArray ) => {\n        \n          // Create the entry from the item schema.\n          const sound1Parameters_Copy1ItemObject = { \n_latest_rate1: phet.paperLand.getModelComponent('soundPlaybackRate_Copy1').value,\nget rate1() { return this._latest_rate1; },\nset rate1(newValue) { phet.paperLand.getModelComponent('soundPlaybackRate_Copy1').value = newValue; },\n_latest_level1: phet.paperLand.getModelComponent('soundOutputLevel_Copy1').value,\nget level1() { return this._latest_level1; },\nset level1(newValue) { phet.paperLand.getModelComponent('soundOutputLevel_Copy1').value = newValue; }\n };\n        \n          // Now that all dependencies are detected, this is where we may add the item for the first time.\n          // If the model has a 'added' item reference, set this item to it.\n          if ( phet.paperLand.getModelComponent( 'reportValuesArrayAddedItem' ) ) {\n            phet.paperLand.getModelComponent( 'reportValuesArrayAddedItem' ).value = sound1Parameters_Copy1ItemObject;\n          }\n        \n          // A callback that will replace the item in the array.\n          scratchpad.replaceItem = () => {\n          \n            // A shallow copy of the array so that we can set it back to the Property and trigger listeners.\n            const reportValuesArrayArray = phet.paperLand.getModelComponent( 'reportValuesArray' ).value.slice();\n            \n            const index = reportValuesArrayArray.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              reportValuesArrayArray.splice( index, 1 );\n            }\n            \n            // Update the ItemObject values every time a component changes\n            sound1Parameters_Copy1ItemObject._latest_rate1 = phet.paperLand.getModelComponent('soundPlaybackRate_Copy1').value;\nsound1Parameters_Copy1ItemObject._latest_level1 = phet.paperLand.getModelComponent('soundOutputLevel_Copy1').value;\n\n            \n            scratchpad.item = sound1Parameters_Copy1ItemObject;\n            \n            // Add the item to the array, inserting it into the same index as the previous item\n            // to be less disruptive to the array data.\n            reportValuesArrayArray.splice( index, 0, scratchpad.item );\n                        \n            // Set the array back to the Property.\n            phet.paperLand.getModelComponent( 'reportValuesArray' ).value = reportValuesArrayArray;\n          };\n        \n          // For each linkable dependency, whenever the value changes we will recreate the item\n          // and add it back to the array to trigger an array change so that the user can\n          // easily register changes to the array in one place.\n          [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ].forEach( dependencyName => {\n          \n            // Updating the array when the array itself is changed would be infinately reentrant.\n            if ( dependencyName !== 'reportValuesArray' ) {\n              const dependency = phet.paperLand.getModelComponent( dependencyName );\n              dependency.link( scratchpad.replaceItem );\n            }\n          } );\n        },\n        () => {\n        \n          // Remove the item from the array as soon as any dependencies are removed (if it is still in the array)\n          const reportValuesArrayArray = phet.paperLand.getModelComponent( 'reportValuesArray' );\n          if ( reportValuesArrayArray ) {\n            const arrayValue = reportValuesArrayArray.value;\n            \n            const index = arrayValue.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              arrayValue.splice( index, 1 );\n              \n              // Set the Property to a new array so that listeners are triggered.\n              phet.paperLand.getModelComponent( 'reportValuesArray' ).value = arrayValue.slice();\n              \n              // Update the reference to the item that was just removed from the array, if the model has such a\n              // component (it may have been removed by the user).\n              if ( phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ) ) {\n                phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ).value = scratchpad.item;\n              }\n            }\n          }\n          \n          // detach listeners that will replace the item\n          [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ].forEach( dependencyName => {\n            const dependency = phet.paperLand.getModelComponent( dependencyName );\n            if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n              dependency.unlink( scratchpad.replaceItem );\n            }\n          } );\n        }\n      ); \n    \n\n      const markerIsOnSound_Copy1WrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/musicalInvertedBeat.mp3' );\n      const markerIsOnSound_Copy1SoundClip = new phet.tambo.SoundClip( markerIsOnSound_Copy1WrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( markerIsOnSound_Copy1SoundClip );\n      scratchpad.markerIsOnSound_Copy1WrappedAudioBuffer = markerIsOnSound_Copy1WrappedAudioBuffer;\n      \n      let markerIsOnSound_Copy1StopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let markerIsOnSound_Copy1LastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.markerIsOnSound_Copy1SoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'markerIsOn_Copy1', 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1' ], ( markerIsOn_Copy1, soundPlaybackRate_Copy1, soundOutputLevel_Copy1 ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              markerIsOnSound_Copy1SoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              markerIsOnSound_Copy1SoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !markerIsOnSound_Copy1SoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - markerIsOnSound_Copy1LastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !markerIsOnSound_Copy1SoundClip.isPlaying ) {\n                  markerIsOnSound_Copy1SoundClip.play();\n                }\n                markerIsOnSound_Copy1LastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( markerIsOnSound_Copy1StopSoundTimeout ){\n                  window.clearTimeout( markerIsOnSound_Copy1StopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  markerIsOnSound_Copy1StopSoundTimeout = window.setTimeout( () => {\n                    markerIsOnSound_Copy1SoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( markerIsOnSound_Copy1StopSoundTimeout ){\n                window.clearTimeout( markerIsOnSound_Copy1StopSoundTimeout );\n              }\n              markerIsOnSound_Copy1SoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            phet.paperLand.console.log(`${soundPlaybackRate_Copy1}`);\nphet.paperLand.console.log(`${soundOutputLevel_Copy1}`);\n\n\nif (markerIsOn_Copy1) {\n    setPlaybackRate(soundPlaybackRate_Copy1);\n    setOutputLevel(soundOutputLevel_Copy1);\n    play();\n} else {\n    setPlaybackRate(1);\n    setOutputLevel(0);\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.markerIsOnSound_Copy1WrappedAudioBuffer.audioBufferProperty.link( scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.markerIsOnSound_Copy1SoundClip = markerIsOnSound_Copy1SoundClip;\n    \n\n      // Create an image and add it to the view.\n      let paperImage_Copy1ImageElement = document.createElement( 'img' );\n      paperImage_Copy1ImageElement.src = 'media/images/paper-sound.png';\n      const paperImage_Copy1Image = new phet.scenery.Image( paperImage_Copy1ImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const paperImage_Copy1ImageLoadProperty = new phet.axon.Property( 0 );\n      paperImage_Copy1ImageElement.addEventListener( 'load', () => { paperImage_Copy1ImageLoadProperty.value = paperImage_Copy1ImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( paperImage_Copy1Image );\n      scratchpad.paperImage_Copy1Image = paperImage_Copy1Image;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.paperImage_Copy1ImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'paperBounds_Copy1' ], async ( paperBounds_Copy1 ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        paperImage_Copy1Image.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        paperImage_Copy1Image.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        paperImage_Copy1Image.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        paperImage_Copy1Image.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        paperImage_Copy1Image.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        paperImage_Copy1Image.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        paperImage_Copy1Image.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        paperImage_Copy1Image.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        paperImage_Copy1Image.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        paperImage_Copy1Image.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const paperImage_Copy1ImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( paperImage_Copy1Image.localBounds.width || 1 ) / ( paperImage_Copy1Image.localBounds.height || 1 );\n\n        const scaleX = paperImage_Copy1ImageViewBounds.width / ( paperImage_Copy1Image.localBounds.width || 1 );\n        const scaleY = paperImage_Copy1ImageViewBounds.height / ( paperImage_Copy1Image.localBounds.height || 1 );\n\n        if ( stretch ) {\n          paperImage_Copy1Image.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          paperImage_Copy1Image.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        paperImage_Copy1Image.center = paperImage_Copy1ImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( paperImage_Copy1Image.image ) {\n              const startIndex = paperImage_Copy1Image.image.src.indexOf( 'media/images/' );\n              currentImageName = paperImage_Copy1Image.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const paperImage_Copy1ImageImageElement = document.createElement( 'img' );\n              paperImage_Copy1ImageImageElement.src = newImageName;\n              paperImage_Copy1Image.image = paperImage_Copy1ImageImageElement;\n\n              // Wait for the image to load before resolving              \n              paperImage_Copy1ImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        matchBounds( paperBounds_Copy1, false );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, paperImage_Copy1ImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOn_Copy1' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'soundPlaybackRate_Copy1' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'soundOutputLevel_Copy1' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'paperBounds_Copy1' );\n    \n\n      // If the item is in the array still, remove it.\n      const reportValuesArrayArray = phet.paperLand.getModelComponent( 'reportValuesArray' );\n      if ( reportValuesArrayArray ) {\n        const index = reportValuesArrayArray.value.indexOf( scratchpad.item );\n        if ( index > -1 ) {\n          reportValuesArrayArray.value.splice( index, 1 );\n          \n          // Set the Property to a new array so that listeners are triggered.\n          phet.paperLand.getModelComponent( 'reportValuesArray' ).value = reportValuesArrayArray.value.slice();\n          \n          // Update the reference to the item that was just removed from the array, if the model has such a\n          // component (it may have been removed by the user).\n          if ( phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ) ) {\n            phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ).value = scratchpad.item;\n          }\n        }\n      }\n      \n      // detach listeners that will replace the item, if they are still on the dependencies\n      [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ].forEach( dependencyName => {\n        const dependency = phet.paperLand.getModelComponent( dependencyName );\n        if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n          dependency.unlink( scratchpad.replaceItem );\n        }\n      } );\n      \n      // Detach the multiModelObserver listener.\n      phet.paperLand.removeMultiModelObserver( [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ], scratchpad.sound1Parameters_Copy1ItemObserverId );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.markerIsOnSound_Copy1SoundClip );\n      delete scratchpad.markerIsOnSound_Copy1SoundClip;\n      \n      scratchpad.markerIsOnSound_Copy1WrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener );\n      delete scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'markerIsOn_Copy1', 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1' ], scratchpad.markerIsOnSound_Copy1SoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.markerIsOnSound_Copy1SoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.paperImage_Copy1Image );\n      delete scratchpad.paperImage_Copy1Image;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'paperBounds_Copy1' ], scratchpad.paperImage_Copy1ImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.paperImage_Copy1ImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty303 = phet.paperLand.getModelComponent( 'paperBounds_Copy1' );\n    if ( modelProperty303 ) {\n      modelProperty303.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n\n    const modelProperty306 = phet.paperLand.getModelComponent( 'soundPlaybackRate_Copy1' );\n    if ( modelProperty306 ) {\n      modelProperty306.value = modelProperty306.range.min + phet.paperLand.utils.getNormalizedProgramRotation( points ) * ( modelProperty306.range.max - modelProperty306.range.min );\n    }\n\n    const modelProperty307 = phet.paperLand.getModelComponent( 'soundOutputLevel_Copy1' );\n    if ( modelProperty307 ) {\n      modelProperty307.value = modelProperty307.range.min + ( 1 - phet.paperLand.utils.getProgramCenter( points ).y ) * ( modelProperty307.range.max - modelProperty307.range.min );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty308 = phet.paperLand.getModelComponent( 'markerIsOn_Copy1' );\n    if ( modelProperty308 ) {\n      modelProperty308.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty313 = phet.paperLand.getModelComponent( 'markerIsOn_Copy1' );\n    if ( modelProperty313 ) {\n      modelProperty313.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.1,\n        right: 0.1,\n        bottom: 0.1,\n        left: 0.1\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound 2', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Sound 2\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const markerIsOn_Copy1 = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'markerIsOn_Copy1', markerIsOn_Copy1 );\n    \n\n      const soundPlaybackRate_Copy1 = new phet.axon.NumberProperty( 1, {\n        range: new phet.dot.Range( 1, 3 )\n      });\n      phet.paperLand.addModelComponent( 'soundPlaybackRate_Copy1', soundPlaybackRate_Copy1 );\n    \n\n      const soundOutputLevel_Copy1 = new phet.axon.NumberProperty( 0.7, {\n        range: new phet.dot.Range( 0, 1 )\n      });\n      phet.paperLand.addModelComponent( 'soundOutputLevel_Copy1', soundOutputLevel_Copy1 );\n    \n\n      const paperBounds_Copy1 = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'paperBounds_Copy1', paperBounds_Copy1 );\n    \n\n      // The array item can be created when all entry data and the array itself are available in the model.\n      scratchpad.sound1Parameters_Copy1ItemObserverId = phet.paperLand.addMultiModelObserver(\n        [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ],\n        ( soundPlaybackRate_Copy1, soundOutputLevel_Copy1, reportValuesArray ) => {\n        \n          // Create the entry from the item schema.\n          const sound1Parameters_Copy1ItemObject = { \n_latest_rate1: phet.paperLand.getModelComponent('soundPlaybackRate_Copy1').value,\nget rate1() { return this._latest_rate1; },\nset rate1(newValue) { phet.paperLand.getModelComponent('soundPlaybackRate_Copy1').value = newValue; },\n_latest_level1: phet.paperLand.getModelComponent('soundOutputLevel_Copy1').value,\nget level1() { return this._latest_level1; },\nset level1(newValue) { phet.paperLand.getModelComponent('soundOutputLevel_Copy1').value = newValue; }\n };\n        \n          // Now that all dependencies are detected, this is where we may add the item for the first time.\n          // If the model has a 'added' item reference, set this item to it.\n          if ( phet.paperLand.getModelComponent( 'reportValuesArrayAddedItem' ) ) {\n            phet.paperLand.getModelComponent( 'reportValuesArrayAddedItem' ).value = sound1Parameters_Copy1ItemObject;\n          }\n        \n          // A callback that will replace the item in the array.\n          scratchpad.replaceItem = () => {\n          \n            // A shallow copy of the array so that we can set it back to the Property and trigger listeners.\n            const reportValuesArrayArray = phet.paperLand.getModelComponent( 'reportValuesArray' ).value.slice();\n            \n            const index = reportValuesArrayArray.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              reportValuesArrayArray.splice( index, 1 );\n            }\n            \n            // Update the ItemObject values every time a component changes\n            sound1Parameters_Copy1ItemObject._latest_rate1 = phet.paperLand.getModelComponent('soundPlaybackRate_Copy1').value;\nsound1Parameters_Copy1ItemObject._latest_level1 = phet.paperLand.getModelComponent('soundOutputLevel_Copy1').value;\n\n            \n            scratchpad.item = sound1Parameters_Copy1ItemObject;\n            \n            // Add the item to the array, inserting it into the same index as the previous item\n            // to be less disruptive to the array data.\n            reportValuesArrayArray.splice( index, 0, scratchpad.item );\n                        \n            // Set the array back to the Property.\n            phet.paperLand.getModelComponent( 'reportValuesArray' ).value = reportValuesArrayArray;\n          };\n        \n          // For each linkable dependency, whenever the value changes we will recreate the item\n          // and add it back to the array to trigger an array change so that the user can\n          // easily register changes to the array in one place.\n          [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ].forEach( dependencyName => {\n          \n            // Updating the array when the array itself is changed would be infinately reentrant.\n            if ( dependencyName !== 'reportValuesArray' ) {\n              const dependency = phet.paperLand.getModelComponent( dependencyName );\n              dependency.link( scratchpad.replaceItem );\n            }\n          } );\n        },\n        () => {\n        \n          // Remove the item from the array as soon as any dependencies are removed (if it is still in the array)\n          const reportValuesArrayArray = phet.paperLand.getModelComponent( 'reportValuesArray' );\n          if ( reportValuesArrayArray ) {\n            const arrayValue = reportValuesArrayArray.value;\n            \n            const index = arrayValue.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              arrayValue.splice( index, 1 );\n              \n              // Set the Property to a new array so that listeners are triggered.\n              phet.paperLand.getModelComponent( 'reportValuesArray' ).value = arrayValue.slice();\n              \n              // Update the reference to the item that was just removed from the array, if the model has such a\n              // component (it may have been removed by the user).\n              if ( phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ) ) {\n                phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ).value = scratchpad.item;\n              }\n            }\n          }\n          \n          // detach listeners that will replace the item\n          [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ].forEach( dependencyName => {\n            const dependency = phet.paperLand.getModelComponent( dependencyName );\n            if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n              dependency.unlink( scratchpad.replaceItem );\n            }\n          } );\n        }\n      ); \n    \n\n      const markerIsOnSound_Copy1WrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/musicalInvertedBeat.mp3' );\n      const markerIsOnSound_Copy1SoundClip = new phet.tambo.SoundClip( markerIsOnSound_Copy1WrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( markerIsOnSound_Copy1SoundClip );\n      scratchpad.markerIsOnSound_Copy1WrappedAudioBuffer = markerIsOnSound_Copy1WrappedAudioBuffer;\n      \n      let markerIsOnSound_Copy1StopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let markerIsOnSound_Copy1LastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.markerIsOnSound_Copy1SoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'markerIsOn_Copy1', 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1' ], ( markerIsOn_Copy1, soundPlaybackRate_Copy1, soundOutputLevel_Copy1 ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              markerIsOnSound_Copy1SoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              markerIsOnSound_Copy1SoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !markerIsOnSound_Copy1SoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - markerIsOnSound_Copy1LastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !markerIsOnSound_Copy1SoundClip.isPlaying ) {\n                  markerIsOnSound_Copy1SoundClip.play();\n                }\n                markerIsOnSound_Copy1LastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( markerIsOnSound_Copy1StopSoundTimeout ){\n                  window.clearTimeout( markerIsOnSound_Copy1StopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  markerIsOnSound_Copy1StopSoundTimeout = window.setTimeout( () => {\n                    markerIsOnSound_Copy1SoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( markerIsOnSound_Copy1StopSoundTimeout ){\n                window.clearTimeout( markerIsOnSound_Copy1StopSoundTimeout );\n              }\n              markerIsOnSound_Copy1SoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            phet.paperLand.console.log(`${soundPlaybackRate_Copy1}`);\nphet.paperLand.console.log(`${soundOutputLevel_Copy1}`);\n\n\nif (markerIsOn_Copy1) {\n    setPlaybackRate(soundPlaybackRate_Copy1);\n    setOutputLevel(soundOutputLevel_Copy1);\n    play();\n} else {\n    setPlaybackRate(1);\n    setOutputLevel(0);\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.markerIsOnSound_Copy1WrappedAudioBuffer.audioBufferProperty.link( scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.markerIsOnSound_Copy1SoundClip = markerIsOnSound_Copy1SoundClip;\n    \n\n      // Create an image and add it to the view.\n      let paperImage_Copy1ImageElement = document.createElement( 'img' );\n      paperImage_Copy1ImageElement.src = 'media/images/paper-sound.png';\n      const paperImage_Copy1Image = new phet.scenery.Image( paperImage_Copy1ImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const paperImage_Copy1ImageLoadProperty = new phet.axon.Property( 0 );\n      paperImage_Copy1ImageElement.addEventListener( 'load', () => { paperImage_Copy1ImageLoadProperty.value = paperImage_Copy1ImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( paperImage_Copy1Image );\n      scratchpad.paperImage_Copy1Image = paperImage_Copy1Image;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.paperImage_Copy1ImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'paperBounds_Copy1' ], async ( paperBounds_Copy1 ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        paperImage_Copy1Image.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        paperImage_Copy1Image.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        paperImage_Copy1Image.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        paperImage_Copy1Image.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        paperImage_Copy1Image.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        paperImage_Copy1Image.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        paperImage_Copy1Image.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        paperImage_Copy1Image.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        paperImage_Copy1Image.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        paperImage_Copy1Image.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const paperImage_Copy1ImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( paperImage_Copy1Image.localBounds.width || 1 ) / ( paperImage_Copy1Image.localBounds.height || 1 );\n\n        const scaleX = paperImage_Copy1ImageViewBounds.width / ( paperImage_Copy1Image.localBounds.width || 1 );\n        const scaleY = paperImage_Copy1ImageViewBounds.height / ( paperImage_Copy1Image.localBounds.height || 1 );\n\n        if ( stretch ) {\n          paperImage_Copy1Image.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          paperImage_Copy1Image.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        paperImage_Copy1Image.center = paperImage_Copy1ImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( paperImage_Copy1Image.image ) {\n              const startIndex = paperImage_Copy1Image.image.src.indexOf( 'media/images/' );\n              currentImageName = paperImage_Copy1Image.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const paperImage_Copy1ImageImageElement = document.createElement( 'img' );\n              paperImage_Copy1ImageImageElement.src = newImageName;\n              paperImage_Copy1Image.image = paperImage_Copy1ImageImageElement;\n\n              // Wait for the image to load before resolving              \n              paperImage_Copy1ImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        matchBounds( paperBounds_Copy1, false );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, paperImage_Copy1ImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'markerIsOn_Copy1' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'soundPlaybackRate_Copy1' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'soundOutputLevel_Copy1' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'paperBounds_Copy1' );\n    \n\n      // If the item is in the array still, remove it.\n      const reportValuesArrayArray = phet.paperLand.getModelComponent( 'reportValuesArray' );\n      if ( reportValuesArrayArray ) {\n        const index = reportValuesArrayArray.value.indexOf( scratchpad.item );\n        if ( index > -1 ) {\n          reportValuesArrayArray.value.splice( index, 1 );\n          \n          // Set the Property to a new array so that listeners are triggered.\n          phet.paperLand.getModelComponent( 'reportValuesArray' ).value = reportValuesArrayArray.value.slice();\n          \n          // Update the reference to the item that was just removed from the array, if the model has such a\n          // component (it may have been removed by the user).\n          if ( phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ) ) {\n            phet.paperLand.getModelComponent( 'reportValuesArrayRemovedItem' ).value = scratchpad.item;\n          }\n        }\n      }\n      \n      // detach listeners that will replace the item, if they are still on the dependencies\n      [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ].forEach( dependencyName => {\n        const dependency = phet.paperLand.getModelComponent( dependencyName );\n        if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n          dependency.unlink( scratchpad.replaceItem );\n        }\n      } );\n      \n      // Detach the multiModelObserver listener.\n      phet.paperLand.removeMultiModelObserver( [ 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1', 'reportValuesArray' ], scratchpad.sound1Parameters_Copy1ItemObserverId );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.markerIsOnSound_Copy1SoundClip );\n      delete scratchpad.markerIsOnSound_Copy1SoundClip;\n      \n      scratchpad.markerIsOnSound_Copy1WrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener );\n      delete scratchpad.markerIsOnSound_Copy1WrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'markerIsOn_Copy1', 'soundPlaybackRate_Copy1', 'soundOutputLevel_Copy1' ], scratchpad.markerIsOnSound_Copy1SoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.markerIsOnSound_Copy1SoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.paperImage_Copy1Image );\n      delete scratchpad.paperImage_Copy1Image;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'paperBounds_Copy1' ], scratchpad.paperImage_Copy1ImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.paperImage_Copy1ImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty303 = phet.paperLand.getModelComponent( 'paperBounds_Copy1' );\n    if ( modelProperty303 ) {\n      modelProperty303.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n\n    const modelProperty306 = phet.paperLand.getModelComponent( 'soundPlaybackRate_Copy1' );\n    if ( modelProperty306 ) {\n      modelProperty306.value = modelProperty306.range.min + phet.paperLand.utils.getNormalizedProgramRotation( points ) * ( modelProperty306.range.max - modelProperty306.range.min );\n    }\n\n    const modelProperty307 = phet.paperLand.getModelComponent( 'soundOutputLevel_Copy1' );\n    if ( modelProperty307 ) {\n      modelProperty307.value = modelProperty307.range.min + ( 1 - phet.paperLand.utils.getProgramCenter( points ).y ) * ( modelProperty307.range.max - modelProperty307.range.min );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty308 = phet.paperLand.getModelComponent( 'markerIsOn_Copy1' );\n    if ( modelProperty308 ) {\n      modelProperty308.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty313 = phet.paperLand.getModelComponent( 'markerIsOn_Copy1' );\n    if ( modelProperty313 ) {\n      modelProperty313.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.1,\n        right: 0.1,\n        bottom: 0.1,\n        left: 0.1\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Sound 2', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.bf-tests.280.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/bf-tests/programs/280/debugInfo",
  "claimUrl": "/api/spaces/bf-tests/programs/280/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
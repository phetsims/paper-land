{
  "number": 2049,
  "originalCode": "// Rate and Output Text\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const reportValuesArrayAddedItem = new phet.axon.Property( null );\n      phet.paperLand.addModelComponent( 'reportValuesArrayAddedItem', reportValuesArrayAddedItem );\n    \n\n      const reportValuesArrayRemovedItem = new phet.axon.Property( null );\n      phet.paperLand.addModelComponent( 'reportValuesArrayRemovedItem', reportValuesArrayRemovedItem );\n    \n\n      const reportValuesArray = new phet.axon.Property( [] );\n      phet.paperLand.addModelComponent( 'reportValuesArray', reportValuesArray );\n    \n\n      // DerivedProperties are actually implemented with Multilink for now because paper-land has a nice abstraction\n      // for it.\n      const reportValuesArrayLength = new phet.axon.Property( null );\n      scratchpad.reportValuesArrayLengthDerivedPropertyObserverId = phet.paperLand.addModelPropertyMultilink( [ 'reportValuesArray' ], ( reportValuesArray ) => {\n        const derivationFunction = () => {\n        \n          // should return a value based on the dependencies\n          return reportValuesArray.length;\n        };\n        reportValuesArrayLength.value = derivationFunction();\n      } );\n      phet.paperLand.addModelComponent( 'reportValuesArrayLength', reportValuesArrayLength );\n    \n\n      // Create the text and add it to the view - using RichText for nice markup support.\n      const parametersTextText = new phet.scenery.RichText( '', { fill: 'white' } );\n      \n      sharedData.scene.addChild( parametersTextText );\n      scratchpad.parametersTextText = parametersTextText;\n      \n      // Update the text when a dependency changes.\n      scratchpad.parametersTextTextMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'reportValuesArrayLength' ], ( reportValuesArrayLength ) => {\n      \n        // the additional reference constants\n        const reportValuesArray = phet.paperLand.getModelComponent('reportValuesArray').value;\n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        parametersTextText.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        parametersTextText.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        parametersTextText.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        parametersTextText.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        parametersTextText.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        parametersTextText.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        parametersTextText.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        parametersTextText.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        parametersTextText.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        parametersTextText.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const parametersTextTextViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( parametersTextText.localBounds.width || 1 ) / ( parametersTextText.localBounds.height || 1 );\n\n        const scaleX = parametersTextTextViewBounds.width / ( parametersTextText.localBounds.width || 1 );\n        const scaleY = parametersTextTextViewBounds.height / ( parametersTextText.localBounds.height || 1 );\n\n        if ( stretch ) {\n          parametersTextText.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          parametersTextText.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        parametersTextText.center = parametersTextTextViewBounds.center;\n      };\n      \n\n        const setString = ( string ) => {\n          parametersTextText.string = string;\n        };\n        \n        const setFontSize = ( size ) => {\n        \n          // RichText has no setter for size, so we need to create a new font. Use\n          // state from the old font to maintain the family.\n          const currentFont = parametersTextText.font;\n          const newFont = new phet.scenery.Font( { size: size, family: currentFont.family } );\n          parametersTextText.font = newFont;\n        };\n\n        const setTextColor = ( color ) => {\n          parametersTextText.fill = color;\n        };\n\n        const setFontFamily = ( family ) => {\n        \n          // RichText has no setter for fontFamily, so we need to create a new font. Use\n          // state from the old font to maintain the size.\n          const currentFont = parametersTextText.font;\n          const newFont = new phet.scenery.Font( { size: currentFont.size, family: family } );\n          parametersTextText.font = newFont;\n        };\n      \n\n        // the function that the user wrote to update the text      \n        setLeft(0);\nsetCenterY(0.1);\nsetFontSize(15);\n\nphet.paperLand.console.log(`array length is ${reportValuesArrayLength}`);\n\nlet result;\n\nif (reportValuesArrayLength === 0) {\n    result = \"The array is empty.\";\n} else if (reportValuesArrayLength === 1) {\n    result = `${reportValuesArray.rate1}`;\n} else if (reportValuesArrayLength === 2) {\n    result = \"The array has two elements.\";\n} else if (reportValuesArrayLength === 3) {\n    result = \"The array has three elements.\";\n} else if (reportValuesArrayLength === 4) {\n    result = \"The array has four elements.\";\n} else if (reportValuesArrayLength === 5) {\n    result = \"The array has five elements.\";\n} else if (reportValuesArrayLength === 6) {\n    result = \"The array has six elements.\";\n} else if (reportValuesArrayLength === 7) {\n    result = \"The array has seven elements.\";\n} else if (reportValuesArrayLength === 8) {\n    result = \"The array has eight elements.\";\n} else if (reportValuesArrayLength === 9) {\n    result = \"The array has nine elements.\";\n} else if (reportValuesArrayLength === 10) {\n    result = \"The array has ten elements.\";\n} else {\n    result = \"The array has more than ten elements.\";\n}\n\nsetString(result);\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [ 'reportValuesArray' ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n     // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArrayAddedItem' );\n    \n\n     // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArrayRemovedItem' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArray' );\n    \n\n\n      // remove the multilink updating the value    \n      phet.paperLand.removeModelPropertyMultilink( [ 'reportValuesArray' ], scratchpad.reportValuesArrayLengthDerivedPropertyObserverId );\n      delete scratchpad.reportValuesArrayLengthDerivedPropertyObserverId;\n      \n      // remove the derived Property from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArrayLength' );\n    \n\n      // Remove the text from the view.\n      sharedData.scene.removeChild( scratchpad.parametersTextText );\n      delete scratchpad.parametersTextText;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'reportValuesArrayLength' ], scratchpad.parametersTextTextMultilinkId, {\n        otherReferences: [ 'reportValuesArray' ]\n      });\n      delete scratchpad.parametersTextTextMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Rate and Output Text', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Rate and Output Text\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const reportValuesArrayAddedItem = new phet.axon.Property( null );\n      phet.paperLand.addModelComponent( 'reportValuesArrayAddedItem', reportValuesArrayAddedItem );\n    \n\n      const reportValuesArrayRemovedItem = new phet.axon.Property( null );\n      phet.paperLand.addModelComponent( 'reportValuesArrayRemovedItem', reportValuesArrayRemovedItem );\n    \n\n      const reportValuesArray = new phet.axon.Property( [] );\n      phet.paperLand.addModelComponent( 'reportValuesArray', reportValuesArray );\n    \n\n      // DerivedProperties are actually implemented with Multilink for now because paper-land has a nice abstraction\n      // for it.\n      const reportValuesArrayLength = new phet.axon.Property( null );\n      scratchpad.reportValuesArrayLengthDerivedPropertyObserverId = phet.paperLand.addModelPropertyMultilink( [ 'reportValuesArray' ], ( reportValuesArray ) => {\n        const derivationFunction = () => {\n        \n          // should return a value based on the dependencies\n          return reportValuesArray.length;\n        };\n        reportValuesArrayLength.value = derivationFunction();\n      } );\n      phet.paperLand.addModelComponent( 'reportValuesArrayLength', reportValuesArrayLength );\n    \n\n      // Create the text and add it to the view - using RichText for nice markup support.\n      const parametersTextText = new phet.scenery.RichText( '', { fill: 'white' } );\n      \n      sharedData.scene.addChild( parametersTextText );\n      scratchpad.parametersTextText = parametersTextText;\n      \n      // Update the text when a dependency changes.\n      scratchpad.parametersTextTextMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'reportValuesArrayLength' ], ( reportValuesArrayLength ) => {\n      \n        // the additional reference constants\n        const reportValuesArray = phet.paperLand.getModelComponent('reportValuesArray').value;\n      \n        // in a local scope, define the functions that the user can use to manipulate the text\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        parametersTextText.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        parametersTextText.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        parametersTextText.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        parametersTextText.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        parametersTextText.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        parametersTextText.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        parametersTextText.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        parametersTextText.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        parametersTextText.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        parametersTextText.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const parametersTextTextViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( parametersTextText.localBounds.width || 1 ) / ( parametersTextText.localBounds.height || 1 );\n\n        const scaleX = parametersTextTextViewBounds.width / ( parametersTextText.localBounds.width || 1 );\n        const scaleY = parametersTextTextViewBounds.height / ( parametersTextText.localBounds.height || 1 );\n\n        if ( stretch ) {\n          parametersTextText.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          parametersTextText.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        parametersTextText.center = parametersTextTextViewBounds.center;\n      };\n      \n\n        const setString = ( string ) => {\n          parametersTextText.string = string;\n        };\n        \n        const setFontSize = ( size ) => {\n        \n          // RichText has no setter for size, so we need to create a new font. Use\n          // state from the old font to maintain the family.\n          const currentFont = parametersTextText.font;\n          const newFont = new phet.scenery.Font( { size: size, family: currentFont.family } );\n          parametersTextText.font = newFont;\n        };\n\n        const setTextColor = ( color ) => {\n          parametersTextText.fill = color;\n        };\n\n        const setFontFamily = ( family ) => {\n        \n          // RichText has no setter for fontFamily, so we need to create a new font. Use\n          // state from the old font to maintain the size.\n          const currentFont = parametersTextText.font;\n          const newFont = new phet.scenery.Font( { size: currentFont.size, family: family } );\n          parametersTextText.font = newFont;\n        };\n      \n\n        // the function that the user wrote to update the text      \n        setLeft(0);\nsetCenterY(0.1);\nsetFontSize(15);\n\nphet.paperLand.console.log(`array length is ${reportValuesArrayLength}`);\n\nlet result;\n\nif (reportValuesArrayLength === 0) {\n    result = \"The array is empty.\";\n} else if (reportValuesArrayLength === 1) {\n    result = `${reportValuesArray.rate1}`;\n} else if (reportValuesArrayLength === 2) {\n    result = \"The array has two elements.\";\n} else if (reportValuesArrayLength === 3) {\n    result = \"The array has three elements.\";\n} else if (reportValuesArrayLength === 4) {\n    result = \"The array has four elements.\";\n} else if (reportValuesArrayLength === 5) {\n    result = \"The array has five elements.\";\n} else if (reportValuesArrayLength === 6) {\n    result = \"The array has six elements.\";\n} else if (reportValuesArrayLength === 7) {\n    result = \"The array has seven elements.\";\n} else if (reportValuesArrayLength === 8) {\n    result = \"The array has eight elements.\";\n} else if (reportValuesArrayLength === 9) {\n    result = \"The array has nine elements.\";\n} else if (reportValuesArrayLength === 10) {\n    result = \"The array has ten elements.\";\n} else {\n    result = \"The array has more than ten elements.\";\n}\n\nsetString(result);\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [ 'reportValuesArray' ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n     // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArrayAddedItem' );\n    \n\n     // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArrayRemovedItem' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArray' );\n    \n\n\n      // remove the multilink updating the value    \n      phet.paperLand.removeModelPropertyMultilink( [ 'reportValuesArray' ], scratchpad.reportValuesArrayLengthDerivedPropertyObserverId );\n      delete scratchpad.reportValuesArrayLengthDerivedPropertyObserverId;\n      \n      // remove the derived Property from the model\n      phet.paperLand.removeModelComponent( 'reportValuesArrayLength' );\n    \n\n      // Remove the text from the view.\n      sharedData.scene.removeChild( scratchpad.parametersTextText );\n      delete scratchpad.parametersTextText;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'reportValuesArrayLength' ], scratchpad.parametersTextTextMultilinkId, {\n        otherReferences: [ 'reportValuesArray' ]\n      });\n      delete scratchpad.parametersTextTextMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Rate and Output Text', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.bf-tests.2049.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/bf-tests/programs/2049/debugInfo",
  "claimUrl": "/api/spaces/bf-tests/programs/2049/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
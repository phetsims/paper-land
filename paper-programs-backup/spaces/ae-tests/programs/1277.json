{
  "number": 1277,
  "originalCode": "// Rectangle Drawing Test\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: n/a\n// Program Description: Shape testing\n\nimportScripts('paper.js');\n\n(async () => {\n\n// some notes 06.09.23\n// it would probably make sense for a slider object (parameterized 0 to 1)\n// sitting on top of this program to scale the corresponding shape.\n// initialize the shape to be a set percentage of the display window\n// and then at slider = 1, shape is full size of display window.\n\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const backgroundColor = 'rgb( 255, 155, 100)';\n        \n    //=================================================================================================================\n\n    // Create a rectangle and add it to the view.\n    const backgroundRectangle = new phet.scenery.Rectangle( 10, 10, 400, 200, {\n      fill: backgroundColor\n    } );\n    sharedData.scene.addChild( backgroundRectangle );\n    backgroundRectangle.moveToBack();\n\n    const circleRadius = sharedData.displaySize.width/4;\n\n\n    scratchpad.circle = new phet.scenery.Circle( circleRadius, {\n    fill: 'red',\n    centerX: sharedData.displaySize.width / 2,\n    centerY: sharedData.displaySize.height / 2\n    });\n    sharedData.scene.addChild( scratchpad.circle );\n\n    // Assign to the scratchpad so that we can remove it later.\n    scratchpad.backgroundRectangle = backgroundRectangle;\n\n// really should put this on scratchpad to remove later but this is a quick test\n    scene.addChild( new phet.scenery.Line( 8, 8, 56, 56, {\n  stroke: 'red', lineWidth: 5, lineCap: 'round'\n} ) );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n          // these values are normalized within the camera window\n      phet.paperLand.console.log( 'test' );\n      \n// Find the initial paper size, and the initial radius of the circle.\n  const initialPaperWidth = positionPoints[ 2 ].x - positionPoints[ 0 ].x;\n  const initialPaperHeight = positionPoints[ 2 ].y - positionPoints[ 0 ].y;\n  const initialPaperArea = initialPaperWidth * initialPaperHeight;\n  phet.paperLand.console.log( 'initialPaperArea: ', initialPaperArea);\n\n      \n      \n      const paperWidth = positionPoints[ 2 ].x - positionPoints[ 0 ].x;\n      const paperHeight = positionPoints[ 2 ].y - positionPoints[ 0 ].y;\n      const area = paperWidth * paperHeight;\n      phet.paperLand.console.log( 'width: ', paperWidth);\n      phet.paperLand.console.log( 'height: ', paperHeight );\n     // if ( scratchpad.backgroundRectangle ){\n      //sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      //scratchpad.backgroundRectangle = null;\n   // }\n };\n\n\n\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove the background from the view.\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    if ( scratchpad.testCircle ){\n      sharedData.scene.removeChild( scratchpad.testCircle );\n      scratchpad.testCircle = null;\n    }\n\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n",
  "currentCode": "// Rectangle Drawing Test\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: n/a\n// Program Description: Shape testing\n\nimportScripts('paper.js');\n\n(async () => {\n\n// some notes 06.09.23\n// it would probably make sense for a slider object (parameterized 0 to 1)\n// sitting on top of this program to scale the corresponding shape.\n// initialize the shape to be a set percentage of the display window\n// and then at slider = 1, shape is full size of display window.\n\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const backgroundColor = 'rgb( 255, 155, 100)';\n        \n    //=================================================================================================================\n\n    // Create a rectangle and add it to the view.\n    const backgroundRectangle = new phet.scenery.Rectangle( 10, 10, 400, 200, {\n      fill: backgroundColor\n    } );\n    sharedData.scene.addChild( backgroundRectangle );\n    backgroundRectangle.moveToBack();\n\n    const circleRadius = sharedData.displaySize.width/4;\n\n\n    scratchpad.circle = new phet.scenery.Circle( circleRadius, {\n    fill: 'red',\n    centerX: sharedData.displaySize.width / 2,\n    centerY: sharedData.displaySize.height / 2\n    });\n    sharedData.scene.addChild( scratchpad.circle );\n\n    // Assign to the scratchpad so that we can remove it later.\n    scratchpad.backgroundRectangle = backgroundRectangle;\n\n// really should put this on scratchpad to remove later but this is a quick test\n    scene.addChild( new phet.scenery.Line( 8, 8, 56, 56, {\n  stroke: 'red', lineWidth: 5, lineCap: 'round'\n} ) );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n          // these values are normalized within the camera window\n      phet.paperLand.console.log( 'test' );\n      \n// Find the initial paper size, and the initial radius of the circle.\n  const initialPaperWidth = positionPoints[ 2 ].x - positionPoints[ 0 ].x;\n  const initialPaperHeight = positionPoints[ 2 ].y - positionPoints[ 0 ].y;\n  const initialPaperArea = initialPaperWidth * initialPaperHeight;\n  phet.paperLand.console.log( 'initialPaperArea: ', initialPaperArea);\n\n      \n      \n      const paperWidth = positionPoints[ 2 ].x - positionPoints[ 0 ].x;\n      const paperHeight = positionPoints[ 2 ].y - positionPoints[ 0 ].y;\n      const area = paperWidth * paperHeight;\n      phet.paperLand.console.log( 'width: ', paperWidth);\n      phet.paperLand.console.log( 'height: ', paperHeight );\n     // if ( scratchpad.backgroundRectangle ){\n      //sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      //scratchpad.backgroundRectangle = null;\n   // }\n };\n\n\n\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove the background from the view.\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    if ( scratchpad.testCircle ){\n      sharedData.scene.removeChild( scratchpad.testCircle );\n      scratchpad.testCircle = null;\n    }\n\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ae-tests.1277.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ae-tests/programs/1277/debugInfo",
  "claimUrl": "/api/spaces/ae-tests/programs/1277/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
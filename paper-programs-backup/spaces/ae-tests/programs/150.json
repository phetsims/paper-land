{
  "number": 150,
  "originalCode": "// Line Color Picker\n// Keywords: markers, callbacks, function\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\n// working example:  starts with black screen; add one marker = yellow; 2 markers = red.\n\nimportScripts('paper.js');\n\n(async () => {\n\n// look for lineColorProperty\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const model = sharedData.model;\n    if ( model.has( 'lineColorProperty' ) ) {\n      scratchpad.lineColor = model.get( 'lineColorProperty' );\n      //phet.paperLand.console.log('1048-17 getting circleColorProperty',scratchpad.circleColor);\n    }\n\n\n    // a function that can be used when markers are added or removed from the program\n    scratchpad.printColorCounts = currentMarkers => {\n      const colorCounts = _.countBy( currentMarkers, 'colorName' );\n      phet.paperLand.console.log(\n        `red: ${colorCounts[ 'red' ] || 0 }`,\n        `green: ${colorCounts[ 'green' ] || 0 }`,\n        `blue: ${colorCounts[ 'blue' ] || 0 }`,\n        `black: ${colorCounts[ 'black' ] || 0 }`\n      );\n\n      console.log( currentMarkers.length );\n    }\n\n   //=================================================================================================================\n    // Easily Changed Parameters\n\n    //scratchpad.backgroundColor = 'rgb( 0, 0, 255)';\n    //const backgroundColor = '#000000';\n    \n    //=================================================================================================================\n\n  // do a black rectangle when program is started\n  scratchpad.redValue = 0;\n  scratchpad.greenValue = 0;\n  scratchpad.blueValue = 0;\n\n    scratchpad.backgroundColor = 'rgb( 0, 0, 0)';\n    scratchpad.backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      fill: scratchpad.backgroundColor\n    } );\n    sharedData.scene.addChild( scratchpad.backgroundRectangle );\n    scratchpad.backgroundRectangle.moveToFront();\n\n  };  //end onProgramAdded\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n \n // remove the rectangle\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n// 05.10.23 - use the y value as the marker position.  The y value is parameterized relative to the top and bottom of the rectangle.\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.backgroundRectangle.setFill('rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')');\n    const model = sharedData.model;\n \n    \n    const firstMarker = currentMarkers[ 0 ];\n    if ( firstMarker ) {\n      const firstMarkerValue = (1-firstMarker.positionOnPaper.y)*255;\n      if (firstMarker.colorName == 'red') {\n        scratchpad.redValue = firstMarkerValue;\n        phet.paperLand.console.log('firstMarker redvalue is', scratchpad.redValue);\n      }; //end if firstMarker == 'red'\n      if (firstMarker.colorName == 'green'){\n        scratchpad.greenValue = firstMarkerValue;\n        phet.paperLand.console.log('firstMarker greenvalue is', scratchpad.greenValue);\n      }; // end green\n      if (firstMarker.colorName == 'blue'){\n        scratchpad.blueValue = firstMarkerValue;\n        phet.paperLand.console.log('firstMarker bluevalue is', scratchpad.blueValue);\n      }; // end blue\n      // used previously in rectangle rgb\n      //scratchpad.backgroundRectangle.setFill('rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')');\n    };  // end if(firstMarker)\n    // ***************************************************************\n\n    // 05.25.23 - generalize for multiple markers\n    const secondMarker = currentMarkers[1];\n    if (secondMarker) {\n      const secondMarkerValue = (1-secondMarker.positionOnPaper.y)*255;\n      \n      if (secondMarker.colorName == 'red') {\n        scratchpad.redValue = secondMarkerValue;\n        //phet.paperLand.console.log('secondMarker redvalue is', redValue);\n      }; //end if firstMarker == 'red'\n      if (secondMarker.colorName == 'green'){\n        scratchpad.greenValue = secondMarkerValue;\n        //phet.paperLand.console.log('secondMarker greenvalue is', greenValue);\n      }; // end green\n      if (secondMarker.colorName == 'blue'){\n        scratchpad.blueValue = secondMarkerValue;\n        //phet.paperLand.console.log('secondMarker bluevalue is', blueValue);\n      }; // end blue\n    \n      // used previously in rectangle rgb\n      //scratchpad.backgroundRectangle.setFill('rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')');\n    }; //end if secondMarker\n\n    const thirdMarker = currentMarkers[2];\n    if (thirdMarker){\n    const thirdMarkerValue = (1-thirdMarker.positionOnPaper.y)*255;\n      if (thirdMarker.colorName == 'red') {\n        scratchpad.redValue = thirdMarkerValue;\n        //phet.paperLand.console.log('secondMarker redvalue is', redValue);\n      }; //end if firstMarker == 'red'\n      if (thirdMarker.colorName == 'green'){\n        scratchpad.greenValue = thirdMarkerValue;\n        //phet.paperLand.console.log('secondMarker greenvalue is', greenValue);\n      }; // end green\n      if (thirdMarker.colorName == 'blue'){\n        scratchpad.blueValue = thirdMarkerValue;\n        //phet.paperLand.console.log('secondMarker bluevalue is', blueValue);\n      }; // end blue\n    } // end thirdMarker\n   \n   phet.paperLand.console.log('line 147');\n   //if (sharedData.model.has('circleColorProperty')){\n     //const circleColorProperty = sharedData.model.get('circleColorProperty');\n   //}\n    scratchpad.lineColor = 'rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')';\n    //phet.paperLand.console.log('circleColorProperty', circleColorProperty.value);\n    //phet.paperLand.console.log('line 154', scratchpad.circleColor);\n    //circleColorProperty.set(scratchpad.circleColor);\n    // circleColorProperty is set prog 1048 line 155\n\n  // set the color of the LINE to the color indicated by the sliders\n  if ( model.has( 'lineColorProperty' ) ) {\n      //phet.paperLand.getModelComponent( 'circleColorProperty' ).value = 'rgb(0,255,0)';\n      phet.paperLand.getModelComponent( 'lineColorProperty' ).value = scratchpad.lineColor;\n\n  }\n\n  }; // end markers moved\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw a message to the Canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n\n\n",
  "currentCode": "// Line Color Picker\n// Keywords: markers, callbacks, function\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\n// working example:  starts with black screen; add one marker = yellow; 2 markers = red.\n\nimportScripts('paper.js');\n\n(async () => {\n\n// look for lineColorProperty\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n    const model = sharedData.model;\n    if ( model.has( 'lineColorProperty' ) ) {\n      scratchpad.lineColor = model.get( 'lineColorProperty' );\n      //phet.paperLand.console.log('1048-17 getting circleColorProperty',scratchpad.circleColor);\n    }\n\n\n    // a function that can be used when markers are added or removed from the program\n    scratchpad.printColorCounts = currentMarkers => {\n      const colorCounts = _.countBy( currentMarkers, 'colorName' );\n      phet.paperLand.console.log(\n        `red: ${colorCounts[ 'red' ] || 0 }`,\n        `green: ${colorCounts[ 'green' ] || 0 }`,\n        `blue: ${colorCounts[ 'blue' ] || 0 }`,\n        `black: ${colorCounts[ 'black' ] || 0 }`\n      );\n\n      console.log( currentMarkers.length );\n    }\n\n   //=================================================================================================================\n    // Easily Changed Parameters\n\n    //scratchpad.backgroundColor = 'rgb( 0, 0, 255)';\n    //const backgroundColor = '#000000';\n    \n    //=================================================================================================================\n\n  // do a black rectangle when program is started\n  scratchpad.redValue = 0;\n  scratchpad.greenValue = 0;\n  scratchpad.blueValue = 0;\n\n    scratchpad.backgroundColor = 'rgb( 0, 0, 0)';\n    scratchpad.backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      fill: scratchpad.backgroundColor\n    } );\n    sharedData.scene.addChild( scratchpad.backgroundRectangle );\n    scratchpad.backgroundRectangle.moveToFront();\n\n  };  //end onProgramAdded\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n \n // remove the rectangle\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n// 05.10.23 - use the y value as the marker position.  The y value is parameterized relative to the top and bottom of the rectangle.\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.backgroundRectangle.setFill('rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')');\n    const model = sharedData.model;\n \n    \n    const firstMarker = currentMarkers[ 0 ];\n    if ( firstMarker ) {\n      const firstMarkerValue = (1-firstMarker.positionOnPaper.y)*255;\n      if (firstMarker.colorName == 'red') {\n        scratchpad.redValue = firstMarkerValue;\n        phet.paperLand.console.log('firstMarker redvalue is', scratchpad.redValue);\n      }; //end if firstMarker == 'red'\n      if (firstMarker.colorName == 'green'){\n        scratchpad.greenValue = firstMarkerValue;\n        phet.paperLand.console.log('firstMarker greenvalue is', scratchpad.greenValue);\n      }; // end green\n      if (firstMarker.colorName == 'blue'){\n        scratchpad.blueValue = firstMarkerValue;\n        phet.paperLand.console.log('firstMarker bluevalue is', scratchpad.blueValue);\n      }; // end blue\n      // used previously in rectangle rgb\n      //scratchpad.backgroundRectangle.setFill('rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')');\n    };  // end if(firstMarker)\n    // ***************************************************************\n\n    // 05.25.23 - generalize for multiple markers\n    const secondMarker = currentMarkers[1];\n    if (secondMarker) {\n      const secondMarkerValue = (1-secondMarker.positionOnPaper.y)*255;\n      \n      if (secondMarker.colorName == 'red') {\n        scratchpad.redValue = secondMarkerValue;\n        //phet.paperLand.console.log('secondMarker redvalue is', redValue);\n      }; //end if firstMarker == 'red'\n      if (secondMarker.colorName == 'green'){\n        scratchpad.greenValue = secondMarkerValue;\n        //phet.paperLand.console.log('secondMarker greenvalue is', greenValue);\n      }; // end green\n      if (secondMarker.colorName == 'blue'){\n        scratchpad.blueValue = secondMarkerValue;\n        //phet.paperLand.console.log('secondMarker bluevalue is', blueValue);\n      }; // end blue\n    \n      // used previously in rectangle rgb\n      //scratchpad.backgroundRectangle.setFill('rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')');\n    }; //end if secondMarker\n\n    const thirdMarker = currentMarkers[2];\n    if (thirdMarker){\n    const thirdMarkerValue = (1-thirdMarker.positionOnPaper.y)*255;\n      if (thirdMarker.colorName == 'red') {\n        scratchpad.redValue = thirdMarkerValue;\n        //phet.paperLand.console.log('secondMarker redvalue is', redValue);\n      }; //end if firstMarker == 'red'\n      if (thirdMarker.colorName == 'green'){\n        scratchpad.greenValue = thirdMarkerValue;\n        //phet.paperLand.console.log('secondMarker greenvalue is', greenValue);\n      }; // end green\n      if (thirdMarker.colorName == 'blue'){\n        scratchpad.blueValue = thirdMarkerValue;\n        //phet.paperLand.console.log('secondMarker bluevalue is', blueValue);\n      }; // end blue\n    } // end thirdMarker\n   \n   phet.paperLand.console.log('line 147');\n   //if (sharedData.model.has('circleColorProperty')){\n     //const circleColorProperty = sharedData.model.get('circleColorProperty');\n   //}\n    scratchpad.lineColor = 'rgb('+ scratchpad.redValue + ','+ scratchpad.greenValue +','+ scratchpad.blueValue +')';\n    //phet.paperLand.console.log('circleColorProperty', circleColorProperty.value);\n    //phet.paperLand.console.log('line 154', scratchpad.circleColor);\n    //circleColorProperty.set(scratchpad.circleColor);\n    // circleColorProperty is set prog 1048 line 155\n\n  // set the color of the LINE to the color indicated by the sliders\n  if ( model.has( 'lineColorProperty' ) ) {\n      //phet.paperLand.getModelComponent( 'circleColorProperty' ).value = 'rgb(0,255,0)';\n      phet.paperLand.getModelComponent( 'lineColorProperty' ).value = scratchpad.lineColor;\n\n  }\n\n  }; // end markers moved\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw a message to the Canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ae-tests.150.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ae-tests/programs/150/debugInfo",
  "claimUrl": "/api/spaces/ae-tests/programs/150/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
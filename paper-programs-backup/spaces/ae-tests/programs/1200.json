{
  "number": 1200,
  "originalCode": "// Circle location and radius\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: n/a\n// Program Description: allows a marker to locate the center of a circle relative to the \n// position of the marker on the paper.  Parameterized in the x and y directions from 0 to 1\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const backgroundColor = 'rgb( 255, 155, 100)';\n    scratchpad.circleColor = '#FFFFFF';\n    scratchpad.centerX = sharedData.displaySize.width / 2;\n    scratchpad.centerY = sharedData.displaySize.height / 2;\n    \n    \n    //=================================================================================================================\n\n  // Create a rectangle and add it to the view.\n   // const backgroundRectangle = new phet.scenery.Rectangle( 10, 10, 400, 200, {\n   //   fill: backgroundColor\n   // } );\n   // sharedData.scene.addChild( backgroundRectangle );\n   // backgroundRectangle.moveToBack();\n\n  // Create a circle and add it to the view.  \n  //scratchpad.circleRadius = sharedData.displaySize.height/2;\n\n    //scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.centerX, y:scratchpad.centerY,\n      //fill: scratchpad.circleColor\n    //} );\n    //sharedData.scene.addChild(scratchpad.testCircle );\n\n  };\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove the background from the view.\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    if ( scratchpad.testCircle ){\n      sharedData.scene.removeChild( scratchpad.testCircle );\n      scratchpad.testCircle = null;\n    }\n\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    const firstMarker = currentMarkers[0];\n    if (firstMarker){\n      if (firstMarker.colorName == 'red'){\n      const firstMarkerValueY = (firstMarker.positionOnPaper.y);\n      const firstMarkerValueX = (firstMarker.positionOnPaper.x);\n      //phet.paperLand.console.log('firstMarker is', firstMarkerValue);\n    if ( scratchpad.testCircle ){\n    sharedData.scene.removeChild( scratchpad.testCircle );\n    }\n    scratchpad.circleRadius = 25;\n    scratchpad.circleCenterX = sharedData.displaySize.width * firstMarkerValueX;\n    scratchpad.circleCenterY = sharedData.displaySize.height * firstMarkerValueY;\n    //scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.circleCenterX, y:scratchpad.circleCenterY,\n      //fill: scratchpad.circleColor\n    //} );\n    //sharedData.scene.addChild(scratchpad.testCircle );\n\n      // do the thing to scale the circle\n      // the marker is parameterized from 0 to 1 on the y-axis\n      }; // end if firstMarker.colorName == red\n    \n    if (firstMarker.colorName == 'blue'){\n    };\n\n    }; //end if (firstMarker)\n\n  const secondMarker = currentMarkers[1];\n    if (secondMarker){\n\n      const secondMarkerValueY = (secondMarker.positionOnPaper.y);\n      const secondMarkerValueX = (secondMarker.positionOnPaper.x);\n\n      if (secondMarker.colorName == 'blue'){\n        phet.paperLand.console.log('blue marker added');\n        scratchpad.circleOuterX = sharedData.displaySize.width * secondMarkerValueX;\n        scratchpad.circleOuterY = sharedData.displaySize.height * secondMarkerValueY;\n        // measure distance between center and blue marker to determine radius\n        scratchpad.circleRadius = Math.hypot(scratchpad.circleCenterX-scratchpad.circleOuterX, \n        scratchpad.circleCenterY-scratchpad.circleOuterY);\n        //phet.paperLand.console.log('markerDistance', markerDistance);\n\n      }; // end if secondMarker is blue\n\n    }; //end if secondMarker\n\n    scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.circleCenterX, y:scratchpad.circleCenterY,\n      fill: scratchpad.circleColor\n    } );\n    sharedData.scene.addChild(scratchpad.testCircle );\n\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n\n",
  "currentCode": "// Circle location and radius\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: n/a\n// Program Description: allows a marker to locate the center of a circle relative to the \n// position of the marker on the paper.  Parameterized in the x and y directions from 0 to 1\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const backgroundColor = 'rgb( 255, 155, 100)';\n    scratchpad.circleColor = '#FFFFFF';\n    scratchpad.centerX = sharedData.displaySize.width / 2;\n    scratchpad.centerY = sharedData.displaySize.height / 2;\n    \n    \n    //=================================================================================================================\n\n  // Create a rectangle and add it to the view.\n   // const backgroundRectangle = new phet.scenery.Rectangle( 10, 10, 400, 200, {\n   //   fill: backgroundColor\n   // } );\n   // sharedData.scene.addChild( backgroundRectangle );\n   // backgroundRectangle.moveToBack();\n\n  // Create a circle and add it to the view.  \n  //scratchpad.circleRadius = sharedData.displaySize.height/2;\n\n    //scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.centerX, y:scratchpad.centerY,\n      //fill: scratchpad.circleColor\n    //} );\n    //sharedData.scene.addChild(scratchpad.testCircle );\n\n  };\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Remove the background from the view.\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    if ( scratchpad.testCircle ){\n      sharedData.scene.removeChild( scratchpad.testCircle );\n      scratchpad.testCircle = null;\n    }\n\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    const firstMarker = currentMarkers[0];\n    if (firstMarker){\n      if (firstMarker.colorName == 'red'){\n      const firstMarkerValueY = (firstMarker.positionOnPaper.y);\n      const firstMarkerValueX = (firstMarker.positionOnPaper.x);\n      //phet.paperLand.console.log('firstMarker is', firstMarkerValue);\n    if ( scratchpad.testCircle ){\n    sharedData.scene.removeChild( scratchpad.testCircle );\n    }\n    scratchpad.circleRadius = 25;\n    scratchpad.circleCenterX = sharedData.displaySize.width * firstMarkerValueX;\n    scratchpad.circleCenterY = sharedData.displaySize.height * firstMarkerValueY;\n    //scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.circleCenterX, y:scratchpad.circleCenterY,\n      //fill: scratchpad.circleColor\n    //} );\n    //sharedData.scene.addChild(scratchpad.testCircle );\n\n      // do the thing to scale the circle\n      // the marker is parameterized from 0 to 1 on the y-axis\n      }; // end if firstMarker.colorName == red\n    \n    if (firstMarker.colorName == 'blue'){\n    };\n\n    }; //end if (firstMarker)\n\n  const secondMarker = currentMarkers[1];\n    if (secondMarker){\n\n      const secondMarkerValueY = (secondMarker.positionOnPaper.y);\n      const secondMarkerValueX = (secondMarker.positionOnPaper.x);\n\n      if (secondMarker.colorName == 'blue'){\n        phet.paperLand.console.log('blue marker added');\n        scratchpad.circleOuterX = sharedData.displaySize.width * secondMarkerValueX;\n        scratchpad.circleOuterY = sharedData.displaySize.height * secondMarkerValueY;\n        // measure distance between center and blue marker to determine radius\n        scratchpad.circleRadius = Math.hypot(scratchpad.circleCenterX-scratchpad.circleOuterX, \n        scratchpad.circleCenterY-scratchpad.circleOuterY);\n        //phet.paperLand.console.log('markerDistance', markerDistance);\n\n      }; // end if secondMarker is blue\n\n    }; //end if secondMarker\n\n    scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.circleCenterX, y:scratchpad.circleCenterY,\n      fill: scratchpad.circleColor\n    } );\n    sharedData.scene.addChild(scratchpad.testCircle );\n\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ae-tests.1200.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ae-tests/programs/1200/debugInfo",
  "claimUrl": "/api/spaces/ae-tests/programs/1200/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 116,
  "originalCode": "// Altitude: Voice Altitude Value - Copy\n// Keywords: altitude, voicing, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Create new components here!\n    const utterance = new phet.utteranceQueue.Utterance( {\n      priority: 5\n    } );\n\n    let previousDescribedAltitude = 0;\n\n    const altitudeVoicingListener = ( newAltitude ) => {\n      const valueChange = Math.abs( newAltitude - previousDescribedAltitude );\n\n      // if the value changed enough to voicing something new...\n      if ( valueChange > 15 ) {\n\n        let voicingContent = '';\n        if ( newAltitude > 88 ) {\n          voicingContent = 'Ocean surface!';\n        }\n        else if ( newAltitude > 70 ) {\n          voicingContent = 'Orcas and scuba divers.  Swim with the fishes!';\n        }\n        else if ( newAltitude > 50 ) {\n          voicingContent = 'Oarfish!';\n        }\n        else if ( newAltitude > 40 ) {\n          voicingContent = 'Watch for the giant squid!';\n        }\n        else if ( newAltitude > 20 ) {\n          voicingContent = 'Resting place of the Titanic.';\n        }\n        else {\n          voicingContent = 'Hideous scary deep sea creatures!';\n        }\n\n        utterance.alert = voicingContent;\n        phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n\n        previousDescribedAltitude = newAltitude;\n      }\n    };\n\n    scratchpad.altitudeObserverId = phet.paperLand.addModelPropertyLink( 'altitudeProperty', altitudeVoicingListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelPropertyLink( 'altitudeProperty', scratchpad.altitudeObserverId );\n    delete scratchpad.altitudeObserverId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Voice', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// Altitude: Voice Altitude Value - Copy\n// Keywords: altitude, voicing, view\n// ------------------------------- //\n// Required Programs (dependencies) Altitude: Model\n// Recommended Programs: Altitude prefix\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // Create new components here!\n    const utterance = new phet.utteranceQueue.Utterance( {\n      priority: 5\n    } );\n\n    let previousDescribedAltitude = 0;\n\n    const altitudeVoicingListener = ( newAltitude ) => {\n      const valueChange = Math.abs( newAltitude - previousDescribedAltitude );\n\n      // if the value changed enough to voicing something new...\n      if ( valueChange > 15 ) {\n\n        let voicingContent = '';\n        if ( newAltitude > 88 ) {\n          voicingContent = 'Ocean surface!';\n        }\n        else if ( newAltitude > 70 ) {\n          voicingContent = 'Orcas and scuba divers.  Swim with the fishes!';\n        }\n        else if ( newAltitude > 50 ) {\n          voicingContent = 'Oarfish!';\n        }\n        else if ( newAltitude > 40 ) {\n          voicingContent = 'Watch for the giant squid!';\n        }\n        else if ( newAltitude > 20 ) {\n          voicingContent = 'Resting place of the Titanic.';\n        }\n        else {\n          voicingContent = 'Hideous scary deep sea creatures!';\n        }\n\n        utterance.alert = voicingContent;\n        phet.scenery.voicingUtteranceQueue.addToBack( utterance );\n\n        previousDescribedAltitude = newAltitude;\n      }\n    };\n\n    scratchpad.altitudeObserverId = phet.paperLand.addModelPropertyLink( 'altitudeProperty', altitudeVoicingListener );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n    // No need to observe paper position for this program! However, you could describe the altitude\n    // based on positionPoints instead of altitudeProperty if you wanted to.\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelPropertyLink( 'altitudeProperty', scratchpad.altitudeObserverId );\n    delete scratchpad.altitudeObserverId;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Altitude', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Voice', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ae-tests.116.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ae-tests/programs/116/debugInfo",
  "claimUrl": "/api/spaces/ae-tests/programs/116/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 83,
  "originalCode": "// Line: Model\n// Keywords: line, model, property\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs: Line prefix\n// Program Description: Contains the model properties for Line\n// and initial values. You can change whether this paper controls the value directly.\n\n// Required Programs (dependencies): [none]\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n\n  //-------------------------------------------------------------------\n  // Projector code\n  //-------------------------------------------------------------------\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // note the use of axon here\n    const myLineColor = new phet.axon.Property('rgb(255,0,0)');\n\n    phet.paperLand.addModelComponent( 'lineColorProperty', myLineColor );\n\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // removeModelComponent removes from the global model and disposes\n    phet.paperLand.removeModelComponent( 'lineColorProperty' );\n\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Density', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Model', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n",
  "currentCode": "// Line: Model\n// Keywords: line, model, property\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs: Line prefix\n// Program Description: Contains the model properties for Line\n// and initial values. You can change whether this paper controls the value directly.\n\n// Required Programs (dependencies): [none]\n// Program Description:\n\nimportScripts('paper.js');\n\n(async () => {\n\n\n  //-------------------------------------------------------------------\n  // Projector code\n  //-------------------------------------------------------------------\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Global model for all programs\n    const model = sharedData.model;\n\n    // note the use of axon here\n    const myLineColor = new phet.axon.Property('rgb(255,0,0)');\n\n    phet.paperLand.addModelComponent( 'lineColorProperty', myLineColor );\n\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // removeModelComponent removes from the global model and disposes\n    phet.paperLand.removeModelComponent( 'lineColorProperty' );\n\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Density', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Model', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ae-tests.83.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ae-tests/programs/83/debugInfo",
  "claimUrl": "/api/spaces/ae-tests/programs/83/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 85,
  "originalCode": "// Rectangle location, size, color\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: Model, Color Picker\n// Recommended Programs: n/a\n// Program Description: Red marker positions the upper left vertex; Blue marker lower right\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const backgroundColor = 'rgb( 255, 155, 100)';\n    scratchpad.rectColor = '#000000';\n    scratchpad.centerX = sharedData.displaySize.width / 2;\n    scratchpad.centerY = sharedData.displaySize.height / 2;\n  };\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    if ( scratchpad.testRectangle ){\n      sharedData.scene.removeChild( scratchpad.testRectangle );\n      scratchpad.testRectangle = null;\n    }\n    // add back for color\n    //phet.paperLand.removeModelComponent( 'circleColorProperty' );\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n  //scratchpad.printColorCounts( currentMarkers );\n  // 2 markers on the plane - red for positioning and blue for lower corner\n    \n\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    \n    const firstMarker = currentMarkers[0];\n    if (firstMarker){\n      const firstMarkerValueY = (firstMarker.positionOnPaper.y);\n      const firstMarkerValueX = (firstMarker.positionOnPaper.x);\n\n      if (firstMarker.colorName == 'red'){\n      phet.paperLand.console.log('firstMarker is', firstMarker);\n\n    if ( scratchpad.testRectangle ){\n    sharedData.scene.removeChild( scratchpad.testRectangle );\n    }\n    scratchpad.rectangleOriginX = sharedData.displaySize.width * firstMarkerValueX;\n    scratchpad.rectangleOriginY = sharedData.displaySize.height * firstMarkerValueY;\n      phet.paperLand.console.log('rectangleOriginX', scratchpad.rectangleOriginX);\n      phet.paperLand.console.log('rectangleOriginY', scratchpad.rectangleOriginY);\n\n    //scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.circleCenterX, y:scratchpad.circleCenterY,\n      //fill: scratchpad.circleColor\n    //} );\n    //sharedData.scene.addChild(scratchpad.testCircle );\n\n      // do the thing to scale the circle\n      // the marker is parameterized from 0 to 1 on the y-axis\n      }; // end if firstMarker.colorName == red\n    \n    if (firstMarker.colorName == 'blue'){\n      // the blue marker is the lower corner\n      scratchpad.rectangleLowerCornerX = sharedData.displaySize.width * firstMarkerValueX;\n      scratchpad.rectangleLowerCornerY = sharedData.displaySize.height * firstMarkerValueY;\n    }; // end firstMarker is blue\n\n    }; //end if (firstMarker)\n\n  const secondMarker = currentMarkers[1];\n    if (secondMarker){\n\n      const secondMarkerValueY = (secondMarker.positionOnPaper.y);\n      const secondMarkerValueX = (secondMarker.positionOnPaper.x);\n\n      if (secondMarker.colorName == 'blue'){\n        phet.paperLand.console.log('blue marker added');\n        scratchpad.rectangleLowerCornerX = sharedData.displaySize.width * secondMarkerValueX;\n        scratchpad.rectangleLowerCornerY = sharedData.displaySize.height * secondMarkerValueY;\n      }; // end if secondMarker is blue\n\n      // length and width calculations - need to take absolute value\n      scratchpad.rectangleLength = Math.abs(scratchpad.rectangleOriginX-scratchpad.rectangleLowerCornerX);\n      scratchpad.rectangleWidth = Math.abs(scratchpad.rectangleOriginY-scratchpad.rectangleLowerCornerY);\n      phet.paperLand.console.log('length is', scratchpad.rectangleLength);\n      phet.paperLand.console.log('width is', scratchpad.rectangleWidth);\n\n\n    }; //end if secondMarker\n\n// add in later for color\n    //const model = sharedData.model;\n    //if ( model.has( 'rectColorProperty' ) ) {\n      //phet.paperLand.console.log('inside circleColorProperty in prog 1859');\n    //  scratchpad.rectColor = model.get( 'rectColorProperty' );\n    //}\n\n      phet.paperLand.console.log('line 105 before calling rectangle');\n    scratchpad.testRectangle = new phet.scenery.Rectangle(scratchpad.rectangleOriginX, scratchpad.rectangleOriginY, scratchpad.rectangleLength, scratchpad.rectangleWidth, {\n          fill: '#000000'} );\n    sharedData.scene.addChild(scratchpad.testRectangle );\n\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n\n\n\n",
  "currentCode": "// Rectangle location, size, color\n// Keywords: simple, view, background, color\n// =============================== //\n// Program Dependencies: Model, Color Picker\n// Recommended Programs: n/a\n// Program Description: Red marker positions the upper left vertex; Blue marker lower right\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    //=================================================================================================================\n    // Easily Changed Parameters\n\n    const backgroundColor = 'rgb( 255, 155, 100)';\n    scratchpad.rectColor = '#000000';\n    scratchpad.centerX = sharedData.displaySize.width / 2;\n    scratchpad.centerY = sharedData.displaySize.height / 2;\n  };\n \n  // Called when the program is removed.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    if ( scratchpad.testRectangle ){\n      sharedData.scene.removeChild( scratchpad.testRectangle );\n      scratchpad.testRectangle = null;\n    }\n    // add back for color\n    //phet.paperLand.removeModelComponent( 'circleColorProperty' );\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n  //scratchpad.printColorCounts( currentMarkers );\n  // 2 markers on the plane - red for positioning and blue for lower corner\n    \n\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    //scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    \n    const firstMarker = currentMarkers[0];\n    if (firstMarker){\n      const firstMarkerValueY = (firstMarker.positionOnPaper.y);\n      const firstMarkerValueX = (firstMarker.positionOnPaper.x);\n\n      if (firstMarker.colorName == 'red'){\n      phet.paperLand.console.log('firstMarker is', firstMarker);\n\n    if ( scratchpad.testRectangle ){\n    sharedData.scene.removeChild( scratchpad.testRectangle );\n    }\n    scratchpad.rectangleOriginX = sharedData.displaySize.width * firstMarkerValueX;\n    scratchpad.rectangleOriginY = sharedData.displaySize.height * firstMarkerValueY;\n      phet.paperLand.console.log('rectangleOriginX', scratchpad.rectangleOriginX);\n      phet.paperLand.console.log('rectangleOriginY', scratchpad.rectangleOriginY);\n\n    //scratchpad.testCircle = new phet.scenery.Circle( scratchpad.circleRadius, {x:scratchpad.circleCenterX, y:scratchpad.circleCenterY,\n      //fill: scratchpad.circleColor\n    //} );\n    //sharedData.scene.addChild(scratchpad.testCircle );\n\n      // do the thing to scale the circle\n      // the marker is parameterized from 0 to 1 on the y-axis\n      }; // end if firstMarker.colorName == red\n    \n    if (firstMarker.colorName == 'blue'){\n      // the blue marker is the lower corner\n      scratchpad.rectangleLowerCornerX = sharedData.displaySize.width * firstMarkerValueX;\n      scratchpad.rectangleLowerCornerY = sharedData.displaySize.height * firstMarkerValueY;\n    }; // end firstMarker is blue\n\n    }; //end if (firstMarker)\n\n  const secondMarker = currentMarkers[1];\n    if (secondMarker){\n\n      const secondMarkerValueY = (secondMarker.positionOnPaper.y);\n      const secondMarkerValueX = (secondMarker.positionOnPaper.x);\n\n      if (secondMarker.colorName == 'blue'){\n        phet.paperLand.console.log('blue marker added');\n        scratchpad.rectangleLowerCornerX = sharedData.displaySize.width * secondMarkerValueX;\n        scratchpad.rectangleLowerCornerY = sharedData.displaySize.height * secondMarkerValueY;\n      }; // end if secondMarker is blue\n\n      // length and width calculations - need to take absolute value\n      scratchpad.rectangleLength = Math.abs(scratchpad.rectangleOriginX-scratchpad.rectangleLowerCornerX);\n      scratchpad.rectangleWidth = Math.abs(scratchpad.rectangleOriginY-scratchpad.rectangleLowerCornerY);\n      phet.paperLand.console.log('length is', scratchpad.rectangleLength);\n      phet.paperLand.console.log('width is', scratchpad.rectangleWidth);\n\n\n    }; //end if secondMarker\n\n// add in later for color\n    //const model = sharedData.model;\n    //if ( model.has( 'rectColorProperty' ) ) {\n      //phet.paperLand.console.log('inside circleColorProperty in prog 1859');\n    //  scratchpad.rectColor = model.get( 'rectColorProperty' );\n    //}\n\n      phet.paperLand.console.log('line 105 before calling rectangle');\n    scratchpad.testRectangle = new phet.scenery.Rectangle(scratchpad.rectangleOriginX, scratchpad.rectangleOriginY, scratchpad.rectangleLength, scratchpad.rectangleWidth, {\n          fill: '#000000'} );\n    sharedData.scene.addChild(scratchpad.testRectangle );\n\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Add text to the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Add', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ae-tests.85.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ae-tests/programs/85/debugInfo",
  "claimUrl": "/api/spaces/ae-tests/programs/85/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
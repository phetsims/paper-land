{
  "number": 776,
  "originalCode": "// Multi Slider Generic\n// Keywords: markers, callbacks, function\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\n// working example:  starts with black screen; add one marker = yellow; 2 markers = red.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // a function that can be used when markers are added or removed from the program\n    scratchpad.printColorCounts = currentMarkers => {\n      const colorCounts = _.countBy( currentMarkers, 'colorName' );\n      phet.paperLand.console.log(\n        `red: ${colorCounts[ 'red' ] || 0 }`,\n        `green: ${colorCounts[ 'green' ] || 0 }`,\n        `blue: ${colorCounts[ 'blue' ] || 0 }`,\n        `black: ${colorCounts[ 'black' ] || 0 }`\n      );\n\n      console.log( currentMarkers.length );\n    }\n\n   //=================================================================================================================\n    // Easily Changed Parameters\n\n    //scratchpad.backgroundColor = 'rgb( 0, 0, 255)';\n    //const backgroundColor = '#000000';\n    \n    //=================================================================================================================\n\n    scratchpad.backgroundColor = 'rgb( 0, 0, 0)';\n    scratchpad.backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      fill: scratchpad.backgroundColor\n    } );\n    sharedData.scene.addChild( scratchpad.backgroundRectangle );\n    scratchpad.backgroundRectangle.moveToFront();\n\n  };  //end onProgramAdded\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n \n // remove the rectangle\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n// 05.10.23 - use the y value as the marker position.  The y value is parameterized relative to the top and bottom of the rectangle.\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    const firstMarker = currentMarkers[ 0 ];\n    if ( firstMarker ) {\n      const firstMarkerHeight = 1 - firstMarker.positionOnPaper.y;\n      phet.paperLand.console.log( firstMarkerHeight, firstMarker.colorName );\n \n\n    // then update the rectangle\n    //scratchpad.backgroundColor = 'rgb( 0, 0, 0)';\n    //scratchpad.backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      //fill: scratchpad.backgroundColor\n    //} );\n    //sharedData.scene.addChild( scratchpad.backgroundRectangle );\n    //scratchpad.backgroundRectangle.moveToFront();\n    scratchpad.backgroundRectangle.setFill('rgb(255,255,0)');\n    }  // end if(firstMarker)\n    // ***************************************************************\n\n    // 05.25.23 - generalize for multiple markers\n    const secondMarker = currentMarkers[1];\n    if (secondMarker) {\n      const secondMarkerHeight = 1 - secondMarker.positionOnPaper.y;\n      phet.paperLand.console.log( secondMarkerHeight, secondMarker.colorName );\n      // so it looks like setFill will update correctly\n      scratchpad.backgroundRectangle.setFill('rgb(255,0,0)');\n    }\n\n    const thirdMarker = currentMarkers[2];\n    if (thirdMarker){\n      const thirdMarkerHeight = 1 - thirdMarker.positionOnPaper.y;\n      phet.paperLand.console.log( thirdMarkerHeight, thirdMarker.colorName );\n    }\n  };\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw a message to the Canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n",
  "currentCode": "// Multi Slider Generic\n// Keywords: markers, callbacks, function\n// ------------------------------- //\n// Required Programs (dependencies) [none]\n// Recommended Programs (work well with no modifications, but not necessary) [none]\n\n// working example:  starts with black screen; add one marker = yellow; 2 markers = red.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // a function that can be used when markers are added or removed from the program\n    scratchpad.printColorCounts = currentMarkers => {\n      const colorCounts = _.countBy( currentMarkers, 'colorName' );\n      phet.paperLand.console.log(\n        `red: ${colorCounts[ 'red' ] || 0 }`,\n        `green: ${colorCounts[ 'green' ] || 0 }`,\n        `blue: ${colorCounts[ 'blue' ] || 0 }`,\n        `black: ${colorCounts[ 'black' ] || 0 }`\n      );\n\n      console.log( currentMarkers.length );\n    }\n\n   //=================================================================================================================\n    // Easily Changed Parameters\n\n    //scratchpad.backgroundColor = 'rgb( 0, 0, 255)';\n    //const backgroundColor = '#000000';\n    \n    //=================================================================================================================\n\n    scratchpad.backgroundColor = 'rgb( 0, 0, 0)';\n    scratchpad.backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      fill: scratchpad.backgroundColor\n    } );\n    sharedData.scene.addChild( scratchpad.backgroundRectangle );\n    scratchpad.backgroundRectangle.moveToFront();\n\n  };  //end onProgramAdded\n\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n \n // remove the rectangle\n    if ( scratchpad.backgroundRectangle ){\n      sharedData.scene.removeChild( scratchpad.backgroundRectangle );\n      scratchpad.backgroundRectangle = null;\n    }\n    else {\n      alert( 'Error: backgroundRectangle node not found in scratchpad data.' );\n    }\n  };\n\n  const onProgramMarkersAdded = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n  const onProgramMarkersRemoved = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    scratchpad.printColorCounts( currentMarkers );\n  };\n\n// 05.10.23 - use the y value as the marker position.  The y value is parameterized relative to the top and bottom of the rectangle.\n  const onProgramMarkersChangedPosition = ( programNumber, programPoints, scratchpad, sharedData, currentMarkers ) => {\n    const firstMarker = currentMarkers[ 0 ];\n    if ( firstMarker ) {\n      const firstMarkerHeight = 1 - firstMarker.positionOnPaper.y;\n      phet.paperLand.console.log( firstMarkerHeight, firstMarker.colorName );\n \n\n    // then update the rectangle\n    //scratchpad.backgroundColor = 'rgb( 0, 0, 0)';\n    //scratchpad.backgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n      //fill: scratchpad.backgroundColor\n    //} );\n    //sharedData.scene.addChild( scratchpad.backgroundRectangle );\n    //scratchpad.backgroundRectangle.moveToFront();\n    scratchpad.backgroundRectangle.setFill('rgb(255,255,0)');\n    }  // end if(firstMarker)\n    // ***************************************************************\n\n    // 05.25.23 - generalize for multiple markers\n    const secondMarker = currentMarkers[1];\n    if (secondMarker) {\n      const secondMarkerHeight = 1 - secondMarker.positionOnPaper.y;\n      phet.paperLand.console.log( secondMarkerHeight, secondMarker.colorName );\n      // so it looks like setFill will update correctly\n      scratchpad.backgroundRectangle.setFill('rgb(255,0,0)');\n    }\n\n    const thirdMarker = currentMarkers[2];\n    if (thirdMarker){\n      const thirdMarkerHeight = 1 - thirdMarker.positionOnPaper.y;\n      phet.paperLand.console.log( thirdMarkerHeight, thirdMarker.colorName );\n    }\n  };\n\n   // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString()\n      }\n    }\n  } );\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw a message to the Canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('PhET', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(155,25,34)';\n  ctx.fillText('image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.ae-tests.776.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/ae-tests/programs/776/debugInfo",
  "claimUrl": "/api/spaces/ae-tests/programs/776/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 484,
  "originalCode": "// Light 4\n// Keywords: \n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: \n// Program Description: This is a light. When connected to the source, it will light up.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Create a Scenery image node for a light and add it to the scene\n    const onImageElement = document.createElement( 'img' );\n    onImageElement.setAttribute( 'src', 'media/images/on-bulb.png' );\n    const onImageNode = new phet.scenery.Image( onImageElement, {\n      maxWidth: 80,\n\n      // initially visible until there is a connection\n      visible: false\n    } );\n    sharedData.scene.addChild( onImageNode );\n    scratchpad.onImageNode = onImageNode;\n\n    const offImageElement = document.createElement( 'img' );\n    offImageElement.setAttribute( 'src', 'media/images/off-bulb.png' );\n    const offImageNode = new phet.scenery.Image( offImageElement, {\n      maxWidth: 80\n    } );\n    sharedData.scene.addChild( offImageNode );\n    scratchpad.offImageNode = offImageNode;\n\n    scratchpad.visibilityListener = isLit => {\n      scratchpad.onImageNode.visible = isLit;\n      scratchpad.offImageNode.visible = !isLit;\n    };\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'connectionElementConstructor',\n    elementConstructor => {\n      \n      // constructor is available, add this element\n      const connectionElement = new elementConstructor( false );\n      phet.paperLand.addModelComponent( 'element4', connectionElement );\n\n      // update the image when lit Property changes\n      connectionElement.isLitProperty.link( scratchpad.visibilityListener );\n\n      phet.paperLand.setProgramData( paperProgramNumber, 'connectionElement', connectionElement );\n    },\n    () => {\n      // constructor is no longer available, remove the element\n      \n      // if connected to the data structure, remove from the parent\n      const connectionElement = phet.paperLand.getModelComponent( 'element4' );\n      if ( connectionElement ) {\n        connectionElement.parent && connectionElement.parent.removeChild( connectionElement );\n\n        // need to unlink because the images will be unavailable\n        connectionElement.isLitProperty.unlink( scratchpad.visibilityListener );\n\n        phet.paperLand.removeModelComponent( 'element4' );\n        phet.paperLand.removeProgramData( 'element4' );\n      }\n    } );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // remove the images\n    sharedData.scene.removeChild( scratchpad.offImageNode );\n    delete scratchpad.offImageNode;\n\n    sharedData.scene.removeChild( scratchpad.onImageNode );\n    delete scratchpad.onImageNode;\n\n    // destroy the model component, removing visibility listeners first\n    const element = phet.paperLand.getModelComponent( 'element4' );\n    if ( element ) {\n      element.isLitProperty.unlink( scratchpad.visibilityListener );\n      delete scratchpad.visibilityListener;\n\n      element.dispose();\n\n      phet.paperLand.removeModelComponent( 'element4' );\n    }\n\n    // remove program specific data\n    phet.paperLand.removeProgramData( paperProgramNumber, 'connectionElement' );\n\n    // remove the connection element constructor observer\n    phet.paperLand.removeModelObserver( 'connectionElementConstructor', scratchpad.observerId );\n  };\n\n  const onProgramAdjacent = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n\n    // Look at the other program and see if it has a ConnectionElement to connect to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n\n    if ( otherConnectionElement ) {\n\n      // if it does, add this connection element as a child\n      otherConnectionElement.addChild( phet.paperLand.getModelComponent( 'element4' ) );\n    }\n  };\n\n  const onProgramSeparated = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} detached from ${programNumber} ${direction}` );\n\n    // Look at the other program and see if it has a ConnectionElement that we are attached to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n    if ( otherConnectionElement ) {\n      const thisElement = phet.paperLand.getModelComponent( 'element4' );\n\n      if ( otherConnectionElement.children.includes( thisElement ) ) {\n        otherConnectionElement.removeChild( thisElement );\n      }\n    }\n  };\n\n  // Called when the program moves.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    // Center the image based on the position of the paper.\n    const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n    const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n    scratchpad.onImageNode.centerX = paperCenterX * sharedData.displaySize.width;\n    scratchpad.onImageNode.centerY = paperCenterY * sharedData.displaySize.height;\n\n    scratchpad.offImageNode.centerX = paperCenterX * sharedData.displaySize.width;\n    scratchpad.offImageNode.centerY = paperCenterY * sharedData.displaySize.height;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Whisker A', canvas.width / 2, canvas.height / 2 - 10);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n})();\n\n\n\n",
  "currentCode": "// Light 4\n// Keywords: \n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: \n// Program Description: This is a light. When connected to the source, it will light up.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Create a Scenery image node for a light and add it to the scene\n    const onImageElement = document.createElement( 'img' );\n    onImageElement.setAttribute( 'src', 'media/images/on-bulb.png' );\n    const onImageNode = new phet.scenery.Image( onImageElement, {\n      maxWidth: 80,\n\n      // initially visible until there is a connection\n      visible: false\n    } );\n    sharedData.scene.addChild( onImageNode );\n    scratchpad.onImageNode = onImageNode;\n\n    const offImageElement = document.createElement( 'img' );\n    offImageElement.setAttribute( 'src', 'media/images/off-bulb.png' );\n    const offImageNode = new phet.scenery.Image( offImageElement, {\n      maxWidth: 80\n    } );\n    sharedData.scene.addChild( offImageNode );\n    scratchpad.offImageNode = offImageNode;\n\n    scratchpad.visibilityListener = isLit => {\n      scratchpad.onImageNode.visible = isLit;\n      scratchpad.offImageNode.visible = !isLit;\n    };\n\n    scratchpad.observerId = phet.paperLand.addModelObserver( 'connectionElementConstructor',\n    elementConstructor => {\n      \n      // constructor is available, add this element\n      const connectionElement = new elementConstructor( false );\n      phet.paperLand.addModelComponent( 'element4', connectionElement );\n\n      // update the image when lit Property changes\n      connectionElement.isLitProperty.link( scratchpad.visibilityListener );\n\n      phet.paperLand.setProgramData( paperProgramNumber, 'connectionElement', connectionElement );\n    },\n    () => {\n      // constructor is no longer available, remove the element\n      \n      // if connected to the data structure, remove from the parent\n      const connectionElement = phet.paperLand.getModelComponent( 'element4' );\n      if ( connectionElement ) {\n        connectionElement.parent && connectionElement.parent.removeChild( connectionElement );\n\n        // need to unlink because the images will be unavailable\n        connectionElement.isLitProperty.unlink( scratchpad.visibilityListener );\n\n        phet.paperLand.removeModelComponent( 'element4' );\n        phet.paperLand.removeProgramData( 'element4' );\n      }\n    } );\n  };\n\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // remove the images\n    sharedData.scene.removeChild( scratchpad.offImageNode );\n    delete scratchpad.offImageNode;\n\n    sharedData.scene.removeChild( scratchpad.onImageNode );\n    delete scratchpad.onImageNode;\n\n    // destroy the model component, removing visibility listeners first\n    const element = phet.paperLand.getModelComponent( 'element4' );\n    if ( element ) {\n      element.isLitProperty.unlink( scratchpad.visibilityListener );\n      delete scratchpad.visibilityListener;\n\n      element.dispose();\n\n      phet.paperLand.removeModelComponent( 'element4' );\n    }\n\n    // remove program specific data\n    phet.paperLand.removeProgramData( paperProgramNumber, 'connectionElement' );\n\n    // remove the connection element constructor observer\n    phet.paperLand.removeModelObserver( 'connectionElementConstructor', scratchpad.observerId );\n  };\n\n  const onProgramAdjacent = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n\n    // Look at the other program and see if it has a ConnectionElement to connect to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n\n    if ( otherConnectionElement ) {\n\n      // if it does, add this connection element as a child\n      otherConnectionElement.addChild( phet.paperLand.getModelComponent( 'element4' ) );\n    }\n  };\n\n  const onProgramSeparated = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} detached from ${programNumber} ${direction}` );\n\n    // Look at the other program and see if it has a ConnectionElement that we are attached to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n    if ( otherConnectionElement ) {\n      const thisElement = phet.paperLand.getModelComponent( 'element4' );\n\n      if ( otherConnectionElement.children.includes( thisElement ) ) {\n        otherConnectionElement.removeChild( thisElement );\n      }\n    }\n  };\n\n  // Called when the program moves.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    // Center the image based on the position of the paper.\n    const paperCenterX = ( positionPoints[0].x + positionPoints[1].x ) / 2;\n    const paperCenterY = ( positionPoints[0].y + positionPoints[2].y ) / 2;\n    scratchpad.onImageNode.centerX = paperCenterX * sharedData.displaySize.width;\n    scratchpad.onImageNode.centerY = paperCenterY * sharedData.displaySize.height;\n\n    scratchpad.offImageNode.centerX = paperCenterX * sharedData.displaySize.width;\n    scratchpad.offImageNode.centerY = paperCenterY * sharedData.displaySize.height;\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Whisker A', canvas.width / 2, canvas.height / 2 - 10);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n})();\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.whisker-demo-1.484.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/whisker-demo-1/programs/484/debugInfo",
  "claimUrl": "/api/spaces/whisker-demo-1/programs/484/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
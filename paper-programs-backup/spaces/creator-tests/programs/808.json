{
  "number": 808,
  "originalCode": "// Movable Image\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const imagePosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'imagePosition', imagePosition );\n    \n\n      const imageRotation = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 6.28 )\n      });\n      phet.paperLand.addModelComponent( 'imageRotation', imageRotation );\n    \n\n      const imageScale = new phet.axon.NumberProperty( 1, {\n        range: new phet.dot.Range( 0.1, 2 )\n      });\n      phet.paperLand.addModelComponent( 'imageScale', imageScale );\n    \n\n      const pageBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'pageBounds', pageBounds );\n    \n\n      // Create an image and add it to the view.\n      let imageViewImageElement = document.createElement( 'img' );\n      imageViewImageElement.src = 'media/images/sub.png';\n      const imageViewImage = new phet.scenery.Image( imageViewImageElement );\n      \n      sharedData.scene.addChild( imageViewImage );\n      scratchpad.imageViewImage = imageViewImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.imageViewImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'imageRotation', 'pageBounds' ], ( imageRotation, pageBounds ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        imageViewImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        imageViewImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        imageViewImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        imageViewImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        imageViewImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        imageViewImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        imageViewImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        imageViewImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        imageViewImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const imageViewImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( imageViewImage.localBounds.width || 1 ) / ( imageViewImage.localBounds.height || 1 );\n\n        const scaleX = imageViewImageViewBounds.width / ( imageViewImage.localBounds.width || 1 );\n        const scaleY = imageViewImageViewBounds.height / ( imageViewImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          imageViewImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          imageViewImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        imageViewImage.center = imageViewImageViewBounds.center;\n      };\n      \n\n        const setImage = imageName => {\n          let imageViewImageImageElement = document.createElement( 'img' );\n          imageViewImageImageElement.src = 'media/images/' + imageName;\n          imageViewImage.image = imageViewImageImageElement;\n        };\n      \n      \n        matchBounds( pageBounds, true );\n\n// Sets the rotation from the model component\nsetRotation( imageRotation );\n\n\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'imagePosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'imageRotation' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'imageScale' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'pageBounds' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.imageViewImage );\n      delete scratchpad.imageViewImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'imageRotation', 'pageBounds' ], scratchpad.imageViewImageMultilinkId );\n      delete scratchpad.imageViewImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty2 = phet.paperLand.getModelComponent( 'pageBounds' );\n    if ( modelProperty2 ) {\n      modelProperty2.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Movable Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Movable Image\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const imagePosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'imagePosition', imagePosition );\n    \n\n      const imageRotation = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 6.28 )\n      });\n      phet.paperLand.addModelComponent( 'imageRotation', imageRotation );\n    \n\n      const imageScale = new phet.axon.NumberProperty( 1, {\n        range: new phet.dot.Range( 0.1, 2 )\n      });\n      phet.paperLand.addModelComponent( 'imageScale', imageScale );\n    \n\n      const pageBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'pageBounds', pageBounds );\n    \n\n      // Create an image and add it to the view.\n      let imageViewImageElement = document.createElement( 'img' );\n      imageViewImageElement.src = 'media/images/sub.png';\n      const imageViewImage = new phet.scenery.Image( imageViewImageElement );\n      \n      sharedData.scene.addChild( imageViewImage );\n      scratchpad.imageViewImage = imageViewImage;\n      \n      // Update the image when a dependency changes.\n      scratchpad.imageViewImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'imageRotation', 'pageBounds' ], ( imageRotation, pageBounds ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        imageViewImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        imageViewImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        imageViewImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        imageViewImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        imageViewImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        imageViewImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        imageViewImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        imageViewImage.moveToFront();\n      };\n      \n      const setRotation = ( rotation ) => {\n        imageViewImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const imageViewImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( imageViewImage.localBounds.width || 1 ) / ( imageViewImage.localBounds.height || 1 );\n\n        const scaleX = imageViewImageViewBounds.width / ( imageViewImage.localBounds.width || 1 );\n        const scaleY = imageViewImageViewBounds.height / ( imageViewImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          imageViewImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          imageViewImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        imageViewImage.center = imageViewImageViewBounds.center;\n      };\n      \n\n        const setImage = imageName => {\n          let imageViewImageImageElement = document.createElement( 'img' );\n          imageViewImageImageElement.src = 'media/images/' + imageName;\n          imageViewImage.image = imageViewImageImageElement;\n        };\n      \n      \n        matchBounds( pageBounds, true );\n\n// Sets the rotation from the model component\nsetRotation( imageRotation );\n\n\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'imagePosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'imageRotation' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'imageScale' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'pageBounds' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.imageViewImage );\n      delete scratchpad.imageViewImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'imageRotation', 'pageBounds' ], scratchpad.imageViewImageMultilinkId );\n      delete scratchpad.imageViewImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty2 = phet.paperLand.getModelComponent( 'pageBounds' );\n    if ( modelProperty2 ) {\n      modelProperty2.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Movable Image', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-tests.808.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-tests/programs/808/debugInfo",
  "claimUrl": "/api/spaces/creator-tests/programs/808/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
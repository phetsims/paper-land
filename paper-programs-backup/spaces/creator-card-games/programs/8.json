{
  "number": 8,
  "originalCode": "// Background\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Create a background rectangle and add it to the view.\n      const backgroundComponentBackgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n        fill: 'green'\n      } );\n      \n      // If there are no dependencies for the background, add it to the view immediately. Otherwise, we will add it\n      // once all dependencies are available.\n      if ( [  ].length === 0 ) {\n        sharedData.scene.addChild( backgroundComponentBackgroundRectangle );\n        backgroundComponentBackgroundRectangle.moveToBack();\n      }\n      \n      // Assign to the scratchpad so that we can remove it later.\n      scratchpad.backgroundComponentBackgroundRectangle = backgroundComponentBackgroundRectangle;\n  \n      const backgroundComponentBackgroundColorDependencies = [  ];\n\n      // Get a new background color whenever a dependency changes. The control function should return a color string.\n      const backgroundComponentBackgroundFunction = (  ) => {\n      \n        // bring in the references so they are available in the control function\n        \n      \n        \n      }\n      \n      // Update the background rectangle whenever the dependencies change.\n      scratchpad.backgroundComponentBackgroundMultilinkId = phet.paperLand.addModelPropertyMultilink( [  ], (  ) => {\n    \n        const backgroundColorString = backgroundComponentBackgroundFunction(  );\n        \n        // wait to add the background until all dependencies are available (only add this once)\n        if ( scratchpad.backgroundComponentBackgroundRectangle.parents.length === 0 ) {\n          sharedData.scene.addChild( backgroundComponentBackgroundRectangle );\n          backgroundComponentBackgroundRectangle.moveToBack();\n        }\n        \n        // the function may not be implemented\n        if ( backgroundColorString ) {\n          backgroundComponentBackgroundRectangle.fill = backgroundColorString;\n        }\n        \n        backgroundComponentBackgroundRectangle.setRect( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the background rectangle from the view.\n      sharedData.scene.removeChild( scratchpad.backgroundComponentBackgroundRectangle );\n      delete scratchpad.backgroundComponentBackgroundRectangle;\n      \n      // Remove the multilink if there were any dependencies\n      if ( scratchpad.backgroundComponentBackgroundMultilinkId ) {\n        phet.paperLand.removeModelPropertyMultilink( [  ], scratchpad.backgroundComponentBackgroundMultilinkId, {\n          otherReferences: [  ]\n        } );\n        delete scratchpad.backgroundComponentBackgroundMultilinkId;\n      }\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Background\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Create a background rectangle and add it to the view.\n      const backgroundComponentBackgroundRectangle = new phet.scenery.Rectangle( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height, {\n        fill: 'green'\n      } );\n      \n      // If there are no dependencies for the background, add it to the view immediately. Otherwise, we will add it\n      // once all dependencies are available.\n      if ( [  ].length === 0 ) {\n        sharedData.scene.addChild( backgroundComponentBackgroundRectangle );\n        backgroundComponentBackgroundRectangle.moveToBack();\n      }\n      \n      // Assign to the scratchpad so that we can remove it later.\n      scratchpad.backgroundComponentBackgroundRectangle = backgroundComponentBackgroundRectangle;\n  \n      const backgroundComponentBackgroundColorDependencies = [  ];\n\n      // Get a new background color whenever a dependency changes. The control function should return a color string.\n      const backgroundComponentBackgroundFunction = (  ) => {\n      \n        // bring in the references so they are available in the control function\n        \n      \n        \n      }\n      \n      // Update the background rectangle whenever the dependencies change.\n      scratchpad.backgroundComponentBackgroundMultilinkId = phet.paperLand.addModelPropertyMultilink( [  ], (  ) => {\n    \n        const backgroundColorString = backgroundComponentBackgroundFunction(  );\n        \n        // wait to add the background until all dependencies are available (only add this once)\n        if ( scratchpad.backgroundComponentBackgroundRectangle.parents.length === 0 ) {\n          sharedData.scene.addChild( backgroundComponentBackgroundRectangle );\n          backgroundComponentBackgroundRectangle.moveToBack();\n        }\n        \n        // the function may not be implemented\n        if ( backgroundColorString ) {\n          backgroundComponentBackgroundRectangle.fill = backgroundColorString;\n        }\n        \n        backgroundComponentBackgroundRectangle.setRect( 0, 0, sharedData.displaySize.width, sharedData.displaySize.height );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the background rectangle from the view.\n      sharedData.scene.removeChild( scratchpad.backgroundComponentBackgroundRectangle );\n      delete scratchpad.backgroundComponentBackgroundRectangle;\n      \n      // Remove the multilink if there were any dependencies\n      if ( scratchpad.backgroundComponentBackgroundMultilinkId ) {\n        phet.paperLand.removeModelPropertyMultilink( [  ], scratchpad.backgroundComponentBackgroundMultilinkId, {\n          otherReferences: [  ]\n        } );\n        delete scratchpad.backgroundComponentBackgroundMultilinkId;\n      }\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Background', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-card-games.8.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-card-games/programs/8/debugInfo",
  "claimUrl": "/api/spaces/creator-card-games/programs/8/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
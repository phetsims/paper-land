{
  "number": 1,
  "originalCode": "// P1 FIREBALL\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isActiveCardP1Fire = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isActiveCardP1Fire', isActiveCardP1Fire );\n    \n\n      const p1FireImgPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'p1FireImgPosition', p1FireImgPosition );\n    \n\n      const p1FireballBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'p1FireballBounds', p1FireballBounds );\n    \n\n      // The array item can be created when all entry data and the array itself are available in the model.\n      scratchpad.p1FireArrayItemsItemObserverId = phet.paperLand.addMultiModelObserver(\n        [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ],\n        ( isActiveCardP1Fire, p1FireImgPosition, p1CardArray ) => {\n        \n          // Create the entry from the item schema.\n          const p1FireArrayItemsItemObject = { \n_latest_active: phet.paperLand.getModelComponent('isActiveCardP1Fire').value,\nget active() { return this._latest_active; },\nset active(newValue) { phet.paperLand.getModelComponent('isActiveCardP1Fire').value = newValue; },\n_latest_position: phet.paperLand.getModelComponent('p1FireImgPosition').value,\nget position() { return this._latest_position; },\nset position(newValue) { phet.paperLand.getModelComponent('p1FireImgPosition').value = newValue; }\n };\n        \n          // Now that all dependencies are detected, this is where we may add the item for the first time.\n          // If the model has a 'added' item reference, set this item to it.\n          if ( phet.paperLand.getModelComponent( 'p1CardArrayAddedItem' ) ) {\n            phet.paperLand.getModelComponent( 'p1CardArrayAddedItem' ).value = p1FireArrayItemsItemObject;\n          }\n        \n          // A callback that will replace the item in the array.\n          scratchpad.replaceItem = () => {\n          \n            // A shallow copy of the array so that we can set it back to the Property and trigger listeners.\n            const p1CardArrayArray = phet.paperLand.getModelComponent( 'p1CardArray' ).value.slice();\n            \n            const index = p1CardArrayArray.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              p1CardArrayArray.splice( index, 1 );\n            }\n            \n            // Update the ItemObject values every time a component changes\n            p1FireArrayItemsItemObject._latest_active = phet.paperLand.getModelComponent('isActiveCardP1Fire').value;\np1FireArrayItemsItemObject._latest_position = phet.paperLand.getModelComponent('p1FireImgPosition').value;\n\n            \n            scratchpad.item = p1FireArrayItemsItemObject;\n            \n            // Add the item to the array, inserting it into the same index as the previous item\n            // to be less disruptive to the array data.\n            p1CardArrayArray.splice( index, 0, scratchpad.item );\n                        \n            // Set the array back to the Property.\n            phet.paperLand.getModelComponent( 'p1CardArray' ).value = p1CardArrayArray;\n          };\n        \n          // For each linkable dependency, whenever the value changes we will recreate the item\n          // and add it back to the array to trigger an array change so that the user can\n          // easily register changes to the array in one place.\n          [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ].forEach( dependencyName => {\n          \n            // Updating the array when the array itself is changed would be infinately reentrant.\n            if ( dependencyName !== 'p1CardArray' ) {\n              const dependency = phet.paperLand.getModelComponent( dependencyName );\n              dependency.link( scratchpad.replaceItem );\n            }\n          } );\n        },\n        () => {\n        \n          // Remove the item from the array as soon as any dependencies are removed (if it is still in the array)\n          const p1CardArrayArray = phet.paperLand.getModelComponent( 'p1CardArray' );\n          if ( p1CardArrayArray ) {\n            const arrayValue = p1CardArrayArray.value;\n            \n            const index = arrayValue.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              arrayValue.splice( index, 1 );\n              \n              // Set the Property to a new array so that listeners are triggered.\n              phet.paperLand.getModelComponent( 'p1CardArray' ).value = arrayValue.slice();\n              \n              // Update the reference to the item that was just removed from the array, if the model has such a\n              // component (it may have been removed by the user).\n              if ( phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ) ) {\n                phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ).value = scratchpad.item;\n              }\n            }\n          }\n          \n          // detach listeners that will replace the item\n          [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ].forEach( dependencyName => {\n            const dependency = phet.paperLand.getModelComponent( dependencyName );\n            if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n              dependency.unlink( scratchpad.replaceItem );\n            }\n          } );\n        }\n      ); \n    \n\n      // Create an image and add it to the view.\n      let p1FireBallImageImageElement = document.createElement( 'img' );\n      p1FireBallImageImageElement.src = 'media/images/uploads/fireball.gif';\n      const p1FireBallImageImage = new phet.scenery.Image( p1FireBallImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const p1FireBallImageImageLoadProperty = new phet.axon.Property( 0 );\n      p1FireBallImageImageElement.addEventListener( 'load', () => { p1FireBallImageImageLoadProperty.value = p1FireBallImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( p1FireBallImageImage );\n      scratchpad.p1FireBallImageImage = p1FireBallImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.p1FireBallImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'p1FireballBounds' ], async ( p1FireballBounds ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        p1FireBallImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        p1FireBallImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        p1FireBallImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        p1FireBallImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        p1FireBallImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        p1FireBallImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        p1FireBallImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        p1FireBallImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        p1FireBallImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        p1FireBallImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const p1FireBallImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( p1FireBallImageImage.localBounds.width || 1 ) / ( p1FireBallImageImage.localBounds.height || 1 );\n\n        const scaleX = p1FireBallImageImageViewBounds.width / ( p1FireBallImageImage.localBounds.width || 1 );\n        const scaleY = p1FireBallImageImageViewBounds.height / ( p1FireBallImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          p1FireBallImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          p1FireBallImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        p1FireBallImageImage.center = p1FireBallImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( p1FireBallImageImage.image ) {\n              const startIndex = p1FireBallImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = p1FireBallImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const p1FireBallImageImageImageElement = document.createElement( 'img' );\n              p1FireBallImageImageImageElement.src = newImageName;\n              p1FireBallImageImage.image = p1FireBallImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              p1FireBallImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        matchBounds( p1FireballBounds, false );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, p1FireBallImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const p1FireballOutlineShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const p1FireballOutlinePath = new phet.scenery.Path( p1FireballOutlineShape, {\n        fill: 'transparent',\n        stroke: 'gold',\n        lineWidth: 2,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( p1FireballOutlinePath );\n      scratchpad.p1FireballOutlinePath = p1FireballOutlinePath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.p1FireballOutlinePathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'p1FireballBounds' ], ( p1FireballBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const p1FireballOutlineShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.p1FireballOutlinePath.setShape( p1FireballOutlineShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.p1FireballOutlinePath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        p1FireballOutlinePath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        p1FireballOutlinePath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        p1FireballOutlinePath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        p1FireballOutlinePath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        p1FireballOutlinePath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        p1FireballOutlinePath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        p1FireballOutlinePath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        p1FireballOutlinePath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        p1FireballOutlinePath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        p1FireballOutlinePath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const p1FireballOutlinePathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( p1FireballOutlinePath.localBounds.width || 1 ) / ( p1FireballOutlinePath.localBounds.height || 1 );\n\n        const scaleX = p1FireballOutlinePathViewBounds.width / ( p1FireballOutlinePath.localBounds.width || 1 );\n        const scaleY = p1FireballOutlinePathViewBounds.height / ( p1FireballOutlinePath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          p1FireballOutlinePath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          p1FireballOutlinePath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        p1FireballOutlinePath.center = p1FireballOutlinePathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          p1FireballOutlinePath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          p1FireballOutlinePath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          p1FireballOutlinePath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          p1FireballOutlinePath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          p1FireballOutlinePath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          p1FireballOutlinePath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( p1FireballBounds );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isActiveCardP1Fire' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'p1FireImgPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'p1FireballBounds' );\n    \n\n      // If the item is in the array still, remove it.\n      const p1CardArrayArray = phet.paperLand.getModelComponent( 'p1CardArray' );\n      if ( p1CardArrayArray ) {\n        const index = p1CardArrayArray.value.indexOf( scratchpad.item );\n        if ( index > -1 ) {\n          p1CardArrayArray.value.splice( index, 1 );\n          \n          // Set the Property to a new array so that listeners are triggered.\n          phet.paperLand.getModelComponent( 'p1CardArray' ).value = p1CardArrayArray.value.slice();\n          \n          // Update the reference to the item that was just removed from the array, if the model has such a\n          // component (it may have been removed by the user).\n          if ( phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ) ) {\n            phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ).value = scratchpad.item;\n          }\n        }\n      }\n      \n      // detach listeners that will replace the item, if they are still on the dependencies\n      [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ].forEach( dependencyName => {\n        const dependency = phet.paperLand.getModelComponent( dependencyName );\n        if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n          dependency.unlink( scratchpad.replaceItem );\n        }\n      } );\n      \n      // Detach the multiModelObserver listener.\n      phet.paperLand.removeMultiModelObserver( [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ], scratchpad.p1FireArrayItemsItemObserverId );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.p1FireBallImageImage );\n      delete scratchpad.p1FireBallImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'p1FireballBounds' ], scratchpad.p1FireBallImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.p1FireBallImageImageMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.p1FireballOutlinePath );\n      delete scratchpad.p1FireballOutlinePath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'p1FireballBounds' ], scratchpad.p1FireballOutlinePathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.p1FireballOutlinePathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty36 = phet.paperLand.getModelComponent( 'p1FireImgPosition' );\n    if ( modelProperty36 ) {\n      modelProperty36.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n\n    const modelProperty37 = phet.paperLand.getModelComponent( 'p1FireballBounds' );\n    if ( modelProperty37 ) {\n      modelProperty37.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('P1 FIREBALL', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// P1 FIREBALL\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const isActiveCardP1Fire = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'isActiveCardP1Fire', isActiveCardP1Fire );\n    \n\n      const p1FireImgPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'p1FireImgPosition', p1FireImgPosition );\n    \n\n      const p1FireballBounds = new phet.axon.Property(\n        new phet.dot.Bounds2( 0, 0, 1, 1 )\n      );\n      phet.paperLand.addModelComponent( 'p1FireballBounds', p1FireballBounds );\n    \n\n      // The array item can be created when all entry data and the array itself are available in the model.\n      scratchpad.p1FireArrayItemsItemObserverId = phet.paperLand.addMultiModelObserver(\n        [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ],\n        ( isActiveCardP1Fire, p1FireImgPosition, p1CardArray ) => {\n        \n          // Create the entry from the item schema.\n          const p1FireArrayItemsItemObject = { \n_latest_active: phet.paperLand.getModelComponent('isActiveCardP1Fire').value,\nget active() { return this._latest_active; },\nset active(newValue) { phet.paperLand.getModelComponent('isActiveCardP1Fire').value = newValue; },\n_latest_position: phet.paperLand.getModelComponent('p1FireImgPosition').value,\nget position() { return this._latest_position; },\nset position(newValue) { phet.paperLand.getModelComponent('p1FireImgPosition').value = newValue; }\n };\n        \n          // Now that all dependencies are detected, this is where we may add the item for the first time.\n          // If the model has a 'added' item reference, set this item to it.\n          if ( phet.paperLand.getModelComponent( 'p1CardArrayAddedItem' ) ) {\n            phet.paperLand.getModelComponent( 'p1CardArrayAddedItem' ).value = p1FireArrayItemsItemObject;\n          }\n        \n          // A callback that will replace the item in the array.\n          scratchpad.replaceItem = () => {\n          \n            // A shallow copy of the array so that we can set it back to the Property and trigger listeners.\n            const p1CardArrayArray = phet.paperLand.getModelComponent( 'p1CardArray' ).value.slice();\n            \n            const index = p1CardArrayArray.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              p1CardArrayArray.splice( index, 1 );\n            }\n            \n            // Update the ItemObject values every time a component changes\n            p1FireArrayItemsItemObject._latest_active = phet.paperLand.getModelComponent('isActiveCardP1Fire').value;\np1FireArrayItemsItemObject._latest_position = phet.paperLand.getModelComponent('p1FireImgPosition').value;\n\n            \n            scratchpad.item = p1FireArrayItemsItemObject;\n            \n            // Add the item to the array, inserting it into the same index as the previous item\n            // to be less disruptive to the array data.\n            p1CardArrayArray.splice( index, 0, scratchpad.item );\n                        \n            // Set the array back to the Property.\n            phet.paperLand.getModelComponent( 'p1CardArray' ).value = p1CardArrayArray;\n          };\n        \n          // For each linkable dependency, whenever the value changes we will recreate the item\n          // and add it back to the array to trigger an array change so that the user can\n          // easily register changes to the array in one place.\n          [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ].forEach( dependencyName => {\n          \n            // Updating the array when the array itself is changed would be infinately reentrant.\n            if ( dependencyName !== 'p1CardArray' ) {\n              const dependency = phet.paperLand.getModelComponent( dependencyName );\n              dependency.link( scratchpad.replaceItem );\n            }\n          } );\n        },\n        () => {\n        \n          // Remove the item from the array as soon as any dependencies are removed (if it is still in the array)\n          const p1CardArrayArray = phet.paperLand.getModelComponent( 'p1CardArray' );\n          if ( p1CardArrayArray ) {\n            const arrayValue = p1CardArrayArray.value;\n            \n            const index = arrayValue.indexOf( scratchpad.item );\n            if ( index > -1 ) {\n              arrayValue.splice( index, 1 );\n              \n              // Set the Property to a new array so that listeners are triggered.\n              phet.paperLand.getModelComponent( 'p1CardArray' ).value = arrayValue.slice();\n              \n              // Update the reference to the item that was just removed from the array, if the model has such a\n              // component (it may have been removed by the user).\n              if ( phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ) ) {\n                phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ).value = scratchpad.item;\n              }\n            }\n          }\n          \n          // detach listeners that will replace the item\n          [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ].forEach( dependencyName => {\n            const dependency = phet.paperLand.getModelComponent( dependencyName );\n            if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n              dependency.unlink( scratchpad.replaceItem );\n            }\n          } );\n        }\n      ); \n    \n\n      // Create an image and add it to the view.\n      let p1FireBallImageImageElement = document.createElement( 'img' );\n      p1FireBallImageImageElement.src = 'media/images/uploads/fireball.gif';\n      const p1FireBallImageImage = new phet.scenery.Image( p1FireBallImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const p1FireBallImageImageLoadProperty = new phet.axon.Property( 0 );\n      p1FireBallImageImageElement.addEventListener( 'load', () => { p1FireBallImageImageLoadProperty.value = p1FireBallImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( p1FireBallImageImage );\n      scratchpad.p1FireBallImageImage = p1FireBallImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.p1FireBallImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'p1FireballBounds' ], async ( p1FireballBounds ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        p1FireBallImageImage.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        p1FireBallImageImage.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        p1FireBallImageImage.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        p1FireBallImageImage.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        p1FireBallImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        p1FireBallImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        p1FireBallImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        p1FireBallImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        p1FireBallImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        p1FireBallImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const p1FireBallImageImageViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( p1FireBallImageImage.localBounds.width || 1 ) / ( p1FireBallImageImage.localBounds.height || 1 );\n\n        const scaleX = p1FireBallImageImageViewBounds.width / ( p1FireBallImageImage.localBounds.width || 1 );\n        const scaleY = p1FireBallImageImageViewBounds.height / ( p1FireBallImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          p1FireBallImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          p1FireBallImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        p1FireBallImageImage.center = p1FireBallImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( p1FireBallImageImage.image ) {\n              const startIndex = p1FireBallImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = p1FireBallImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const p1FireBallImageImageImageElement = document.createElement( 'img' );\n              p1FireBallImageImageImageElement.src = newImageName;\n              p1FireBallImageImage.image = p1FireBallImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              p1FireBallImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        matchBounds( p1FireballBounds, false );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, p1FireBallImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n\n      // Create a shape with kite.\n      const p1FireballOutlineShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n      \n      // create a path for the shape\n      const p1FireballOutlinePath = new phet.scenery.Path( p1FireballOutlineShape, {\n        fill: 'transparent',\n        stroke: 'gold',\n        lineWidth: 2,\n        \n        // if initial position is zero, do not set that explicitly because it will break shape points \n        centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n        centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n        scale: 1,\n        rotation: 0,\n        opacity: 1\n      } );\n      \n      // assign to scratchpad so that we can remove it later\n      sharedData.scene.addChild( p1FireballOutlinePath );\n      scratchpad.p1FireballOutlinePath = p1FireballOutlinePath;\n      \n      // Update the shape when a dependency changes.\n      scratchpad.p1FireballOutlinePathMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'p1FireballBounds' ], ( p1FireballBounds ) => {\n      \n        // We have to recreate the shape every change (especially important for a resize) - this is done first though\n        // because the user control functions might change the shape further.\n        const p1FireballOutlineShape = phet.kite.Shape.rectangle( 0, 0, phet.paperLand.utils.paperToBoardX( 0.5, sharedData.displaySize.width ), phet.paperLand.utils.paperToBoardY( 0.5, sharedData.displaySize.height ) )\n        scratchpad.p1FireballOutlinePath.setShape( p1FireballOutlineShape );\n        \n        // now mutate with options that might depend on the shape or layout changes (again, user might override this \n        // so do before the control function)\n        scratchpad.p1FireballOutlinePath.mutate( {\n          // if initial position is zero, do not set that explicitly because it will break shape points \n          centerX: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardX( undefined, sharedData.displaySize.width ) : undefined,\n          centerY: ('model' === 'model' && undefined) ? phet.paperLand.utils.paperToBoardY( undefined, sharedData.displaySize.height) : undefined,\n          scale: 1,\n          rotation: 0\n        } );\n      \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToBoardBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToBoardCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        p1FireballOutlinePath.centerX = phet.paperLand.utils.paperToBoardX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        p1FireballOutlinePath.centerY = phet.paperLand.utils.paperToBoardY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        p1FireballOutlinePath.left = phet.paperLand.utils.paperToBoardX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        p1FireballOutlinePath.top = phet.paperLand.utils.paperToBoardY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        p1FireballOutlinePath.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        p1FireballOutlinePath.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        p1FireballOutlinePath.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        p1FireballOutlinePath.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        p1FireballOutlinePath.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        p1FireballOutlinePath.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const p1FireballOutlinePathViewBounds = phet.paperLand.utils.paperToBoardBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( p1FireballOutlinePath.localBounds.width || 1 ) / ( p1FireballOutlinePath.localBounds.height || 1 );\n\n        const scaleX = p1FireballOutlinePathViewBounds.width / ( p1FireballOutlinePath.localBounds.width || 1 );\n        const scaleY = p1FireballOutlinePathViewBounds.height / ( p1FireballOutlinePath.localBounds.height || 1 );\n\n        if ( stretch ) {\n          p1FireballOutlinePath.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          p1FireballOutlinePath.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        p1FireballOutlinePath.center = p1FireballOutlinePathViewBounds.center;\n      };\n      \n\n        const setStroke = ( color ) => {\n          p1FireballOutlinePath.stroke = color;\n        };\n        \n        const setLineWidth = ( width ) => {\n          p1FireballOutlinePath.lineWidth = width;\n        };\n        \n        const setFill = ( color ) => {\n          p1FireballOutlinePath.fill = color;\n        };\n        \n        // for a line\n        const setX1 = ( newX1 ) => {\n          x1 = phet.paperLand.utils.paperToBoardX( newX1, sharedData.displaySize.width );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY1 = ( newY1 ) => {\n          y1 = phet.paperLand.utils.paperToBoardY( newY1, sharedData.displaySize.height );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n\n        const setX2 = ( newX2 ) => {\n          x2 = phet.paperLand.utils.paperToBoardX( newX2, sharedData.displaySize.width );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        const setY2 = ( newY2 ) => {\n          y2 = phet.paperLand.utils.paperToBoardY( newY2, sharedData.displaySize.height );\n          p1FireballOutlinePath.shape = phet.kite.Shape.lineSegment( x1, y1, x2, y2 );\n        };\n        \n        // for a circle\n        const setRadius = ( radius ) => {\n          // since this is a Path and not a Circle, we need to recreate the shape\n          p1FireballOutlinePath.shape = phet.kite.Shape.circle( phet.paperLand.utils.paperToBoardX( radius, sharedData.displaySize.width ) );\n        };\n        \n        // for a rectangle\n        const setRectBounds = ( bounds ) => {\n          const transformedBounds = unitBoundsToDisplayBounds( bounds );\n          p1FireballOutlinePath.shape = phet.kite.Shape.bounds( transformedBounds );\n        };\n        \n        // for a polygon\n        const setPoints = ( points ) => {\n          const transformedPoints = points.map( thisPoint => unitPositionToDisplayPosition( thisPoint ) );\n          p1FireballOutlinePath.shape = phet.kite.Shape.polygon( transformedPoints );\n        };\n        \n        // bring in the reference components so they are available in the control function\n        \n        \n        setRectBounds( p1FireballBounds );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'isActiveCardP1Fire' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'p1FireImgPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'p1FireballBounds' );\n    \n\n      // If the item is in the array still, remove it.\n      const p1CardArrayArray = phet.paperLand.getModelComponent( 'p1CardArray' );\n      if ( p1CardArrayArray ) {\n        const index = p1CardArrayArray.value.indexOf( scratchpad.item );\n        if ( index > -1 ) {\n          p1CardArrayArray.value.splice( index, 1 );\n          \n          // Set the Property to a new array so that listeners are triggered.\n          phet.paperLand.getModelComponent( 'p1CardArray' ).value = p1CardArrayArray.value.slice();\n          \n          // Update the reference to the item that was just removed from the array, if the model has such a\n          // component (it may have been removed by the user).\n          if ( phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ) ) {\n            phet.paperLand.getModelComponent( 'p1CardArrayRemovedItem' ).value = scratchpad.item;\n          }\n        }\n      }\n      \n      // detach listeners that will replace the item, if they are still on the dependencies\n      [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ].forEach( dependencyName => {\n        const dependency = phet.paperLand.getModelComponent( dependencyName );\n        if ( dependency && dependency.hasListener( scratchpad.replaceItem ) ) {\n          dependency.unlink( scratchpad.replaceItem );\n        }\n      } );\n      \n      // Detach the multiModelObserver listener.\n      phet.paperLand.removeMultiModelObserver( [ 'isActiveCardP1Fire', 'p1FireImgPosition', 'p1CardArray' ], scratchpad.p1FireArrayItemsItemObserverId );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.p1FireBallImageImage );\n      delete scratchpad.p1FireBallImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'p1FireballBounds' ], scratchpad.p1FireBallImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.p1FireBallImageImageMultilinkId;\n    \n\n    \n      // Remove the Path from the view\n      sharedData.scene.removeChild( scratchpad.p1FireballOutlinePath );\n      delete scratchpad.p1FireballOutlinePath;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'p1FireballBounds' ], scratchpad.p1FireballOutlinePathMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.p1FireballOutlinePathMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty36 = phet.paperLand.getModelComponent( 'p1FireImgPosition' );\n    if ( modelProperty36 ) {\n      modelProperty36.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n\n    const modelProperty37 = phet.paperLand.getModelComponent( 'p1FireballBounds' );\n    if ( modelProperty37 ) {\n      modelProperty37.value = phet.paperLand.utils.getAbsolutePaperBounds( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('P1 FIREBALL', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-card-games.1.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-card-games/programs/1/debugInfo",
  "claimUrl": "/api/spaces/creator-card-games/programs/1/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
{
  "number": 7,
  "originalCode": "// Reset Game with Marker\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const resetGameTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'resetGameTrigger', resetGameTrigger );\n    \n\n      const resetSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/resetAll.mp3' );\n      const resetSoundSoundClip = new phet.tambo.SoundClip( resetSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( resetSoundSoundClip );\n      scratchpad.resetSoundWrappedAudioBuffer = resetSoundWrappedAudioBuffer;\n      \n      let resetSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let resetSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.resetSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.resetSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'resetGameTrigger' ], ( resetGameTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              resetSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              resetSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !resetSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - resetSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !resetSoundSoundClip.isPlaying ) {\n                  resetSoundSoundClip.play();\n                }\n                resetSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( resetSoundStopSoundTimeout ){\n                  window.clearTimeout( resetSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  resetSoundStopSoundTimeout = window.setTimeout( () => {\n                    resetSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( resetSoundStopSoundTimeout ){\n                window.clearTimeout( resetSoundStopSoundTimeout );\n              }\n              resetSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( resetGameTrigger ) {\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.resetSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.resetSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.resetSoundSoundClip = resetSoundSoundClip;\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'resetGameTrigger' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.resetSoundSoundClip );\n      delete scratchpad.resetSoundSoundClip;\n      \n      scratchpad.resetSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.resetSoundWrappedAudioBufferListener );\n      delete scratchpad.resetSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'resetGameTrigger' ], scratchpad.resetSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.resetSoundSoundMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty129 = phet.paperLand.getModelComponent( 'resetGameTrigger' );\n    if ( modelProperty129 ) {\n      modelProperty129.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty132 = phet.paperLand.getModelComponent( 'resetGameTrigger' );\n    if ( modelProperty132 ) {\n      modelProperty132.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Reset Game with Marker', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Reset Game with Marker\n// Keywords: speech, description, sound, marker\n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const resetGameTrigger = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'resetGameTrigger', resetGameTrigger );\n    \n\n      const resetSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/resetAll.mp3' );\n      const resetSoundSoundClip = new phet.tambo.SoundClip( resetSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( resetSoundSoundClip );\n      scratchpad.resetSoundWrappedAudioBuffer = resetSoundWrappedAudioBuffer;\n      \n      let resetSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let resetSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.resetSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.resetSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'resetGameTrigger' ], ( resetGameTrigger ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              resetSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              resetSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !resetSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - resetSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !resetSoundSoundClip.isPlaying ) {\n                  resetSoundSoundClip.play();\n                }\n                resetSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( resetSoundStopSoundTimeout ){\n                  window.clearTimeout( resetSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  resetSoundStopSoundTimeout = window.setTimeout( () => {\n                    resetSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( resetSoundStopSoundTimeout ){\n                window.clearTimeout( resetSoundStopSoundTimeout );\n              }\n              resetSoundSoundClip.stop();\n            };\n            \n            if ( false ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( resetGameTrigger ) {\n    play();\n}\n          }, {\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.resetSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.resetSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.resetSoundSoundClip = resetSoundSoundClip;\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'resetGameTrigger' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.resetSoundSoundClip );\n      delete scratchpad.resetSoundSoundClip;\n      \n      scratchpad.resetSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.resetSoundWrappedAudioBufferListener );\n      delete scratchpad.resetSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'resetGameTrigger' ], scratchpad.resetSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.resetSoundSoundMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty129 = phet.paperLand.getModelComponent( 'resetGameTrigger' );\n    if ( modelProperty129 ) {\n      modelProperty129.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n    const modelProperty132 = phet.paperLand.getModelComponent( 'resetGameTrigger' );\n    if ( modelProperty132 ) {\n      modelProperty132.value = markers.length > 0;\n    }\n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Reset Game with Marker', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-games.7.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-games/programs/7/debugInfo",
  "claimUrl": "/api/spaces/creator-games/programs/7/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
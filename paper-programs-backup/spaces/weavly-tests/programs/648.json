{
  "number": 648,
  "originalCode": "// Program Start\n// Keywords: weavly\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs:\n// Program Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n      // create a root\n      const rootElement = new phet.paperLand.SingleChildConnectionElement();\n      phet.paperLand.addModelComponent( 'rootElement', rootElement );\n\n      // Add this element to the program data itself so that adjacent programs can find it\n      phet.paperLand.setProgramData( paperProgramNumber, 'connectionElement', rootElement );\n\n      // Update the program data whenever the tree changes\n      rootElement.subtreeChangedEmitter.addListener( () => {\n\n          const actionBlockSequence = [];\n          rootElement.walkDownTree( ( connectionElement ) => {\n            const actionType = connectionElement.getElementData();\n            actionBlockSequence.push( { block: actionType } );\n          } );\n\n          phet.paperLand.console.log( JSON.stringify( actionBlockSequence ) );\n\n        const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );\n        if ( iframe ) {\n    \n            // Send a message to Weavly to create a program with one forward block.\n            phet.paperLand.console.log( 'Sending message to Weavly' );\n            iframe.contentWindow.postMessage( {\n    \n            // We will probably want different message types.\n            // For example, this is an 'update' message, we might want to signify that.\n            type: 'paper-playground-weavly-message',\n            message: {\n                program: actionBlockSequence\n            }\n            }, '*' );\n        }\n        else {\n            phet.paperLand.console.warn( 'Please add the Weavly connect program first.' );\n        }\n      } );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n      \n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelComponent( 'rootElement' );\n    phet.paperLand.removeProgramData( paperProgramNumber, 'connectionElement' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "currentCode": "// Program Start\n// Keywords: weavly\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs:\n// Program Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n      // create a root\n      const rootElement = new phet.paperLand.SingleChildConnectionElement();\n      phet.paperLand.addModelComponent( 'rootElement', rootElement );\n\n      // Add this element to the program data itself so that adjacent programs can find it\n      phet.paperLand.setProgramData( paperProgramNumber, 'connectionElement', rootElement );\n\n      // Update the program data whenever the tree changes\n      rootElement.subtreeChangedEmitter.addListener( () => {\n\n          const actionBlockSequence = [];\n          rootElement.walkDownTree( ( connectionElement ) => {\n            const actionType = connectionElement.getElementData();\n            actionBlockSequence.push( { block: actionType } );\n          } );\n\n          phet.paperLand.console.log( JSON.stringify( actionBlockSequence ) );\n\n        const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );\n        if ( iframe ) {\n    \n            // Send a message to Weavly to create a program with one forward block.\n            phet.paperLand.console.log( 'Sending message to Weavly' );\n            iframe.contentWindow.postMessage( {\n    \n            // We will probably want different message types.\n            // For example, this is an 'update' message, we might want to signify that.\n            type: 'paper-playground-weavly-message',\n            message: {\n                program: actionBlockSequence\n            }\n            }, '*' );\n        }\n        else {\n            phet.paperLand.console.warn( 'Please add the Weavly connect program first.' );\n        }\n      } );\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n\n      \n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelComponent( 'rootElement' );\n    phet.paperLand.removeProgramData( paperProgramNumber, 'connectionElement' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.weavly-tests.648.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/weavly-tests/programs/648/debugInfo",
  "claimUrl": "/api/spaces/weavly-tests/programs/648/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
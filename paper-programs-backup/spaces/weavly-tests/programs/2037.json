{
  "number": 2037,
  "originalCode": "// Weavly\n// Keywords: testing, hacks!\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Example program with functioning Board and Projector code!\n// !!!UPDATE ME WITH A BETTER BOARD EXAMPLE!!!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    phet.paperLand.console.log( 'Creating a new iframe' );\n    const iframe = document.createElement( 'iframe' );\n    iframe.src = 'http://localhost:3000/'; // Weavly will be running here!\n    iframe.width = '1200px';\n    iframe.height = '800px';\n    document.body.appendChild( iframe );\n\n    phet.paperLand.addModelComponent( 'weavlyFrame', iframe );\n\n    scratchpad.windowMessageListener = event => {\n        if ( event.data.type === 'paper-playground-weavly-message' ) {\n            phet.paperLand.console.log( event.data.message );\n        }\n    };\n    window.addEventListener( 'message', scratchpad.windowMessageListener );\n\n\n    // create a root\n    const rootElement = new phet.paperLand.SingleChildConnectionElement();\n    phet.paperLand.addModelComponent( 'rootElement', rootElement );\n\n    // Add this element to the program data itself so that adjacent programs can find it\n    phet.paperLand.setProgramData( paperProgramNumber, 'connectionElement', rootElement );\n\n    // Update the program data whenever the tree changes\n    rootElement.subtreeChangedEmitter.addListener( () => {\n\n        const programSequence = [];\n        rootElement.walkDownTree( ( connectionElement ) => {\n        const actionType = connectionElement.getElementData();\n          programSequence.push( { block: actionType } );\n        } );\n\n        phet.paperLand.console.log( JSON.stringify( programSequence ) );\n\n        // Send a message to Weavly to create a program with one forward block.\n        phet.paperLand.console.log( 'Sending message to Weavly' );\n        iframe.contentWindow.postMessage( {\n\n        // We will probably want different message types.\n        // For example, this is an 'update' message, we might want to signify that.\n        type: 'paper-playground-weavly-message',\n        message: {\n            command: 'setProgram',\n            program: programSequence\n        }\n        }, '*' );\n    } );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelComponent( 'rootElement' );\n    phet.paperLand.removeProgramData( paperProgramNumber, 'connectionElement' );\n\n    // remove the iframe from the document\n    const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );\n    document.body.removeChild( iframe );\n\n    // remove the iframe from the paper-land model\n    phet.paperLand.removeModelComponent( 'weavlyFrame' );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, paperPoints, scratchpad, sharedData ) => {\n    // const iframeWindow = phet.paperLand.getModelComponent( 'weavlyFrame' );   \n\n    // phet.paperLand.console.log( 'Sending message to Weavly' );\n    // iframeWindow.postMessage( {\n    //    type: 'paper-playground-weavly-message',\n    //    message: 'Hello Weavly!'\n    // }, '*' );\n  };\n\n  const onProgramMarkersAdded = ( paperProgramNumber, paperPoints, scratchpad, sharedData, markersOnProgram ) => {\n    if ( markersOnProgram.length > 0 ) {\n\n        // just got a new marker, run the program!\n        phet.paperLand.console.log( 'starting!' );\n        const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );   \n        iframe.contentWindow.postMessage( {\n            type: 'paper-playground-weavly-message',\n            message: {\n                command: 'start'\n            }\n        }, '*' );\n    }\n  };\n\n  const onProgramMarkersRemoved = ( paperProgramNumber, paperPoints, scratchpad, sharedData, markersOnProgram ) => {\n    if ( markersOnProgram.length === 0 ) {\n\n        // all markers removed, stop!\n        phet.paperLand.console.log( 'stopping!' );\n        const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );   \n        iframe.contentWindow.postMessage( {\n            type: 'paper-playground-weavly-message',\n            message: {\n                command: 'stop'\n            }\n        }, '*' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "currentCode": "// Weavly\n// Keywords: testing, hacks!\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Example program with functioning Board and Projector code!\n// !!!UPDATE ME WITH A BETTER BOARD EXAMPLE!!!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    phet.paperLand.console.log( 'Creating a new iframe' );\n    const iframe = document.createElement( 'iframe' );\n    iframe.src = 'http://localhost:3000/'; // Weavly will be running here!\n    iframe.width = '1200px';\n    iframe.height = '800px';\n    document.body.appendChild( iframe );\n\n    phet.paperLand.addModelComponent( 'weavlyFrame', iframe );\n\n    scratchpad.windowMessageListener = event => {\n        if ( event.data.type === 'paper-playground-weavly-message' ) {\n            phet.paperLand.console.log( event.data.message );\n        }\n    };\n    window.addEventListener( 'message', scratchpad.windowMessageListener );\n\n\n    // create a root\n    const rootElement = new phet.paperLand.SingleChildConnectionElement();\n    phet.paperLand.addModelComponent( 'rootElement', rootElement );\n\n    // Add this element to the program data itself so that adjacent programs can find it\n    phet.paperLand.setProgramData( paperProgramNumber, 'connectionElement', rootElement );\n\n    // Update the program data whenever the tree changes\n    rootElement.subtreeChangedEmitter.addListener( () => {\n\n        const programSequence = [];\n        rootElement.walkDownTree( ( connectionElement ) => {\n        const actionType = connectionElement.getElementData();\n          programSequence.push( { block: actionType } );\n        } );\n\n        phet.paperLand.console.log( JSON.stringify( programSequence ) );\n\n        // Send a message to Weavly to create a program with one forward block.\n        phet.paperLand.console.log( 'Sending message to Weavly' );\n        iframe.contentWindow.postMessage( {\n\n        // We will probably want different message types.\n        // For example, this is an 'update' message, we might want to signify that.\n        type: 'paper-playground-weavly-message',\n        message: {\n            command: 'setProgram',\n            program: programSequence\n        }\n        }, '*' );\n    } );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelComponent( 'rootElement' );\n    phet.paperLand.removeProgramData( paperProgramNumber, 'connectionElement' );\n\n    // remove the iframe from the document\n    const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );\n    document.body.removeChild( iframe );\n\n    // remove the iframe from the paper-land model\n    phet.paperLand.removeModelComponent( 'weavlyFrame' );\n  };\n\n  const onProgramChangedPosition = ( paperProgramNumber, paperPoints, scratchpad, sharedData ) => {\n    // const iframeWindow = phet.paperLand.getModelComponent( 'weavlyFrame' );   \n\n    // phet.paperLand.console.log( 'Sending message to Weavly' );\n    // iframeWindow.postMessage( {\n    //    type: 'paper-playground-weavly-message',\n    //    message: 'Hello Weavly!'\n    // }, '*' );\n  };\n\n  const onProgramMarkersAdded = ( paperProgramNumber, paperPoints, scratchpad, sharedData, markersOnProgram ) => {\n    if ( markersOnProgram.length > 0 ) {\n\n        // just got a new marker, run the program!\n        phet.paperLand.console.log( 'starting!' );\n        const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );   \n        iframe.contentWindow.postMessage( {\n            type: 'paper-playground-weavly-message',\n            message: {\n                command: 'start'\n            }\n        }, '*' );\n    }\n  };\n\n  const onProgramMarkersRemoved = ( paperProgramNumber, paperPoints, scratchpad, sharedData, markersOnProgram ) => {\n    if ( markersOnProgram.length === 0 ) {\n\n        // all markers removed, stop!\n        phet.paperLand.console.log( 'stopping!' );\n        const iframe = phet.paperLand.getModelComponent( 'weavlyFrame' );   \n        iframe.contentWindow.postMessage( {\n            type: 'paper-playground-weavly-message',\n            message: {\n                command: 'stop'\n            }\n        }, '*' );\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.weavly-tests.2037.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/weavly-tests/programs/2037/debugInfo",
  "claimUrl": "/api/spaces/weavly-tests/programs/2037/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
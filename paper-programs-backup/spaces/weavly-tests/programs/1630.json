{
  "number": 1630,
  "originalCode": "// Backward 1\n// Keywords: weavly\n// =============================== //\n// Program Dependencies:\n// Recommended Programs: \n// Program Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( programNumber, scratchpad, sharedData ) => {\n      const connectionElement = new phet.paperLand.SingleChildConnectionElement();\n      phet.paperLand.addModelComponent( `${programNumber}-connectionElement`, connectionElement );\n      phet.paperLand.setProgramData( programNumber, 'connectionElement', connectionElement );\n\n      connectionElement.setElementData( 'backward1' );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( programNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelComponent( `${programNumber}-connectionElement` );\n    phet.paperLand.removeProgramData( programNumber, 'connectionElement' );\n  };\n\n  const onProgramAdjacent = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n\n    // Look at the other program and see if it has a ConnectionElement to connect to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n\n    if ( otherConnectionElement ) {\n\n      // if it does, add this connection element as a child\n      otherConnectionElement.addChild( phet.paperLand.getModelComponent( `${programNumber}-connectionElement` ) );\n    }\n  };\n\n  const onProgramSeparated = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} detached from ${programNumber} ${direction}` );\n\n    // Look at the other program and see if it has a ConnectionElement that we are attached to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n    if ( otherConnectionElement ) {\n      const thisElement = phet.paperLand.getModelComponent( `${programNumber}-connectionElement` );\n\n      if ( otherConnectionElement.children.includes( thisElement ) ) {\n        otherConnectionElement.removeChild( thisElement );\n      }\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n\n",
  "currentCode": "// Backward 1\n// Keywords: weavly\n// =============================== //\n// Program Dependencies:\n// Recommended Programs: \n// Program Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( programNumber, scratchpad, sharedData ) => {\n      const connectionElement = new phet.paperLand.SingleChildConnectionElement();\n      phet.paperLand.addModelComponent( `${programNumber}-connectionElement`, connectionElement );\n      phet.paperLand.setProgramData( programNumber, 'connectionElement', connectionElement );\n\n      connectionElement.setElementData( 'backward1' );\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( programNumber, scratchpad, sharedData ) => {\n    phet.paperLand.removeModelComponent( `${programNumber}-connectionElement` );\n    phet.paperLand.removeProgramData( programNumber, 'connectionElement' );\n  };\n\n  const onProgramAdjacent = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} ${direction} of ${programNumber}` );\n\n    // Look at the other program and see if it has a ConnectionElement to connect to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n\n    if ( otherConnectionElement ) {\n\n      // if it does, add this connection element as a child\n      otherConnectionElement.addChild( phet.paperLand.getModelComponent( `${programNumber}-connectionElement` ) );\n    }\n  };\n\n  const onProgramSeparated = ( programNumber, otherProgramNumber, direction, scratchpad, sharedData ) => {\n    phet.paperLand.console.log( `${otherProgramNumber} detached from ${programNumber} ${direction}` );\n\n    // Look at the other program and see if it has a ConnectionElement that we are attached to\n    const otherConnectionElement = phet.paperLand.getProgramData( otherProgramNumber, 'connectionElement' );\n    if ( otherConnectionElement ) {\n      const thisElement = phet.paperLand.getModelComponent( `${programNumber}-connectionElement` );\n\n      if ( otherConnectionElement.children.includes( thisElement ) ) {\n        otherConnectionElement.removeChild( thisElement );\n      }\n    }\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.weavly-tests.1630.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/weavly-tests/programs/1630/debugInfo",
  "claimUrl": "/api/spaces/weavly-tests/programs/1630/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
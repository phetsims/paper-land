{
  "number": 311,
  "originalCode": "// All Vertex Controller\n// Keywords: controller\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Controls all vertices of the quadrilateral, each vertex is a corner of the program.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Create a function that converts from paper points to positions usable by the sim. Paper\n    // points have +y going down, so this gets the inverted y value and scales by display dimensions.\n    // TODO: Shouldn't it be scaled by CAMERA dimensions?? Why display dimensions?\n    scratchpad.pointToSimPosition = point => {\n      return new phet.dot.Vector2( point.x * sharedData.displaySize.width, ( 1 - point.y ) * sharedData.displaySize.height );\n    };\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    // Use each paper point to set each vertex positions. Paper points are ordered starting at the top left\n    // and then moving clockwise. Just like quadrilateral! Before setting, each point is transformed into \n    // a value that the sim can use (scaled to screen dimensions and inverted y) - a function was added\n    // to the scratchpad to support this.\n    if ( sharedData.model.has( 'vertexAPositionProperty' ) ) {\n      sharedData.model.get( 'vertexAPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 0 ] );\n    }\n    if ( sharedData.model.has( 'vertexBPositionProperty' ) ) {\n      sharedData.model.get( 'vertexBPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 1 ] );\n    }\n    if ( sharedData.model.has( 'vertexCPositionProperty' ) ) {\n      sharedData.model.get( 'vertexCPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 2 ] );\n    }\n    if ( sharedData.model.has( 'vertexDPositionProperty' ) ) {\n      sharedData.model.get( 'vertexDPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 3 ] );\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "currentCode": "// All Vertex Controller\n// Keywords: controller\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Controls all vertices of the quadrilateral, each vertex is a corner of the program.\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Get the paper number of this piece of paper (which should not change).\n  const myPaperNumber = await paper.get('number');\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    // Create a function that converts from paper points to positions usable by the sim. Paper\n    // points have +y going down, so this gets the inverted y value and scales by display dimensions.\n    // TODO: Shouldn't it be scaled by CAMERA dimensions?? Why display dimensions?\n    scratchpad.pointToSimPosition = point => {\n      return new phet.dot.Vector2( point.x * sharedData.displaySize.width, ( 1 - point.y ) * sharedData.displaySize.height );\n    };\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchpad, sharedData ) => {\n\n    // Use each paper point to set each vertex positions. Paper points are ordered starting at the top left\n    // and then moving clockwise. Just like quadrilateral! Before setting, each point is transformed into \n    // a value that the sim can use (scaled to screen dimensions and inverted y) - a function was added\n    // to the scratchpad to support this.\n    if ( sharedData.model.has( 'vertexAPositionProperty' ) ) {\n      sharedData.model.get( 'vertexAPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 0 ] );\n    }\n    if ( sharedData.model.has( 'vertexBPositionProperty' ) ) {\n      sharedData.model.get( 'vertexBPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 1 ] );\n    }\n    if ( sharedData.model.has( 'vertexCPositionProperty' ) ) {\n      sharedData.model.get( 'vertexCPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 2 ] );\n    }\n    if ( sharedData.model.has( 'vertexDPositionProperty' ) ) {\n      sharedData.model.get( 'vertexDPositionProperty' ).value = scratchpad.pointToSimPosition( positionPoints[ 3 ] );\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n\n  // Get a \"supporter canvas\", which is a canvas for the entire\n  // projection surface.\n  const supporterCanvas = await paper.get('supporterCanvas');\n  const supporterCtx = supporterCanvas.getContext('2d');\n\n  // Repeat every 100 milliseconds.\n  setInterval(async () => {\n    // Get a list of all the papers.\n    const papers = await paper.get('papers');\n\n    // Clear out the supporter canvas. We get our own canvas, so we won't\n    // interfere with other programs by doing this.\n    supporterCtx.clearRect(0, 0, supporterCanvas.width, supporterCanvas.height);\n\n    // Draw a circle in the center of our paper.\n    const myCenter = papers[myPaperNumber].points.center;\n    supporterCtx.fillStyle = supporterCtx.strokeStyle = 'rgb(0, 255, 255)';\n    supporterCtx.beginPath();\n    supporterCtx.arc(myCenter.x, myCenter.y, 10, 0, 2*Math.PI);\n    supporterCtx.fill();\n\n    // Draw a line from our paper to each other paper.\n    Object.keys(papers).forEach(otherPaperNumber => {\n      if (otherPaperNumber !== myPaperNumber) {\n        const otherCenter = papers[otherPaperNumber].points.center;\n\n        supporterCtx.beginPath();\n        supporterCtx.moveTo(myCenter.x, myCenter.y);\n        supporterCtx.lineTo(otherCenter.x, otherCenter.y);\n        supporterCtx.stroke();\n      }\n    });\n  }, 100);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.quadrilateral-sim-demo.311.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/quadrilateral-sim-demo/programs/311/debugInfo",
  "claimUrl": "/api/spaces/quadrilateral-sim-demo/programs/311/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
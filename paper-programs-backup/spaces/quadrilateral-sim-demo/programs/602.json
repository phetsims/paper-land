{
  "number": 602,
  "originalCode": "// Quadrilateral iFrame and Connect\n// Keywords: lol, hacks, sim, model, iframe\n// Program Dependencies: N/A\n// Recommended Programs: VertexA-D Controller\n// Program Description: Puts the Quadrilateral simulation in an iframe and\n// controls vertices with papers!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Create model components (Properties that can change) when the program is added.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    scratchpad.iframe = document.createElement( 'iframe' );\n    scratchpad.iframe.src = 'https://phet-dev.colorado.edu/html/quadrilateral/1.0.0-paperLandTest.1/phet/quadrilateral_all_phet.html?brand=phet&ea&debugger&deviceConnection&postMessageOnLoad&voicingInitiallyEnabled';\n    // scratchpad.iframe.src = 'http://localhost:8080/quadrilateral/quadrilateral_en.html?brand=phet&ea&debugger&deviceConnection&postMessageOnLoad&voicingInitiallyEnabled'\n    document.body.appendChild( scratchpad.iframe );\n\n    const loadMessage = JSON.stringify( {\n      type: 'quadrilateralCalibration',\n      width: sharedData.displaySize.width,\n      height: sharedData.displaySize.height\n    } );\n\n    const iframeWindow = scratchpad.iframe.contentWindow;\n    iframeWindow.postMessage( loadMessage, '*' );\n\n    scratchpad.windowMessageListener = event => {\n      const data = JSON.parse( event.data );\n\n      if ( data.type === 'load' ) {\n        iframeWindow.postMessage( loadMessage, '*' );\n      }\n    };\n    window.addEventListener( 'message', scratchpad.windowMessageListener );\n\n    // model Properties for each Vertex position\n    phet.paperLand.addModelComponent( 'vertexAPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n    phet.paperLand.addModelComponent( 'vertexBPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n    phet.paperLand.addModelComponent( 'vertexCPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n    phet.paperLand.addModelComponent( 'vertexDPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n\n    const globalModel = sharedData.model;\n    \n    scratchpad.multilink = phet.axon.Multilink.multilink( \n      [ globalModel.get( 'vertexAPositionProperty' ), globalModel.get( 'vertexBPositionProperty' ), globalModel.get( 'vertexCPositionProperty' ), globalModel.get( 'vertexDPositionProperty' ) ],\n      ( aPosition, bPosition, cPosition, dPosition ) => {\n        console.log( aPosition );\n\n        // The simulation receives a message and knows how to use this data to set vertex positions.\n        iframeWindow.postMessage( JSON.stringify( {\n          type: 'quadrilateralControl', \n          vertexA: {\n            x: aPosition.x,\n            y: aPosition.y\n          },\n          vertexB: {\n            x: bPosition.x,\n            y: bPosition.y\n          },\n          vertexC: {\n            x: cPosition.x,\n            y: cPosition.y  \n          },\n          vertexD: {\n            x: dPosition.x,\n            y: dPosition.y\n          },\n          } ), '*' );\n      }\n    )\n  };\n\n  // This is tear down code that removes the programs when phyical papers are removed \n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    document.body.removeChild( scratchpad.iframe );\n    delete scratchpad.iframe;\n\n    window.removeEventListener( 'message', scratchpad.windowMessageListener );\n    delete scratchpad.windowMessageListener;\n\n    scratchpad.multilink.dispose();\n    delete scratchpad.multilink;\n\n    phet.paperLand.removeModelComponent( 'vertexAPositionProperty' );\n    phet.paperLand.removeModelComponent( 'vertexBPositionProperty' );\n    phet.paperLand.removeModelComponent( 'vertexCPositionProperty' );\n    phet.paperLand.removeModelComponent( 'vertexDPositionProperty' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Quad', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Test', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "currentCode": "// Quadrilateral iFrame and Connect\n// Keywords: lol, hacks, sim, model, iframe\n// Program Dependencies: N/A\n// Recommended Programs: VertexA-D Controller\n// Program Description: Puts the Quadrilateral simulation in an iframe and\n// controls vertices with papers!\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Create model components (Properties that can change) when the program is added.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n\n    scratchpad.iframe = document.createElement( 'iframe' );\n    scratchpad.iframe.src = 'https://phet-dev.colorado.edu/html/quadrilateral/1.0.0-paperLandTest.1/phet/quadrilateral_all_phet.html?brand=phet&ea&debugger&deviceConnection&postMessageOnLoad&voicingInitiallyEnabled';\n    // scratchpad.iframe.src = 'http://localhost:8080/quadrilateral/quadrilateral_en.html?brand=phet&ea&debugger&deviceConnection&postMessageOnLoad&voicingInitiallyEnabled'\n    document.body.appendChild( scratchpad.iframe );\n\n    const loadMessage = JSON.stringify( {\n      type: 'quadrilateralCalibration',\n      width: sharedData.displaySize.width,\n      height: sharedData.displaySize.height\n    } );\n\n    const iframeWindow = scratchpad.iframe.contentWindow;\n    iframeWindow.postMessage( loadMessage, '*' );\n\n    scratchpad.windowMessageListener = event => {\n      const data = JSON.parse( event.data );\n\n      if ( data.type === 'load' ) {\n        iframeWindow.postMessage( loadMessage, '*' );\n      }\n    };\n    window.addEventListener( 'message', scratchpad.windowMessageListener );\n\n    // model Properties for each Vertex position\n    phet.paperLand.addModelComponent( 'vertexAPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n    phet.paperLand.addModelComponent( 'vertexBPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n    phet.paperLand.addModelComponent( 'vertexCPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n    phet.paperLand.addModelComponent( 'vertexDPositionProperty', new phet.axon.Property( new phet.dot.Vector2( 0, 0 ) ) );\n\n    const globalModel = sharedData.model;\n    \n    scratchpad.multilink = phet.axon.Multilink.multilink( \n      [ globalModel.get( 'vertexAPositionProperty' ), globalModel.get( 'vertexBPositionProperty' ), globalModel.get( 'vertexCPositionProperty' ), globalModel.get( 'vertexDPositionProperty' ) ],\n      ( aPosition, bPosition, cPosition, dPosition ) => {\n        console.log( aPosition );\n\n        // The simulation receives a message and knows how to use this data to set vertex positions.\n        iframeWindow.postMessage( JSON.stringify( {\n          type: 'quadrilateralControl', \n          vertexA: {\n            x: aPosition.x,\n            y: aPosition.y\n          },\n          vertexB: {\n            x: bPosition.x,\n            y: bPosition.y\n          },\n          vertexC: {\n            x: cPosition.x,\n            y: cPosition.y  \n          },\n          vertexD: {\n            x: dPosition.x,\n            y: dPosition.y\n          },\n          } ), '*' );\n      }\n    )\n  };\n\n  // This is tear down code that removes the programs when phyical papers are removed \n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n    document.body.removeChild( scratchpad.iframe );\n    delete scratchpad.iframe;\n\n    window.removeEventListener( 'message', scratchpad.windowMessageListener );\n    delete scratchpad.windowMessageListener;\n\n    scratchpad.multilink.dispose();\n    delete scratchpad.multilink;\n\n    phet.paperLand.removeModelComponent( 'vertexAPositionProperty' );\n    phet.paperLand.removeModelComponent( 'vertexBPositionProperty' );\n    phet.paperLand.removeModelComponent( 'vertexCPositionProperty' );\n    phet.paperLand.removeModelComponent( 'vertexDPositionProperty' );\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  // Get a canvas object for this paper.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program on the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Quad', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('Test', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.quadrilateral-sim-demo.602.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/quadrilateral-sim-demo/programs/602/debugInfo",
  "claimUrl": "/api/spaces/quadrilateral-sim-demo/programs/602/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
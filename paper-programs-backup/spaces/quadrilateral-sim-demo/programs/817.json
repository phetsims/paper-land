{
  "number": 817,
  "originalCode": "// VertexC Controller\n// Keywords: vertex, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Controls Vertex C in the Quadrilateral simulation\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    const model = sharedData.model;\n    const displayCenter = new phet.dot.Vector2(\n      ( positionPoints[ 0 ].x + ( positionPoints[ 2 ].x - positionPoints[ 0 ].x ) / 2 ) * sharedData.displaySize.width,\n      ( 1 - ( positionPoints[ 0 ].y + ( positionPoints[ 2 ].y - positionPoints[ 0 ].y ) / 2 ) ) * sharedData.displaySize.height,\n    )\n\n    if ( model.has('vertexCPositionProperty') ) {\n      model.get('vertexCPositionProperty').value = displayCenter;\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "currentCode": "// VertexC Controller\n// Keywords: vertex, paper\n// =============================== //\n// Program Dependencies: N/A\n// Recommended Programs: General Template (templates)\n// Program Description: Controls Vertex C in the Quadrilateral simulation\n\nimportScripts('paper.js');\n\n(async () => {\n\n  //----------------------------------------------------------------------\n  // Board code\n  //----------------------------------------------------------------------\n\n  // Called when the program is detected or changed.\n  const onProgramAdded = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Called when the paper positions change.\n  const onProgramChangedPosition = ( paperProgramNumber, positionPoints, scratchPad, sharedData ) => {\n    const model = sharedData.model;\n    const displayCenter = new phet.dot.Vector2(\n      ( positionPoints[ 0 ].x + ( positionPoints[ 2 ].x - positionPoints[ 0 ].x ) / 2 ) * sharedData.displaySize.width,\n      ( 1 - ( positionPoints[ 0 ].y + ( positionPoints[ 2 ].y - positionPoints[ 0 ].y ) / 2 ) ) * sharedData.displaySize.height,\n    )\n\n    if ( model.has('vertexCPositionProperty') ) {\n      model.get('vertexCPositionProperty').value = displayCenter;\n    }\n  };\n\n  // Called when the program is changed or no longer detected.\n  const onProgramRemoved = ( paperProgramNumber, scratchpad, sharedData ) => {\n  };\n\n  // Add the state change handler defined above as data for this paper.\n  await paper.set('data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramRemoved: onProgramRemoved.toString()\n      }\n    }\n  } );\n\n  //----------------------------------------------------------------------\n  // Projector code\n  //----------------------------------------------------------------------\n\n  const canvas = await paper.get('canvas');\n\n  // Draw \"Hello world\" on the canvas.\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('Hello', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.fillText('world', canvas.width / 2, canvas.height / 2 + 20);\n})();\n\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.quadrilateral-sim-demo.817.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/quadrilateral-sim-demo/programs/817/debugInfo",
  "claimUrl": "/api/spaces/quadrilateral-sim-demo/programs/817/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
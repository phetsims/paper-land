{
  "number": 2,
  "originalCode": "// Plant A\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const plantAWatering = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'plantAWatering', plantAWatering );\n    \n\n      const plantAPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'plantAPosition', plantAPosition );\n    \n\n      const plantAGrowthPhase = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 5 )\n      });\n      phet.paperLand.addModelComponent( 'plantAGrowthPhase', plantAGrowthPhase );\n    \n\n      const plantAWater = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantAWater', plantAWater );\n    \n\n      const plantAWateringSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/accordionBoxOpen.mp3' );\n      const plantAWateringSoundSoundClip = new phet.tambo.SoundClip( plantAWateringSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantAWateringSoundSoundClip );\n      scratchpad.plantAWateringSoundWrappedAudioBuffer = plantAWateringSoundWrappedAudioBuffer;\n      \n      let plantAWateringSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantAWateringSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantAWateringSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantAWateringSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAWatering' ], ( plantAWatering ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantAWateringSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantAWateringSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantAWateringSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantAWateringSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantAWateringSoundSoundClip.isPlaying ) {\n                  plantAWateringSoundSoundClip.play();\n                }\n                plantAWateringSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantAWateringSoundStopSoundTimeout ){\n                  window.clearTimeout( plantAWateringSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantAWateringSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantAWateringSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantAWateringSoundStopSoundTimeout ){\n                window.clearTimeout( plantAWateringSoundStopSoundTimeout );\n              }\n              plantAWateringSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantAWatering ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantAWateringSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantAWateringSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantAWateringSoundSoundClip = plantAWateringSoundSoundClip;\n    \n\n      const plantAGrowthPhaseSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/trillOne.wav' );\n      const plantAGrowthPhaseSoundSoundClip = new phet.tambo.SoundClip( plantAGrowthPhaseSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantAGrowthPhaseSoundSoundClip );\n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBuffer = plantAGrowthPhaseSoundWrappedAudioBuffer;\n      \n      let plantAGrowthPhaseSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantAGrowthPhaseSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantAGrowthPhaseSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAGrowthPhase' ], ( plantAGrowthPhase ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantAGrowthPhaseSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantAGrowthPhaseSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantAGrowthPhaseSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantAGrowthPhaseSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantAGrowthPhaseSoundSoundClip.isPlaying ) {\n                  plantAGrowthPhaseSoundSoundClip.play();\n                }\n                plantAGrowthPhaseSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantAGrowthPhaseSoundStopSoundTimeout ){\n                  window.clearTimeout( plantAGrowthPhaseSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantAGrowthPhaseSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantAGrowthPhaseSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantAGrowthPhaseSoundStopSoundTimeout ){\n                window.clearTimeout( plantAGrowthPhaseSoundStopSoundTimeout );\n              }\n              plantAGrowthPhaseSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantAGrowthPhase > 0 && plantAGrowthPhase < 6 ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantAGrowthPhaseSoundSoundClip = plantAGrowthPhaseSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let plantAImageImageElement = document.createElement( 'img' );\n      plantAImageImageElement.src = 'media/images/baked.png';\n      const plantAImageImage = new phet.scenery.Image( plantAImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const plantAImageImageLoadProperty = new phet.axon.Property( 0 );\n      plantAImageImageElement.addEventListener( 'load', () => { plantAImageImageLoadProperty.value = plantAImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( plantAImageImage );\n      scratchpad.plantAImageImage = plantAImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.plantAImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAPosition', 'plantAGrowthPhase' ], async ( plantAPosition, plantAGrowthPhase ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        plantAImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        plantAImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        plantAImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        plantAImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        plantAImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        plantAImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        plantAImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        plantAImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        plantAImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        plantAImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const plantAImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( plantAImageImage.localBounds.width || 1 ) / ( plantAImageImage.localBounds.height || 1 );\n\n        const scaleX = plantAImageImageViewBounds.width / ( plantAImageImage.localBounds.width || 1 );\n        const scaleY = plantAImageImageViewBounds.height / ( plantAImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          plantAImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          plantAImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        plantAImageImage.center = plantAImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( plantAImageImage.image ) {\n              const startIndex = plantAImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = plantAImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const plantAImageImageImageElement = document.createElement( 'img' );\n              plantAImageImageImageElement.src = newImageName;\n              plantAImageImage.image = plantAImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              plantAImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( plantAPosition.x );\nsetCenterY( plantAPosition.y );\n\nif ( plantAGrowthPhase === 0 ) {\n    await setImage( 'peace-lily1.png' );\n}\nelse if ( plantAGrowthPhase === 1 ) {\n    await setImage( 'peace-lily2.png' );\n}\nelse if ( plantAGrowthPhase === 2 ) {\n    await setImage( 'peace-lily3.png' );\n}\nelse if ( plantAGrowthPhase === 3 ) {\n    await setImage( 'peace-lily4.png' );\n}\nelse if ( plantAGrowthPhase === 4 ) {\n    await setImage( 'peace-lily5.png' );\n}\nelse if ( plantAGrowthPhase === 5 ) {\n    await setImage( 'peace-lily6.png' );\n}\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, plantAImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      scratchpad.plantAWaterControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAWatering' ], ( plantAWatering ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantAWater' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const plantAWater = phet.paperLand.getModelComponent( 'plantAWater' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setPlantAWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAWater' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          if ( plantAWatering ) {\n    setPlantAWater( 10 );\n}   \n        }\n      } );\n    \n\n      const waterAnimationControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantAWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantAWater = phet.paperLand.getModelComponent( 'plantAWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantAWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          const rate = 1; // Controls how fast the water level decreases\nconst amount = rate * dt; // Calculates the amount to decrease the water level by based on the time step\n\nsetPlantAWater(plantAWater - amount); // Decreases the water level by the calculated amount \n        }\n      };\n      scratchpad.waterAnimationControllerAnimationListener = waterAnimationControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( waterAnimationControllerAnimationListener );\n      \n    \n\n      const growthPhaseControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantAGrowthPhase', 'plantAWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantAGrowthPhase = phet.paperLand.getModelComponent( 'plantAGrowthPhase' ).value;\nconst plantAWater = phet.paperLand.getModelComponent( 'plantAWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantAGrowthPhase = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAGrowthPhase' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPlantAWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            if ( plantAWater > 0 ) {\n    if(!window.lastUpdateTimeForA) {\n        window.lastUpdateTimeForA = elapsedTime;\n    }\n    \n    let timeSinceLastUpdate = elapsedTime - window.lastUpdateTimeForA;\n    \n    if (timeSinceLastUpdate >= 3) {\n        setPlantAGrowthPhase(Math.min( plantAGrowthPhase + 1, 5 ) );\n        window.lastUpdateTimeForA = elapsedTime;\n    }\n  }\n \n        }\n      };\n      scratchpad.growthPhaseControllerAnimationListener = growthPhaseControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( growthPhaseControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAWatering' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAGrowthPhase' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAWater' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantAWateringSoundSoundClip );\n      delete scratchpad.plantAWateringSoundSoundClip;\n      \n      scratchpad.plantAWateringSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantAWateringSoundWrappedAudioBufferListener );\n      delete scratchpad.plantAWateringSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAWatering' ], scratchpad.plantAWateringSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantAWateringSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantAGrowthPhaseSoundSoundClip );\n      delete scratchpad.plantAGrowthPhaseSoundSoundClip;\n      \n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener );\n      delete scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAGrowthPhase' ], scratchpad.plantAGrowthPhaseSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantAGrowthPhaseSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.plantAImageImage );\n      delete scratchpad.plantAImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAPosition', 'plantAGrowthPhase' ], scratchpad.plantAImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.plantAImageImageMultilinkId;\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAWatering' ], scratchpad.plantAWaterControllerMultilinkId );\n      delete scratchpad.plantAWaterControllerMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.waterAnimationControllerAnimationListener );\n      delete scratchpad.waterAnimationControllerAnimationListener;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.growthPhaseControllerAnimationListener );\n      delete scratchpad.growthPhaseControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty204 = phet.paperLand.getModelComponent( 'plantAPosition' );\n    if ( modelProperty204 ) {\n      modelProperty204.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty211 = phet.paperLand.getModelComponent( 'plantAWatering' );\n    if ( modelProperty211 ) {\n      modelProperty211.value = otherPaperNumber === 6;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty214 = phet.paperLand.getModelComponent( 'plantAWatering' );\n    if ( modelProperty214 ) {\n      modelProperty214.value = otherPaperNumber === 6 ? false : modelProperty214.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Plant A', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Plant A\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const plantAWatering = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'plantAWatering', plantAWatering );\n    \n\n      const plantAPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'plantAPosition', plantAPosition );\n    \n\n      const plantAGrowthPhase = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 5 )\n      });\n      phet.paperLand.addModelComponent( 'plantAGrowthPhase', plantAGrowthPhase );\n    \n\n      const plantAWater = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantAWater', plantAWater );\n    \n\n      const plantAWateringSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/accordionBoxOpen.mp3' );\n      const plantAWateringSoundSoundClip = new phet.tambo.SoundClip( plantAWateringSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantAWateringSoundSoundClip );\n      scratchpad.plantAWateringSoundWrappedAudioBuffer = plantAWateringSoundWrappedAudioBuffer;\n      \n      let plantAWateringSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantAWateringSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantAWateringSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantAWateringSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAWatering' ], ( plantAWatering ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantAWateringSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantAWateringSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantAWateringSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantAWateringSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantAWateringSoundSoundClip.isPlaying ) {\n                  plantAWateringSoundSoundClip.play();\n                }\n                plantAWateringSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantAWateringSoundStopSoundTimeout ){\n                  window.clearTimeout( plantAWateringSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantAWateringSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantAWateringSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantAWateringSoundStopSoundTimeout ){\n                window.clearTimeout( plantAWateringSoundStopSoundTimeout );\n              }\n              plantAWateringSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantAWatering ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantAWateringSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantAWateringSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantAWateringSoundSoundClip = plantAWateringSoundSoundClip;\n    \n\n      const plantAGrowthPhaseSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/trillOne.wav' );\n      const plantAGrowthPhaseSoundSoundClip = new phet.tambo.SoundClip( plantAGrowthPhaseSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantAGrowthPhaseSoundSoundClip );\n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBuffer = plantAGrowthPhaseSoundWrappedAudioBuffer;\n      \n      let plantAGrowthPhaseSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantAGrowthPhaseSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantAGrowthPhaseSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAGrowthPhase' ], ( plantAGrowthPhase ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantAGrowthPhaseSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantAGrowthPhaseSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantAGrowthPhaseSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantAGrowthPhaseSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantAGrowthPhaseSoundSoundClip.isPlaying ) {\n                  plantAGrowthPhaseSoundSoundClip.play();\n                }\n                plantAGrowthPhaseSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantAGrowthPhaseSoundStopSoundTimeout ){\n                  window.clearTimeout( plantAGrowthPhaseSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantAGrowthPhaseSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantAGrowthPhaseSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantAGrowthPhaseSoundStopSoundTimeout ){\n                window.clearTimeout( plantAGrowthPhaseSoundStopSoundTimeout );\n              }\n              plantAGrowthPhaseSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantAGrowthPhase > 0 && plantAGrowthPhase < 6 ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantAGrowthPhaseSoundSoundClip = plantAGrowthPhaseSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let plantAImageImageElement = document.createElement( 'img' );\n      plantAImageImageElement.src = 'media/images/baked.png';\n      const plantAImageImage = new phet.scenery.Image( plantAImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const plantAImageImageLoadProperty = new phet.axon.Property( 0 );\n      plantAImageImageElement.addEventListener( 'load', () => { plantAImageImageLoadProperty.value = plantAImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( plantAImageImage );\n      scratchpad.plantAImageImage = plantAImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.plantAImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAPosition', 'plantAGrowthPhase' ], async ( plantAPosition, plantAGrowthPhase ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        plantAImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        plantAImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        plantAImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        plantAImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        plantAImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        plantAImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        plantAImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        plantAImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        plantAImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        plantAImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const plantAImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( plantAImageImage.localBounds.width || 1 ) / ( plantAImageImage.localBounds.height || 1 );\n\n        const scaleX = plantAImageImageViewBounds.width / ( plantAImageImage.localBounds.width || 1 );\n        const scaleY = plantAImageImageViewBounds.height / ( plantAImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          plantAImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          plantAImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        plantAImageImage.center = plantAImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( plantAImageImage.image ) {\n              const startIndex = plantAImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = plantAImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const plantAImageImageImageElement = document.createElement( 'img' );\n              plantAImageImageImageElement.src = newImageName;\n              plantAImageImage.image = plantAImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              plantAImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( plantAPosition.x );\nsetCenterY( plantAPosition.y );\n\nif ( plantAGrowthPhase === 0 ) {\n    await setImage( 'peace-lily1.png' );\n}\nelse if ( plantAGrowthPhase === 1 ) {\n    await setImage( 'peace-lily2.png' );\n}\nelse if ( plantAGrowthPhase === 2 ) {\n    await setImage( 'peace-lily3.png' );\n}\nelse if ( plantAGrowthPhase === 3 ) {\n    await setImage( 'peace-lily4.png' );\n}\nelse if ( plantAGrowthPhase === 4 ) {\n    await setImage( 'peace-lily5.png' );\n}\nelse if ( plantAGrowthPhase === 5 ) {\n    await setImage( 'peace-lily6.png' );\n}\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, plantAImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      scratchpad.plantAWaterControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantAWatering' ], ( plantAWatering ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantAWater' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const plantAWater = phet.paperLand.getModelComponent( 'plantAWater' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setPlantAWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAWater' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          if ( plantAWatering ) {\n    setPlantAWater( 10 );\n}   \n        }\n      } );\n    \n\n      const waterAnimationControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantAWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantAWater = phet.paperLand.getModelComponent( 'plantAWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantAWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          const rate = 1; // Controls how fast the water level decreases\nconst amount = rate * dt; // Calculates the amount to decrease the water level by based on the time step\n\nsetPlantAWater(plantAWater - amount); // Decreases the water level by the calculated amount \n        }\n      };\n      scratchpad.waterAnimationControllerAnimationListener = waterAnimationControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( waterAnimationControllerAnimationListener );\n      \n    \n\n      const growthPhaseControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantAGrowthPhase', 'plantAWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantAGrowthPhase = phet.paperLand.getModelComponent( 'plantAGrowthPhase' ).value;\nconst plantAWater = phet.paperLand.getModelComponent( 'plantAWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantAGrowthPhase = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAGrowthPhase' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPlantAWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantAWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            if ( plantAWater > 0 ) {\n    if(!window.lastUpdateTimeForA) {\n        window.lastUpdateTimeForA = elapsedTime;\n    }\n    \n    let timeSinceLastUpdate = elapsedTime - window.lastUpdateTimeForA;\n    \n    if (timeSinceLastUpdate >= 3) {\n        setPlantAGrowthPhase(Math.min( plantAGrowthPhase + 1, 5 ) );\n        window.lastUpdateTimeForA = elapsedTime;\n    }\n  }\n \n        }\n      };\n      scratchpad.growthPhaseControllerAnimationListener = growthPhaseControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( growthPhaseControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAWatering' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAGrowthPhase' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantAWater' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantAWateringSoundSoundClip );\n      delete scratchpad.plantAWateringSoundSoundClip;\n      \n      scratchpad.plantAWateringSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantAWateringSoundWrappedAudioBufferListener );\n      delete scratchpad.plantAWateringSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAWatering' ], scratchpad.plantAWateringSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantAWateringSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantAGrowthPhaseSoundSoundClip );\n      delete scratchpad.plantAGrowthPhaseSoundSoundClip;\n      \n      scratchpad.plantAGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener );\n      delete scratchpad.plantAGrowthPhaseSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAGrowthPhase' ], scratchpad.plantAGrowthPhaseSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantAGrowthPhaseSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.plantAImageImage );\n      delete scratchpad.plantAImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAPosition', 'plantAGrowthPhase' ], scratchpad.plantAImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.plantAImageImageMultilinkId;\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantAWatering' ], scratchpad.plantAWaterControllerMultilinkId );\n      delete scratchpad.plantAWaterControllerMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.waterAnimationControllerAnimationListener );\n      delete scratchpad.waterAnimationControllerAnimationListener;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.growthPhaseControllerAnimationListener );\n      delete scratchpad.growthPhaseControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty204 = phet.paperLand.getModelComponent( 'plantAPosition' );\n    if ( modelProperty204 ) {\n      modelProperty204.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty211 = phet.paperLand.getModelComponent( 'plantAWatering' );\n    if ( modelProperty211 ) {\n      modelProperty211.value = otherPaperNumber === 6;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty214 = phet.paperLand.getModelComponent( 'plantAWatering' );\n    if ( modelProperty214 ) {\n      modelProperty214.value = otherPaperNumber === 6 ? false : modelProperty214.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Plant A', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-demos.2.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-demos/programs/2/debugInfo",
  "claimUrl": "/api/spaces/creator-demos/programs/2/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
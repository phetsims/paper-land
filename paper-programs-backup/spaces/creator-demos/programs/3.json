{
  "number": 3,
  "originalCode": "// Plant B\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const plantBWatering = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'plantBWatering', plantBWatering );\n    \n\n      const plantBPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'plantBPosition', plantBPosition );\n    \n\n      const plantBGrowthPhase = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantBGrowthPhase', plantBGrowthPhase );\n    \n\n      const plantBWater = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantBWater', plantBWater );\n    \n\n      const plantBWateringSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/accordionBoxOpen.mp3' );\n      const plantBWateringSoundSoundClip = new phet.tambo.SoundClip( plantBWateringSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantBWateringSoundSoundClip );\n      scratchpad.plantBWateringSoundWrappedAudioBuffer = plantBWateringSoundWrappedAudioBuffer;\n      \n      let plantBWateringSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantBWateringSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantBWateringSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantBWateringSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBWatering' ], ( plantBWatering ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantBWateringSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantBWateringSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantBWateringSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantBWateringSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantBWateringSoundSoundClip.isPlaying ) {\n                  plantBWateringSoundSoundClip.play();\n                }\n                plantBWateringSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantBWateringSoundStopSoundTimeout ){\n                  window.clearTimeout( plantBWateringSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantBWateringSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantBWateringSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantBWateringSoundStopSoundTimeout ){\n                window.clearTimeout( plantBWateringSoundStopSoundTimeout );\n              }\n              plantBWateringSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantBWatering ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantBWateringSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantBWateringSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantBWateringSoundSoundClip = plantBWateringSoundSoundClip;\n    \n\n      const plantBGrowthPhaseSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/trillOne.wav' );\n      const plantBGrowthPhaseSoundSoundClip = new phet.tambo.SoundClip( plantBGrowthPhaseSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantBGrowthPhaseSoundSoundClip );\n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBuffer = plantBGrowthPhaseSoundWrappedAudioBuffer;\n      \n      let plantBGrowthPhaseSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantBGrowthPhaseSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantBGrowthPhaseSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBGrowthPhase' ], ( plantBGrowthPhase ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantBGrowthPhaseSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantBGrowthPhaseSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantBGrowthPhaseSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantBGrowthPhaseSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantBGrowthPhaseSoundSoundClip.isPlaying ) {\n                  plantBGrowthPhaseSoundSoundClip.play();\n                }\n                plantBGrowthPhaseSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantBGrowthPhaseSoundStopSoundTimeout ){\n                  window.clearTimeout( plantBGrowthPhaseSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantBGrowthPhaseSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantBGrowthPhaseSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantBGrowthPhaseSoundStopSoundTimeout ){\n                window.clearTimeout( plantBGrowthPhaseSoundStopSoundTimeout );\n              }\n              plantBGrowthPhaseSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantBGrowthPhase > 0 && plantBGrowthPhase < 6 ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantBGrowthPhaseSoundSoundClip = plantBGrowthPhaseSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let plantBImageImageElement = document.createElement( 'img' );\n      plantBImageImageElement.src = 'media/images/baked.png';\n      const plantBImageImage = new phet.scenery.Image( plantBImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const plantBImageImageLoadProperty = new phet.axon.Property( 0 );\n      plantBImageImageElement.addEventListener( 'load', () => { plantBImageImageLoadProperty.value = plantBImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( plantBImageImage );\n      scratchpad.plantBImageImage = plantBImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.plantBImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBPosition', 'plantBGrowthPhase' ], async ( plantBPosition, plantBGrowthPhase ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        plantBImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        plantBImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        plantBImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        plantBImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        plantBImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        plantBImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        plantBImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        plantBImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        plantBImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        plantBImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const plantBImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( plantBImageImage.localBounds.width || 1 ) / ( plantBImageImage.localBounds.height || 1 );\n\n        const scaleX = plantBImageImageViewBounds.width / ( plantBImageImage.localBounds.width || 1 );\n        const scaleY = plantBImageImageViewBounds.height / ( plantBImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          plantBImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          plantBImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        plantBImageImage.center = plantBImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( plantBImageImage.image ) {\n              const startIndex = plantBImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = plantBImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const plantBImageImageImageElement = document.createElement( 'img' );\n              plantBImageImageImageElement.src = newImageName;\n              plantBImageImage.image = plantBImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              plantBImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( plantBPosition.x );\nsetCenterY( plantBPosition.y );\n\nif ( plantBGrowthPhase === 0 ) {\n    await setImage( 'blue-orchid1.png' );\n}\nelse if ( plantBGrowthPhase === 1 ) {\n    await setImage( 'blue-orchid2.png' );\n}\nelse if ( plantBGrowthPhase === 2 ) {\n    await setImage( 'blue-orchid3.png' );\n}\nelse if ( plantBGrowthPhase === 3 ) {\n    await setImage( 'blue-orchid4.png' );\n}\nelse if ( plantBGrowthPhase === 4 ) {\n    await setImage( 'blue-orchid5.png' );\n}\nelse if ( plantBGrowthPhase === 5 ) {\n    await setImage( 'blue-orchid6.png' );\n}\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, plantBImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      scratchpad.plantBWaterControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBWatering' ], ( plantBWatering ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantBWater' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const plantBWater = phet.paperLand.getModelComponent( 'plantBWater' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setPlantBWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBWater' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          if ( plantBWatering ) {\n    setPlantBWater( 10 );\n}   \n        }\n      } );\n    \n\n      const plantBGrowthPhaseControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantBGrowthPhase', 'plantBWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantBGrowthPhase = phet.paperLand.getModelComponent( 'plantBGrowthPhase' ).value;\nconst plantBWater = phet.paperLand.getModelComponent( 'plantBWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantBGrowthPhase = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBGrowthPhase' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPlantBWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            if ( plantBWater > 0 ) {\n    if(!window.lastUpdateForB) {\n        window.lastUpdateForB = elapsedTime;\n    }\n    \n    let timeSinceLastUpdate = elapsedTime - window.lastUpdateForB;\n    \n    if (timeSinceLastUpdate >= 3) {\n        setPlantBGrowthPhase(Math.min( plantBGrowthPhase + 1, 5 ) );\n        window.lastUpdateForB = elapsedTime;\n    }\n  }\n \n        }\n      };\n      scratchpad.plantBGrowthPhaseControllerAnimationListener = plantBGrowthPhaseControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantBGrowthPhaseControllerAnimationListener );\n      \n    \n\n      const plantBWaterAnimationControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantBWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantBWater = phet.paperLand.getModelComponent( 'plantBWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantBWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          const rate = 1; // Controls how fast the water level decreases\nconst amount = rate * dt; // Calculates the amount to decrease the water level by based on the time step\n\nsetPlantBWater(plantBWater - amount); // Decreases the water level by the calculated amount \n        }\n      };\n      scratchpad.plantBWaterAnimationControllerAnimationListener = plantBWaterAnimationControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantBWaterAnimationControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBWatering' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBGrowthPhase' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBWater' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantBWateringSoundSoundClip );\n      delete scratchpad.plantBWateringSoundSoundClip;\n      \n      scratchpad.plantBWateringSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantBWateringSoundWrappedAudioBufferListener );\n      delete scratchpad.plantBWateringSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBWatering' ], scratchpad.plantBWateringSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantBWateringSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantBGrowthPhaseSoundSoundClip );\n      delete scratchpad.plantBGrowthPhaseSoundSoundClip;\n      \n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener );\n      delete scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBGrowthPhase' ], scratchpad.plantBGrowthPhaseSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantBGrowthPhaseSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.plantBImageImage );\n      delete scratchpad.plantBImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBPosition', 'plantBGrowthPhase' ], scratchpad.plantBImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.plantBImageImageMultilinkId;\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBWatering' ], scratchpad.plantBWaterControllerMultilinkId );\n      delete scratchpad.plantBWaterControllerMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantBGrowthPhaseControllerAnimationListener );\n      delete scratchpad.plantBGrowthPhaseControllerAnimationListener;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantBWaterAnimationControllerAnimationListener );\n      delete scratchpad.plantBWaterAnimationControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty216 = phet.paperLand.getModelComponent( 'plantBPosition' );\n    if ( modelProperty216 ) {\n      modelProperty216.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty223 = phet.paperLand.getModelComponent( 'plantBWatering' );\n    if ( modelProperty223 ) {\n      modelProperty223.value = otherPaperNumber === 6;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty226 = phet.paperLand.getModelComponent( 'plantBWatering' );\n    if ( modelProperty226 ) {\n      modelProperty226.value = otherPaperNumber === 6 ? false : modelProperty226.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Plant B', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Plant B\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const plantBWatering = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'plantBWatering', plantBWatering );\n    \n\n      const plantBPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'plantBPosition', plantBPosition );\n    \n\n      const plantBGrowthPhase = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantBGrowthPhase', plantBGrowthPhase );\n    \n\n      const plantBWater = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantBWater', plantBWater );\n    \n\n      const plantBWateringSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/accordionBoxOpen.mp3' );\n      const plantBWateringSoundSoundClip = new phet.tambo.SoundClip( plantBWateringSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantBWateringSoundSoundClip );\n      scratchpad.plantBWateringSoundWrappedAudioBuffer = plantBWateringSoundWrappedAudioBuffer;\n      \n      let plantBWateringSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantBWateringSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantBWateringSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantBWateringSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBWatering' ], ( plantBWatering ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantBWateringSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantBWateringSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantBWateringSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantBWateringSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantBWateringSoundSoundClip.isPlaying ) {\n                  plantBWateringSoundSoundClip.play();\n                }\n                plantBWateringSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantBWateringSoundStopSoundTimeout ){\n                  window.clearTimeout( plantBWateringSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantBWateringSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantBWateringSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantBWateringSoundStopSoundTimeout ){\n                window.clearTimeout( plantBWateringSoundStopSoundTimeout );\n              }\n              plantBWateringSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantBWatering ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantBWateringSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantBWateringSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantBWateringSoundSoundClip = plantBWateringSoundSoundClip;\n    \n\n      const plantBGrowthPhaseSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/trillOne.wav' );\n      const plantBGrowthPhaseSoundSoundClip = new phet.tambo.SoundClip( plantBGrowthPhaseSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantBGrowthPhaseSoundSoundClip );\n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBuffer = plantBGrowthPhaseSoundWrappedAudioBuffer;\n      \n      let plantBGrowthPhaseSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantBGrowthPhaseSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantBGrowthPhaseSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBGrowthPhase' ], ( plantBGrowthPhase ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantBGrowthPhaseSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantBGrowthPhaseSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantBGrowthPhaseSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantBGrowthPhaseSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantBGrowthPhaseSoundSoundClip.isPlaying ) {\n                  plantBGrowthPhaseSoundSoundClip.play();\n                }\n                plantBGrowthPhaseSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantBGrowthPhaseSoundStopSoundTimeout ){\n                  window.clearTimeout( plantBGrowthPhaseSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantBGrowthPhaseSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantBGrowthPhaseSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantBGrowthPhaseSoundStopSoundTimeout ){\n                window.clearTimeout( plantBGrowthPhaseSoundStopSoundTimeout );\n              }\n              plantBGrowthPhaseSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantBGrowthPhase > 0 && plantBGrowthPhase < 6 ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantBGrowthPhaseSoundSoundClip = plantBGrowthPhaseSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let plantBImageImageElement = document.createElement( 'img' );\n      plantBImageImageElement.src = 'media/images/baked.png';\n      const plantBImageImage = new phet.scenery.Image( plantBImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const plantBImageImageLoadProperty = new phet.axon.Property( 0 );\n      plantBImageImageElement.addEventListener( 'load', () => { plantBImageImageLoadProperty.value = plantBImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( plantBImageImage );\n      scratchpad.plantBImageImage = plantBImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.plantBImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBPosition', 'plantBGrowthPhase' ], async ( plantBPosition, plantBGrowthPhase ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        plantBImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        plantBImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        plantBImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        plantBImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        plantBImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        plantBImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        plantBImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        plantBImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        plantBImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        plantBImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const plantBImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( plantBImageImage.localBounds.width || 1 ) / ( plantBImageImage.localBounds.height || 1 );\n\n        const scaleX = plantBImageImageViewBounds.width / ( plantBImageImage.localBounds.width || 1 );\n        const scaleY = plantBImageImageViewBounds.height / ( plantBImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          plantBImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          plantBImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        plantBImageImage.center = plantBImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( plantBImageImage.image ) {\n              const startIndex = plantBImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = plantBImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const plantBImageImageImageElement = document.createElement( 'img' );\n              plantBImageImageImageElement.src = newImageName;\n              plantBImageImage.image = plantBImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              plantBImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( plantBPosition.x );\nsetCenterY( plantBPosition.y );\n\nif ( plantBGrowthPhase === 0 ) {\n    await setImage( 'blue-orchid1.png' );\n}\nelse if ( plantBGrowthPhase === 1 ) {\n    await setImage( 'blue-orchid2.png' );\n}\nelse if ( plantBGrowthPhase === 2 ) {\n    await setImage( 'blue-orchid3.png' );\n}\nelse if ( plantBGrowthPhase === 3 ) {\n    await setImage( 'blue-orchid4.png' );\n}\nelse if ( plantBGrowthPhase === 4 ) {\n    await setImage( 'blue-orchid5.png' );\n}\nelse if ( plantBGrowthPhase === 5 ) {\n    await setImage( 'blue-orchid6.png' );\n}\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, plantBImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      scratchpad.plantBWaterControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantBWatering' ], ( plantBWatering ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantBWater' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const plantBWater = phet.paperLand.getModelComponent( 'plantBWater' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setPlantBWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBWater' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          if ( plantBWatering ) {\n    setPlantBWater( 10 );\n}   \n        }\n      } );\n    \n\n      const plantBGrowthPhaseControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantBGrowthPhase', 'plantBWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantBGrowthPhase = phet.paperLand.getModelComponent( 'plantBGrowthPhase' ).value;\nconst plantBWater = phet.paperLand.getModelComponent( 'plantBWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantBGrowthPhase = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBGrowthPhase' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPlantBWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            if ( plantBWater > 0 ) {\n    if(!window.lastUpdateForB) {\n        window.lastUpdateForB = elapsedTime;\n    }\n    \n    let timeSinceLastUpdate = elapsedTime - window.lastUpdateForB;\n    \n    if (timeSinceLastUpdate >= 3) {\n        setPlantBGrowthPhase(Math.min( plantBGrowthPhase + 1, 5 ) );\n        window.lastUpdateForB = elapsedTime;\n    }\n  }\n \n        }\n      };\n      scratchpad.plantBGrowthPhaseControllerAnimationListener = plantBGrowthPhaseControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantBGrowthPhaseControllerAnimationListener );\n      \n    \n\n      const plantBWaterAnimationControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantBWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantBWater = phet.paperLand.getModelComponent( 'plantBWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantBWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantBWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          const rate = 1; // Controls how fast the water level decreases\nconst amount = rate * dt; // Calculates the amount to decrease the water level by based on the time step\n\nsetPlantBWater(plantBWater - amount); // Decreases the water level by the calculated amount \n        }\n      };\n      scratchpad.plantBWaterAnimationControllerAnimationListener = plantBWaterAnimationControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantBWaterAnimationControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBWatering' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBGrowthPhase' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantBWater' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantBWateringSoundSoundClip );\n      delete scratchpad.plantBWateringSoundSoundClip;\n      \n      scratchpad.plantBWateringSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantBWateringSoundWrappedAudioBufferListener );\n      delete scratchpad.plantBWateringSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBWatering' ], scratchpad.plantBWateringSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantBWateringSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantBGrowthPhaseSoundSoundClip );\n      delete scratchpad.plantBGrowthPhaseSoundSoundClip;\n      \n      scratchpad.plantBGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener );\n      delete scratchpad.plantBGrowthPhaseSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBGrowthPhase' ], scratchpad.plantBGrowthPhaseSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantBGrowthPhaseSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.plantBImageImage );\n      delete scratchpad.plantBImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBPosition', 'plantBGrowthPhase' ], scratchpad.plantBImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.plantBImageImageMultilinkId;\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantBWatering' ], scratchpad.plantBWaterControllerMultilinkId );\n      delete scratchpad.plantBWaterControllerMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantBGrowthPhaseControllerAnimationListener );\n      delete scratchpad.plantBGrowthPhaseControllerAnimationListener;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantBWaterAnimationControllerAnimationListener );\n      delete scratchpad.plantBWaterAnimationControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty216 = phet.paperLand.getModelComponent( 'plantBPosition' );\n    if ( modelProperty216 ) {\n      modelProperty216.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty223 = phet.paperLand.getModelComponent( 'plantBWatering' );\n    if ( modelProperty223 ) {\n      modelProperty223.value = otherPaperNumber === 6;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty226 = phet.paperLand.getModelComponent( 'plantBWatering' );\n    if ( modelProperty226 ) {\n      modelProperty226.value = otherPaperNumber === 6 ? false : modelProperty226.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Plant B', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-demos.3.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-demos/programs/3/debugInfo",
  "claimUrl": "/api/spaces/creator-demos/programs/3/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
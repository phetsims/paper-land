{
  "number": 4,
  "originalCode": "// Plant C\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const plantCWatering = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'plantCWatering', plantCWatering );\n    \n\n      const plantCPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'plantCPosition', plantCPosition );\n    \n\n      const plantCGrowthPhase = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantCGrowthPhase', plantCGrowthPhase );\n    \n\n      const plantCWater = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantCWater', plantCWater );\n    \n\n      const plantCWateringSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/accordionBoxOpen.mp3' );\n      const plantCWateringSoundSoundClip = new phet.tambo.SoundClip( plantCWateringSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantCWateringSoundSoundClip );\n      scratchpad.plantCWateringSoundWrappedAudioBuffer = plantCWateringSoundWrappedAudioBuffer;\n      \n      let plantCWateringSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantCWateringSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantCWateringSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantCWateringSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCWatering' ], ( plantCWatering ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantCWateringSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantCWateringSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantCWateringSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantCWateringSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantCWateringSoundSoundClip.isPlaying ) {\n                  plantCWateringSoundSoundClip.play();\n                }\n                plantCWateringSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantCWateringSoundStopSoundTimeout ){\n                  window.clearTimeout( plantCWateringSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantCWateringSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantCWateringSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantCWateringSoundStopSoundTimeout ){\n                window.clearTimeout( plantCWateringSoundStopSoundTimeout );\n              }\n              plantCWateringSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantCWatering ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantCWateringSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantCWateringSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantCWateringSoundSoundClip = plantCWateringSoundSoundClip;\n    \n\n      const plantCGrowthPhaseSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/trillOne.wav' );\n      const plantCGrowthPhaseSoundSoundClip = new phet.tambo.SoundClip( plantCGrowthPhaseSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantCGrowthPhaseSoundSoundClip );\n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBuffer = plantCGrowthPhaseSoundWrappedAudioBuffer;\n      \n      let plantCGrowthPhaseSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantCGrowthPhaseSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantCGrowthPhaseSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCGrowthPhase' ], ( plantCGrowthPhase ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantCGrowthPhaseSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantCGrowthPhaseSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantCGrowthPhaseSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantCGrowthPhaseSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantCGrowthPhaseSoundSoundClip.isPlaying ) {\n                  plantCGrowthPhaseSoundSoundClip.play();\n                }\n                plantCGrowthPhaseSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantCGrowthPhaseSoundStopSoundTimeout ){\n                  window.clearTimeout( plantCGrowthPhaseSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantCGrowthPhaseSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantCGrowthPhaseSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantCGrowthPhaseSoundStopSoundTimeout ){\n                window.clearTimeout( plantCGrowthPhaseSoundStopSoundTimeout );\n              }\n              plantCGrowthPhaseSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantCGrowthPhase > 0 && plantCGrowthPhase < 6 ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantCGrowthPhaseSoundSoundClip = plantCGrowthPhaseSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let plantCImageImageElement = document.createElement( 'img' );\n      plantCImageImageElement.src = 'media/images/baked.png';\n      const plantCImageImage = new phet.scenery.Image( plantCImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const plantCImageImageLoadProperty = new phet.axon.Property( 0 );\n      plantCImageImageElement.addEventListener( 'load', () => { plantCImageImageLoadProperty.value = plantCImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( plantCImageImage );\n      scratchpad.plantCImageImage = plantCImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.plantCImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCPosition', 'plantCGrowthPhase' ], async ( plantCPosition, plantCGrowthPhase ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        plantCImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        plantCImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        plantCImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        plantCImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        plantCImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        plantCImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        plantCImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        plantCImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        plantCImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        plantCImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const plantCImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( plantCImageImage.localBounds.width || 1 ) / ( plantCImageImage.localBounds.height || 1 );\n\n        const scaleX = plantCImageImageViewBounds.width / ( plantCImageImage.localBounds.width || 1 );\n        const scaleY = plantCImageImageViewBounds.height / ( plantCImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          plantCImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          plantCImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        plantCImageImage.center = plantCImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( plantCImageImage.image ) {\n              const startIndex = plantCImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = plantCImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const plantCImageImageImageElement = document.createElement( 'img' );\n              plantCImageImageImageElement.src = newImageName;\n              plantCImageImage.image = plantCImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              plantCImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( plantCPosition.x );\nsetCenterY( plantCPosition.y );\n\nif ( plantCGrowthPhase === 0 ) {\n    await setImage( 'zz-plant1.png' );\n}\nelse if ( plantCGrowthPhase === 1 ) {\n    await setImage( 'zz-plant2.png' );\n}\nelse if ( plantCGrowthPhase === 2 ) {\n    await setImage( 'zz-plant3.png' );\n}\nelse if ( plantCGrowthPhase === 3 ) {\n    await setImage( 'zz-plant4.png' );\n}\nelse if ( plantCGrowthPhase === 4 ) {\n    await setImage( 'zz-plant5.png' );\n}\nelse if ( plantCGrowthPhase === 5 ) {\n    await setImage( 'zz-plant6.png' );\n}\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, plantCImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      scratchpad.plantCWaterControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCWatering' ], ( plantCWatering ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantCWater' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const plantCWater = phet.paperLand.getModelComponent( 'plantCWater' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setPlantCWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCWater' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          if ( plantCWatering ) {\n    setPlantCWater( 10 );\n}   \n        }\n      } );\n    \n\n      const plantCGrowthPhaseControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantCGrowthPhase', 'plantCWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantCGrowthPhase = phet.paperLand.getModelComponent( 'plantCGrowthPhase' ).value;\nconst plantCWater = phet.paperLand.getModelComponent( 'plantCWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantCGrowthPhase = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCGrowthPhase' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPlantCWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            if ( plantCWater > 0 ) {\n    if(!window.lastUpdateForC) {\n        window.lastUpdateForC = elapsedTime;\n    }\n    \n    let timeSinceLastUpdate = elapsedTime - window.lastUpdateForC;\n    \n    if (timeSinceLastUpdate >= 3) {\n        setPlantCGrowthPhase(Math.min( plantCGrowthPhase + 1, 5 ) );\n        window.lastUpdateForC = elapsedTime;\n    }\n  }\n \n        }\n      };\n      scratchpad.plantCGrowthPhaseControllerAnimationListener = plantCGrowthPhaseControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantCGrowthPhaseControllerAnimationListener );\n      \n    \n\n      const plantCWaterAnimationControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantCWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantCWater = phet.paperLand.getModelComponent( 'plantCWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantCWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          const rate = 1; // Controls how fast the water level decreases\nconst amount = rate * dt; // Calculates the amount to decrease the water level by based on the time step\n\nsetPlantCWater(plantCWater - amount); // Decreases the water level by the calculated amount \n        }\n      };\n      scratchpad.plantCWaterAnimationControllerAnimationListener = plantCWaterAnimationControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantCWaterAnimationControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCWatering' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCGrowthPhase' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCWater' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantCWateringSoundSoundClip );\n      delete scratchpad.plantCWateringSoundSoundClip;\n      \n      scratchpad.plantCWateringSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantCWateringSoundWrappedAudioBufferListener );\n      delete scratchpad.plantCWateringSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCWatering' ], scratchpad.plantCWateringSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantCWateringSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantCGrowthPhaseSoundSoundClip );\n      delete scratchpad.plantCGrowthPhaseSoundSoundClip;\n      \n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener );\n      delete scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCGrowthPhase' ], scratchpad.plantCGrowthPhaseSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantCGrowthPhaseSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.plantCImageImage );\n      delete scratchpad.plantCImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCPosition', 'plantCGrowthPhase' ], scratchpad.plantCImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.plantCImageImageMultilinkId;\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCWatering' ], scratchpad.plantCWaterControllerMultilinkId );\n      delete scratchpad.plantCWaterControllerMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantCGrowthPhaseControllerAnimationListener );\n      delete scratchpad.plantCGrowthPhaseControllerAnimationListener;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantCWaterAnimationControllerAnimationListener );\n      delete scratchpad.plantCWaterAnimationControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty227 = phet.paperLand.getModelComponent( 'plantCPosition' );\n    if ( modelProperty227 ) {\n      modelProperty227.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty234 = phet.paperLand.getModelComponent( 'plantCWatering' );\n    if ( modelProperty234 ) {\n      modelProperty234.value = otherPaperNumber === 6;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty237 = phet.paperLand.getModelComponent( 'plantCWatering' );\n    if ( modelProperty237 ) {\n      modelProperty237.value = otherPaperNumber === 6 ? false : modelProperty237.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Plant C', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Plant C\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const plantCWatering = new phet.axon.BooleanProperty(false);\n      phet.paperLand.addModelComponent( 'plantCWatering', plantCWatering );\n    \n\n      const plantCPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'plantCPosition', plantCPosition );\n    \n\n      const plantCGrowthPhase = new phet.axon.NumberProperty( 0, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantCGrowthPhase', plantCGrowthPhase );\n    \n\n      const plantCWater = new phet.axon.NumberProperty( 5, {\n        range: new phet.dot.Range( 0, 10 )\n      });\n      phet.paperLand.addModelComponent( 'plantCWater', plantCWater );\n    \n\n      const plantCWateringSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/accordionBoxOpen.mp3' );\n      const plantCWateringSoundSoundClip = new phet.tambo.SoundClip( plantCWateringSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantCWateringSoundSoundClip );\n      scratchpad.plantCWateringSoundWrappedAudioBuffer = plantCWateringSoundWrappedAudioBuffer;\n      \n      let plantCWateringSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantCWateringSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantCWateringSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantCWateringSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCWatering' ], ( plantCWatering ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantCWateringSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantCWateringSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantCWateringSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantCWateringSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantCWateringSoundSoundClip.isPlaying ) {\n                  plantCWateringSoundSoundClip.play();\n                }\n                plantCWateringSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantCWateringSoundStopSoundTimeout ){\n                  window.clearTimeout( plantCWateringSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantCWateringSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantCWateringSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantCWateringSoundStopSoundTimeout ){\n                window.clearTimeout( plantCWateringSoundStopSoundTimeout );\n              }\n              plantCWateringSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantCWatering ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantCWateringSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantCWateringSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantCWateringSoundSoundClip = plantCWateringSoundSoundClip;\n    \n\n      const plantCGrowthPhaseSoundWrappedAudioBuffer = createAndLoadWrappedAudioBuffer( 'media/sounds/trillOne.wav' );\n      const plantCGrowthPhaseSoundSoundClip = new phet.tambo.SoundClip( plantCGrowthPhaseSoundWrappedAudioBuffer, {\n        loop: false,\n        initialOutputLevel: 0.5\n       } );\n      phet.tambo.soundManager.addSoundGenerator( plantCGrowthPhaseSoundSoundClip );\n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBuffer = plantCGrowthPhaseSoundWrappedAudioBuffer;\n      \n      let plantCGrowthPhaseSoundStopSoundTimeout = null;\n      \n      // as a safety measure, sound can only be played every 0.25 seconds - initial value is very small\n      // so that it can be played immediately\n      let plantCGrowthPhaseSoundLastPlayTime = 0;\n      \n      // The listener that will observe the model and play sounds is added as soon as the sounds are loaded, and\n      // added to the scratch pad so that it can be removed later.\n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener = _buffer => {\n        if ( _buffer ) {\n        \n          // Play the sound when any dependencies change value.\n          scratchpad.plantCGrowthPhaseSoundSoundMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCGrowthPhase' ], ( plantCGrowthPhase ) => {\n            \n            // in a local scope, define the functions that the user can use to manipulate the sound\n            const setOutputLevel = ( level ) => {\n            \n              // As a safety measure, don't let the user set a level below zero and above 2.\n              const outputLevel = Math.max( 0, Math.min( 2, level ) );\n              plantCGrowthPhaseSoundSoundClip.outputLevel = outputLevel;\n            };\n            const setPlaybackRate = ( rate ) => {\n            \n              // As a safety measure, the playback rate cannot go below zero.\n              const playbackRate = Math.max( 0, rate );\n              plantCGrowthPhaseSoundSoundClip.setPlaybackRate( playbackRate );\n            };\n            \n            // a function the user can call to play the sound\n            const play = () => {\n            \n              // Play the sound - if looping, we don't want to start playing again if already playing. The sound\n              // can only be played at a limited interval for safety.\n              if ( ( !plantCGrowthPhaseSoundSoundClip.isPlaying || !false ) && phet.paperLand.elapsedTimeProperty.value - plantCGrowthPhaseSoundLastPlayTime > 0.25 ) {\n      \n                // only start playing again if it has been stopped - but we still enter this block to update\n                // the last play time and timeouts        \n                if ( !plantCGrowthPhaseSoundSoundClip.isPlaying ) {\n                  plantCGrowthPhaseSoundSoundClip.play();\n                }\n                plantCGrowthPhaseSoundLastPlayTime = phet.paperLand.elapsedTimeProperty.value;\n                \n                // Set a timer to turn off the sound when the value stops changing.\n                if ( plantCGrowthPhaseSoundStopSoundTimeout ){\n                  window.clearTimeout( plantCGrowthPhaseSoundStopSoundTimeout );\n                }\n                \n                // only stop if not looping\n                if ( !false ) {\n                  plantCGrowthPhaseSoundStopSoundTimeout = window.setTimeout( () => {\n                    plantCGrowthPhaseSoundSoundClip.stop();\n                  }, 5000 );\n                }  \n              }\n            };\n            \n            const stop = () => {\n              // Set a timer to turn off the sound when the value stops changing.\n              if ( plantCGrowthPhaseSoundStopSoundTimeout ){\n                window.clearTimeout( plantCGrowthPhaseSoundStopSoundTimeout );\n              }\n              plantCGrowthPhaseSoundSoundClip.stop();\n            };\n            \n            if ( true ) {\n              play();\n            }\n            \n            // declare the references so that they can be used in the control function\n            \n          \n            if ( plantCGrowthPhase > 0 && plantCGrowthPhase < 6 ) {\n    play();\n}\n          }, {\n            lazy: false,\n            otherReferences: [  ],\n          } );  \n        }\n      };     \n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.link( scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener );\n      \n      // Assign the sound to the scratchpad so that we can remove it later\n      scratchpad.plantCGrowthPhaseSoundSoundClip = plantCGrowthPhaseSoundSoundClip;\n    \n\n      // Create an image and add it to the view.\n      let plantCImageImageElement = document.createElement( 'img' );\n      plantCImageImageElement.src = 'media/images/baked.png';\n      const plantCImageImage = new phet.scenery.Image( plantCImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const plantCImageImageLoadProperty = new phet.axon.Property( 0 );\n      plantCImageImageElement.addEventListener( 'load', () => { plantCImageImageLoadProperty.value = plantCImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( plantCImageImage );\n      scratchpad.plantCImageImage = plantCImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.plantCImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCPosition', 'plantCGrowthPhase' ], async ( plantCPosition, plantCGrowthPhase ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        plantCImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        plantCImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        plantCImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        plantCImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        plantCImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        plantCImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        plantCImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        plantCImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        plantCImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        plantCImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const plantCImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( plantCImageImage.localBounds.width || 1 ) / ( plantCImageImage.localBounds.height || 1 );\n\n        const scaleX = plantCImageImageViewBounds.width / ( plantCImageImage.localBounds.width || 1 );\n        const scaleY = plantCImageImageViewBounds.height / ( plantCImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          plantCImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          plantCImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        plantCImageImage.center = plantCImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( plantCImageImage.image ) {\n              const startIndex = plantCImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = plantCImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const plantCImageImageImageElement = document.createElement( 'img' );\n              plantCImageImageImageElement.src = newImageName;\n              plantCImageImage.image = plantCImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              plantCImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( plantCPosition.x );\nsetCenterY( plantCPosition.y );\n\nif ( plantCGrowthPhase === 0 ) {\n    await setImage( 'zz-plant1.png' );\n}\nelse if ( plantCGrowthPhase === 1 ) {\n    await setImage( 'zz-plant2.png' );\n}\nelse if ( plantCGrowthPhase === 2 ) {\n    await setImage( 'zz-plant3.png' );\n}\nelse if ( plantCGrowthPhase === 3 ) {\n    await setImage( 'zz-plant4.png' );\n}\nelse if ( plantCGrowthPhase === 4 ) {\n    await setImage( 'zz-plant5.png' );\n}\nelse if ( plantCGrowthPhase === 5 ) {\n    await setImage( 'zz-plant6.png' );\n}\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, plantCImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n\n      scratchpad.plantCWaterControllerMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'plantCWatering' ], ( plantCWatering ) => {\n      \n        // We have behavior with components outside of the multilink that may not exist yet, we only do this\n        // work if all are available\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantCWater' ] ) ) {\n        \n          // references to the model components that are controlled by this listener AND the model compnoents\n          // that are selected as references\n          const plantCWater = phet.paperLand.getModelComponent( 'plantCWater' ).value;\n      \n          // the functions that are available to the client from their selected dependencies\n          const setPlantCWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCWater' );\n        modelComponent.value = newValue;  \n      }\n      \n      \n          // the code block that the user wrote to change controlled Properties\n          if ( plantCWatering ) {\n    setPlantCWater( 10 );\n}   \n        }\n      } );\n    \n\n      const plantCGrowthPhaseControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantCGrowthPhase', 'plantCWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantCGrowthPhase = phet.paperLand.getModelComponent( 'plantCGrowthPhase' ).value;\nconst plantCWater = phet.paperLand.getModelComponent( 'plantCWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantCGrowthPhase = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCGrowthPhase' );\n        modelComponent.value = newValue;  \n      }\n      \nconst setPlantCWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n            if ( plantCWater > 0 ) {\n    if(!window.lastUpdateForC) {\n        window.lastUpdateForC = elapsedTime;\n    }\n    \n    let timeSinceLastUpdate = elapsedTime - window.lastUpdateForC;\n    \n    if (timeSinceLastUpdate >= 3) {\n        setPlantCGrowthPhase(Math.min( plantCGrowthPhase + 1, 5 ) );\n        window.lastUpdateForC = elapsedTime;\n    }\n  }\n \n        }\n      };\n      scratchpad.plantCGrowthPhaseControllerAnimationListener = plantCGrowthPhaseControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantCGrowthPhaseControllerAnimationListener );\n      \n    \n\n      const plantCWaterAnimationControllerAnimationListener = dt => {\n      \n        // listener only runs if all declared dependencies are available in the model\n        if ( phet.paperLand.hasAllModelComponents( [ 'plantCWater' ] ) ) {\n               \n          // A reference to the elapsed time so it is usable in the function\n          const elapsedTime = phet.paperLand.elapsedTimeProperty.value;\n          \n          // references to each model component controlled by this listener\n          const plantCWater = phet.paperLand.getModelComponent( 'plantCWater' ).value;\n        \n          // the functions create in the local scope to manipulate the controlled components\n          const setPlantCWater = newValue => {\n        const modelComponent = phet.paperLand.getModelComponent( 'plantCWater' );\n        modelComponent.value = newValue;  \n      }\n      \n          \n          // the function that that the user wrote\n          const rate = 1; // Controls how fast the water level decreases\nconst amount = rate * dt; // Calculates the amount to decrease the water level by based on the time step\n\nsetPlantCWater(plantCWater - amount); // Decreases the water level by the calculated amount \n        }\n      };\n      scratchpad.plantCWaterAnimationControllerAnimationListener = plantCWaterAnimationControllerAnimationListener;\n      \n      // add the listener to the step timer\n      phet.axon.stepTimer.addListener( plantCWaterAnimationControllerAnimationListener );\n      \n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCWatering' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCPosition' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCGrowthPhase' );\n    \n\n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'plantCWater' );\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantCWateringSoundSoundClip );\n      delete scratchpad.plantCWateringSoundSoundClip;\n      \n      scratchpad.plantCWateringSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantCWateringSoundWrappedAudioBufferListener );\n      delete scratchpad.plantCWateringSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCWatering' ], scratchpad.plantCWateringSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantCWateringSoundSoundMultilinkId;\n    \n\n      phet.tambo.soundManager.removeSoundGenerator( scratchpad.plantCGrowthPhaseSoundSoundClip );\n      delete scratchpad.plantCGrowthPhaseSoundSoundClip;\n      \n      scratchpad.plantCGrowthPhaseSoundWrappedAudioBuffer.audioBufferProperty.unlink( scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener );\n      delete scratchpad.plantCGrowthPhaseSoundWrappedAudioBufferListener;\n      \n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCGrowthPhase' ], scratchpad.plantCGrowthPhaseSoundSoundMultilinkId, {\n        otherReferences: [  ]\n       } );\n      delete scratchpad.plantCGrowthPhaseSoundSoundMultilinkId;\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.plantCImageImage );\n      delete scratchpad.plantCImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCPosition', 'plantCGrowthPhase' ], scratchpad.plantCImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.plantCImageImageMultilinkId;\n    \n\n      phet.paperLand.removeModelPropertyMultilink( [ 'plantCWatering' ], scratchpad.plantCWaterControllerMultilinkId );\n      delete scratchpad.plantCWaterControllerMultilinkId;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantCGrowthPhaseControllerAnimationListener );\n      delete scratchpad.plantCGrowthPhaseControllerAnimationListener;\n    \n\n      phet.axon.stepTimer.removeListener( scratchpad.plantCWaterAnimationControllerAnimationListener );\n      delete scratchpad.plantCWaterAnimationControllerAnimationListener;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty227 = phet.paperLand.getModelComponent( 'plantCPosition' );\n    if ( modelProperty227 ) {\n      modelProperty227.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty234 = phet.paperLand.getModelComponent( 'plantCWatering' );\n    if ( modelProperty234 ) {\n      modelProperty234.value = otherPaperNumber === 6;\n    }\n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n    const modelProperty237 = phet.paperLand.getModelComponent( 'plantCWatering' );\n    if ( modelProperty237 ) {\n      modelProperty237.value = otherPaperNumber === 6 ? false : modelProperty237.value;\n    }\n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.2,\n        right: 0.2,\n        bottom: 0.2,\n        left: 0.2\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Plant C', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-demos.4.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-demos/programs/4/debugInfo",
  "claimUrl": "/api/spaces/creator-demos/programs/4/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}
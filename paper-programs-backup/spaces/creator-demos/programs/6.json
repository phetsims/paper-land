{
  "number": 6,
  "originalCode": "// Watering Can\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const waterCanPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'waterCanPosition', waterCanPosition );\n    \n\n      // Create an image and add it to the view.\n      let waterCanImageImageElement = document.createElement( 'img' );\n      waterCanImageImageElement.src = 'media/images/water-can.png';\n      const waterCanImageImage = new phet.scenery.Image( waterCanImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const waterCanImageImageLoadProperty = new phet.axon.Property( 0 );\n      waterCanImageImageElement.addEventListener( 'load', () => { waterCanImageImageLoadProperty.value = waterCanImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( waterCanImageImage );\n      scratchpad.waterCanImageImage = waterCanImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.waterCanImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'waterCanPosition' ], async ( waterCanPosition ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        waterCanImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        waterCanImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        waterCanImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        waterCanImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        waterCanImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        waterCanImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        waterCanImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        waterCanImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        waterCanImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        waterCanImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const waterCanImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( waterCanImageImage.localBounds.width || 1 ) / ( waterCanImageImage.localBounds.height || 1 );\n\n        const scaleX = waterCanImageImageViewBounds.width / ( waterCanImageImage.localBounds.width || 1 );\n        const scaleY = waterCanImageImageViewBounds.height / ( waterCanImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          waterCanImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          waterCanImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        waterCanImageImage.center = waterCanImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( waterCanImageImage.image ) {\n              const startIndex = waterCanImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = waterCanImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const waterCanImageImageImageElement = document.createElement( 'img' );\n              waterCanImageImageImageElement.src = newImageName;\n              waterCanImageImage.image = waterCanImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              waterCanImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( waterCanPosition.x );\nsetCenterY( waterCanPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, waterCanImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'waterCanPosition' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.waterCanImageImage );\n      delete scratchpad.waterCanImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'waterCanPosition' ], scratchpad.waterCanImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.waterCanImageImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty215 = phet.paperLand.getModelComponent( 'waterCanPosition' );\n    if ( modelProperty215 ) {\n      modelProperty215.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.02,\n        right: 0.02,\n        bottom: 0.02,\n        left: 0.02\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Watering Can', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "currentCode": "// Watering Can\n// Keywords: \n// Description: \n\nimportScripts('paper.js');\n\n(async () => {\n\n  const onProgramAdded = ( paperNumber, scratchpad, sharedData ) => {\n    \n      const waterCanPosition = new phet.dot.Vector2Property(\n        new phet.dot.Vector2( 0, 0 )\n      );\n      phet.paperLand.addModelComponent( 'waterCanPosition', waterCanPosition );\n    \n\n      // Create an image and add it to the view.\n      let waterCanImageImageElement = document.createElement( 'img' );\n      waterCanImageImageElement.src = 'media/images/water-can.png';\n      const waterCanImageImage = new phet.scenery.Image( waterCanImageImageElement );\n\n      // As soon as the image loads, update a Property added to the multilink so that the control\n      // function is called again to update the positioning.       \n      const waterCanImageImageLoadProperty = new phet.axon.Property( 0 );\n      waterCanImageImageElement.addEventListener( 'load', () => { waterCanImageImageLoadProperty.value = waterCanImageImageLoadProperty.value + 1; } );\n      \n      sharedData.scene.addChild( waterCanImageImage );\n      scratchpad.waterCanImageImage = waterCanImageImage;\n      \n      // Update the image when a dependency changes, and redraw if the board resizes. This is async because\n      // function in the control function might be async to support loading images.\n      scratchpad.waterCanImageImageMultilinkId = phet.paperLand.addModelPropertyMultilink( [ 'waterCanPosition' ], async ( waterCanPosition ) => {\n        \n        // the functions that are available for this view type\n        \n      const unitBoundsToDisplayBounds = ( bounds ) => {\n        return phet.paperLand.utils.paperToDisplayBounds( bounds, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n      \n      const unitPositionToDisplayPosition = ( position ) => {\n        return phet.paperLand.utils.paperToDisplayCoordinates( position, sharedData.displaySize.width, sharedData.displaySize.height );\n      };\n    \n      const setCenterX = ( x ) => {\n        waterCanImageImage.centerX = phet.paperLand.utils.paperToDisplayX( x, sharedData.displaySize.width );\n      };\n      \n      const setCenterY = ( y ) => {\n        waterCanImageImage.centerY = phet.paperLand.utils.paperToDisplayY( y, sharedData.displaySize.height );\n      };\n      \n      const setLeft = ( left ) => {\n        waterCanImageImage.left = phet.paperLand.utils.paperToDisplayX( left, sharedData.displaySize.width );\n      };\n      \n      const setTop = ( top ) => {\n        waterCanImageImage.top = phet.paperLand.utils.paperToDisplayY( top, sharedData.displaySize.height );\n      };\n      \n      const setScale = ( scale ) => {\n        waterCanImageImage.setScaleMagnitude( scale );\n      };\n      \n      const setOpacity = ( opacity ) => {\n        waterCanImageImage.opacity = opacity;\n      };\n      \n      const setVisible = ( visible ) => {\n        waterCanImageImage.visible = visible;\n      };\n      \n      const moveToFront = () => {\n        waterCanImageImage.moveToFront();\n      };\n      \n      const moveToBack = () => {\n        waterCanImageImage.moveToBack();\n      };\n      \n      const setRotation = ( rotation ) => {\n        waterCanImageImage.rotation = rotation;\n      };\n\n      // Set the scale in X and Y and the       \n      const matchBounds = ( bounds, stretch ) => {\n      \n        // Find the scale to apply to the x and y dimensions so that the component bounds match the provided bounds\n        const waterCanImageImageViewBounds = phet.paperLand.utils.paperToDisplayBounds(bounds, sharedData.displaySize.width, sharedData.displaySize.height);\n\n        // local bounds may be zero as things load\n        // const aspectRatio = ( waterCanImageImage.localBounds.width || 1 ) / ( waterCanImageImage.localBounds.height || 1 );\n\n        const scaleX = waterCanImageImageViewBounds.width / ( waterCanImageImage.localBounds.width || 1 );\n        const scaleY = waterCanImageImageViewBounds.height / ( waterCanImageImage.localBounds.height || 1 );\n\n        if ( stretch ) {\n          waterCanImageImage.setScaleMagnitude(scaleX, scaleY);\n        }\n        else {\n        \n          // Scale by the minimum of the x and y scale factors, preserving the aspect ratio\n          waterCanImageImage.setScaleMagnitude( Math.min( scaleX, scaleY ) );\n        }        \n\n        // Now put the component in the center of the bounds\n        waterCanImageImage.center = waterCanImageImageViewBounds.center;\n      };\n      \n\n      \n        // This is async so that we can wait for the image to load before doing other things\n        const setImage = async imageName => {\n        \n          return new Promise( (resolve, reject) => {\n          \n            // Get the current image name relative to the local paper playground path\n            let currentImageName;\n            if ( waterCanImageImage.image ) {\n              const startIndex = waterCanImageImage.image.src.indexOf( 'media/images/' );\n              currentImageName = waterCanImageImage.image.src.substring( startIndex );\n            }\n            else {\n              currentImageName = '';\n            }\n            \n            const newImageName = 'media/images/' + imageName;\n            \n            // only update the image if there is a change\n            if ( currentImageName !== newImageName ) {\n              const waterCanImageImageImageElement = document.createElement( 'img' );\n              waterCanImageImageImageElement.src = newImageName;\n              waterCanImageImage.image = waterCanImageImageImageElement;\n\n              // Wait for the image to load before resolving              \n              waterCanImageImageImageElement.addEventListener( 'load', () => {\n                resolve();\n              } );\n            }\n            else {\n              \n              // No change, so resolve immediately\n              resolve();\n            }\n          } );\n        };\n      \n        \n        // bring in the reference components so they are available in the control function\n        \n      \n        setCenterX( waterCanPosition.x );\nsetCenterY( waterCanPosition.y );\n      }, {\n        otherProperties: [ phet.paperLand.displaySizeProperty, waterCanImageImageLoadProperty ],\n        otherReferences: [  ]\n      } );\n    \n  };\n\n  const onProgramRemoved = ( paperNumber, scratchpad, sharedData ) => {\n    \n      // Remove the component from the model\n      phet.paperLand.removeModelComponent( 'waterCanPosition' );\n    \n\n      // Remove the image from the view.\n      sharedData.scene.removeChild( scratchpad.waterCanImageImage );\n      delete scratchpad.waterCanImageImage;\n      \n      // Remove the multilink\n      phet.paperLand.removeModelPropertyMultilink( [ 'waterCanPosition' ], scratchpad.waterCanImageImageMultilinkId, {\n        otherReferences: [  ]\n      } );\n      delete scratchpad.waterCanImageImageMultilinkId;\n    \n  };\n\n  const onProgramChangedPosition = ( paperNumber, points, scratchpad, sharedData ) => {\n    \n    const modelProperty215 = phet.paperLand.getModelComponent( 'waterCanPosition' );\n    if ( modelProperty215 ) {\n      modelProperty215.value = phet.paperLand.utils.getProgramCenter( points );\n    }\n  };\n  \n  const onProgramMarkersAdded = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersRemoved = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramMarkersChangedPosition = ( paperNumber, points, scratchpad, sharedData, markers ) => {\n    \n  };\n  \n  const onProgramAdjacent = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n  \n  const onProgramSeparated = ( paperNumber, otherPaperNumber, direction, scratchpad, sharedData ) => {\n    \n  };\n\n  await paper.set( 'data', {\n    paperPlaygroundData: {\n      updateTime: Date.now(),\n      eventHandlers: {\n        onProgramAdded: onProgramAdded.toString(),\n        onProgramRemoved: onProgramRemoved.toString(),\n        onProgramChangedPosition: onProgramChangedPosition.toString(),\n        onProgramMarkersAdded: onProgramMarkersAdded.toString(),\n        onProgramMarkersRemoved: onProgramMarkersRemoved.toString(),\n        onProgramMarkersChangedPosition: onProgramMarkersChangedPosition.toString(),\n        onProgramAdjacent: onProgramAdjacent.toString(),\n        onProgramSeparated: onProgramSeparated.toString(),\n      },\n      customWhiskerLengths: {\n        top: 0.02,\n        right: 0.02,\n        bottom: 0.02,\n        left: 0.02\n      }\n    }\n  } );\n  \n  // PROJECTOR CODE //\n  // Get a canvas object for this paper to draw something to the Projector.\n  const canvas = await paper.get('canvas');\n\n  // Draw the name of the program to the projector\n  const ctx = canvas.getContext('2d');\n  ctx.font = '20px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillStyle = 'rgb(255,0,0)';\n  ctx.fillText('', canvas.width / 2, canvas.height / 2 - 10);\n  ctx.fillStyle = 'rgb(0,255,0)';\n  ctx.font = '10px sans-serif';\n  ctx.fillText('Watering Can', canvas.width / 2, canvas.height / 2 + 20);\n})();\n",
  "printed": false,
  "editorInfo": {},
  "currentCodeUrl": "program.creator-demos.6.js",
  "currentCodeHash": "",
  "debugUrl": "/api/spaces/creator-demos/programs/6/debugInfo",
  "claimUrl": "/api/spaces/creator-demos/programs/6/claim",
  "codeHasChanged": false,
  "debugInfo": "{\"logs\":[]}"
}